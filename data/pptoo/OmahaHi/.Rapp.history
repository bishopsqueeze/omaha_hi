1:nrow(res.mat)/nrow(res.mat)
head(res.mat)
##------------------------------------------------------------------#
## Clear the workspace#
##------------------------------------------------------------------#
rm(list=ls())#
#
##------------------------------------------------------------------#
## Load data#
##------------------------------------------------------------------#
#
## 6max simulation data#
setwd("/Users/alexstephens/Development/poker/omaha_hi/data/simulations")#
load("hotColdEquity_6max_OmahiHi_AllHands.Rdata")#
#
## 6max hand attributes#
setwd("/Users/alexstephens/Development/poker/omaha_hi/data/pptoo/OmahaHi")#
load("ppt_plo_handrankings_06handed.Rdata")
head(res.mat)
nrow(res.mat)
eqty.mat                <- res.mat#
eqty.mat[,c("cum%")]    <- 1:nrow(res.mat)/nrow(res.mat)
eqty.mat                <- res.mat
a <- 1:nrow(res.mat)/nrow(res.mat)
length(a)
a
eqty.mat[,c("cum%")]    <- 1:nrow(res.mat)/nrow(res.mat)
eqty.mat                <- res.mat
head(eqty.mat)
eqty.mat[,c("cp")]    <- NA
eqty.mat              <- res.mat#
eqty.mat              <- cbind(eqty.mat, 1:nrow(res.mat)/nrow(res.mat))
head(eqty.mat)
eqty.mat              <- res.mat#
eqty.mat              <- cbind(eqty.mat, cum=1:nrow(res.mat)/nrow(res.mat))
head(eqty.mat)
eqty.mat              <- res.mat#
eqty.mat              <- cbind(eqty.mat, cumpct=1:nrow(res.mat)/nrow(res.mat))
head(eqty.mat)
hand.mat    <- plo_6max.list[["hd"]]#
#
eqty.mat    <- res.mat#
eqty.mat    <- cbind(   eqty.mat,#
                        pct=1:nrow(res.mat)/nrow(res.mat),#
                        cumpct=cumsum(1:nrow(res.mat)/nrow(res.mat)))
head(hand.mat)
head(eqty.mat)
tail(eqty.mat)
eqty.mat    <- res.mat#
eqty.mat    <- cbind(   eqty.mat,#
                        cummpct=1:nrow(res.mat)/nrow(res.mat))
head(eqty.mat)
tail(eqty.com)
tail(eqty.mat)
head(hand.mat)
idx <- which(equity.mat[,c("cumpct")] >= 0.10)
idx <- which(eqty.mat[,c("cumpct")] >= 0.10)
hand.mat    <- plo_6max.list[["hd"]]#
#
eqty.mat    <- res.mat#
eqty.mat    <- cbind(   eqty.mat,#
                        cumpct=1:nrow(res.mat)/nrow(res.mat))
idx <- which(eqty.mat[,c("cumpct")] >= 0.10)
length(idx)
idx <- which(eqty.mat[,c("cumpct")] <= 0.10)
length(idx)
hand.mat[idx,]
tmp <- hand.mat[idx,]
head(tmp)
table(tmp$duit)
table(tmp$suit)
table(tmp$suit, tmp$pair)
table(tmp$hipair, tmp$lopair)
table(tmp$hiPair, tmp$loPair)
rownames(table(tmp$hiPair, tmp$loPair))
glob.rank    <- c("A", "K", "Q", "J", "T", "9", "8", "7", "6", "5", "4", "3", "2")#
which(rownames(table(tmp$hiPair, tmp$loPair)) %in% glob.rank)
which(glob.rank %in% rownames(table(tmp$hiPair, tmp$loPair)))
match(glob.rank, rownames(table(tmp$hiPair, tmp$loPair)))
## reorder columns#
glob.rank   <- c("A", "K", "Q", "J", "T", "9", "8", "7", "6", "5", "4", "3", "2")#
glob.match  <- match(glob.rank, rownames(table(tmp$hiPair, tmp$loPair)))#
test <- table(tmp$hiPair, tmp$loPair)[glob.match, ]
test
glob.rank   <- c("A", "K", "Q", "J", "T", "9", "8", "7", "6", "5", "4", "3", "2")#
#
row.match   <- match(glob.rank, rownames(table(tmp$hiPair, tmp$loPair)))#
col.match   <- match(glob.rank, colnames(table(tmp$hiPair, tmp$loPair)))#
test <- table(tmp$hiPair, tmp$loPair)[row.match, col]
col.match
na.rm(col.match)
na.omit(col.match)
na.omit(col.match)[1]
na.omit(col.match)
as.integer(na.omit(col.match))
## reorder columns#
glob.rank   <- c("A", "K", "Q", "J", "T", "9", "8", "7", "6", "5", "4", "3", "2")#
#
row.match   <- as.integer(na.omit(match(glob.rank, rownames(table(tmp$hiPair, tmp$loPair)))))#
col.match   <- as.integer(na.omit(match(glob.rank, colnames(table(tmp$hiPair, tmp$loPair)))))#
test <- table(tmp$hiPair, tmp$loPair)[row.match, col]
## reorder columns#
glob.rank   <- c("A", "K", "Q", "J", "T", "9", "8", "7", "6", "5", "4", "3", "2")#
#
row.match   <- as.integer(na.omit(match(glob.rank, rownames(table(tmp$hiPair, tmp$loPair)))))#
col.match   <- as.integer(na.omit(match(glob.rank, colnames(table(tmp$hiPair, tmp$loPair)))))#
test <- table(tmp$hiPair, tmp$loPair)[row.match, col.match]
test
head(tmp)
table(tmp$hiCard)
table(tmp$hiCard, tmp$hiSuited)
table(tmp$hiCard, tmp$piar)
table(tmp$hiCard, tmp$pair
)
table(tmp$hiCard, tmp$conn)
head(tmp)
head(tmp$suit, tmp$conn)
table(tmp$suit, tmp$conn)
tmp(which(tmp$suit == "rb"))
a <- tmp[which(tmp$suit == "rb"),]
a
##------------------------------------------------------------------#
## Clear the workspace#
##------------------------------------------------------------------#
rm(list=ls())#
#
##------------------------------------------------------------------#
## Set the working directory#
##------------------------------------------------------------------#
setwd("/Users/alexstephens/Development/poker/omaha_hi/data/pptoo/OmahaHi")#
#
##------------------------------------------------------------------#
## The PPT hands Omaha hands have the follow structures#
##------------------------------------------------------------------#
## XYZW#
## (XY)ZW#
## X(YZ)W#
## XY(ZW)#
## (XYZ)W#
## X(YZW)#
## (XYZW)#
## (XY)(ZW)#
##------------------------------------------------------------------#
#
##------------------------------------------------------------------#
## The goal is to convert these into the PPT generic syntax format#
##------------------------------------------------------------------#
## E.g., translate (AJ)(AJ) --> AxJxAyJy (double-suited double-pair)#
##------------------------------------------------------------------#
##------------------------------------------------------------------#
## <function> appendSuits#
##------------------------------------------------------------------#
## Takes a hand character vector, e.g., c("A","J","A","J") and#
## appends a suit character vector, e.g., c("x", "x", "y", "y")#
##------------------------------------------------------------------#
appendSuits <- function(h, s) {#
    return(paste(paste(h,s,sep=""), collapse=""))#
}#
#
##------------------------------------------------------------------#
## <function> rankToNum#
##------------------------------------------------------------------#
## Given a hand (e.g., c("A","J","A","J")), translate the ranks into#
## numerical equivalents (e.g., A=13, K=12, ... 3=2, 2=1)#
##------------------------------------------------------------------#
rankToNum <- function(n, r, hr) {#
    n[match(hr, r)]#
    return(sort(n[match(hr, r)], decreasing=TRUE))#
}
##------------------------------------------------------------------#
## <function> processHandFile#
##------------------------------------------------------------------#
## Takes a PPT Omaha hand file as an input and writes the translated#
## format to a file.  The output filename contains the "_genericSyntax"#
## postfix.#
##------------------------------------------------------------------#
processHandFile <- function(in.file) {#
#
    ## "global" rank/number vectors#
    glob.num     <- seq(13, 1, -1)#
    glob.rank    <- c("A", "K", "Q", "J", "T", "9", "8", "7", "6", "5", "4", "3", "2")#
    ## process the filename#
    tmp.file    <- unlist(strsplit(in.file, "[.]"))#
    out.file    <- paste0(tmp.file[1], "_genericSyntax_DEBUG", ".", tmp.file[2])#
#
    ## read the input file#
    hf          <- read.csv(in.file, header=FALSE)#
    ## create output matrices#
    hand.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    suit.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    suit.combo  <- matrix(,nrow=nrow(hf), ncol=1)#
    pair.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    pair.ranks  <- matrix(,nrow=nrow(hf), ncol=2)#
    high.card   <- matrix(,nrow=nrow(hf), ncol=1)#
    high.suited <- matrix(,nrow=nrow(hf), ncol=1)#
    rank.conn   <- matrix(,nrow=nrow(hf), ncol=1)#
    rank.gaps   <- matrix(,nrow=nrow(hf), ncol=1)#
    shape.type  <- matrix(,nrow=nrow(hf), ncol=1)#
#
    ## loop over each row in the file and process the ranked hand#
    for (i in 1:nrow(hf)) {#
        #for (i in 1:1147) {#
        ## process a hand#
        tmp.ch      <- unlist(strsplit(as.character(hf[i,]), ""))   ## split hand into individual characters#
        tmp.nch     <- length(tmp.ch)                               ## count number of characters#
        tmp.lp      <- which(tmp.ch %in% c("("))                    ## location of left parentheses#
        tmp.rp      <- which(tmp.ch %in% c(")"))                    ## location of right parentheses#
        tmp.ranks   <- tmp.ch[which(!(tmp.ch %in% c("(",")")))]     ## extract ranks#
        ## get hand shape infp#
        tmp.nums    <- rankToNum(glob.num, glob.rank, tmp.ranks)    ## convert ranks to (sorted) numbers#
        tmp.gaps    <- abs(diff(tmp.nums))                          ## calculate gap sizes#
        tmp.unq     <- length(unique(tmp.nums))                     ## number of unique#
        tmp.tbl     <- table(tmp.ranks)#
        ##------------------------------------------------------------------#
        ## the if/then processes the hand based on the length, and#
        ## for single-suited suited hands it will use the location#
        ## of the right and left parentheses to assign the suits#
        ##------------------------------------------------------------------#
        ##------------------------------------------------------------------#
        ## Deconstruct suits and identify suit shapes#
        ##------------------------------------------------------------------#
        ## double suited#
        if (tmp.nch == 8) {#
            tmp.suits   <- c("x","x","y","y")#
            tmp.color   <- c("ds")#
        ## single suited#
        } else if (tmp.nch == 6) {#
            ## (XY)ZW [1,4]#
            if ((tmp.lp == 1) & (tmp.rp == 4)) {#
                tmp.suits   <- c("x","x","y","z")#
                tmp.color   <- c("ss.2o")#
            ## X(YZ)W [2,5]#
            } else if ((tmp.lp == 2) & (tmp.rp == 5)) {#
                tmp.suits   <- c("x","y","y","z")#
                tmp.color   <- c("ss.2o")#
            ## XY(ZW) [3,6]#
            } else if ((tmp.lp == 3) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","y","z","z")#
                tmp.color   <- c("ss.2o")#
            ## (XYZ)W [1,5]#
            } else if ((tmp.lp == 1) & (tmp.rp == 5)) {#
                tmp.suits   <- c("x","x","x","y")#
                tmp.color   <- c("ss.1o")#
            ## X(YZW) [2,6]#
            } else if ((tmp.lp == 2) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","y","y","y")#
                tmp.color   <- c("ss.1o")#
            ## (XYZW) [1,6]#
            } else if ((tmp.lp == 1) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","x","x","x")#
                tmp.color   <- c("mo")#
            }#
        ## rainbow#
        } else if (tmp.nch == 4) {#
            tmp.suits   <- c("x","y","z","w")#
            tmp.color   <- c("rb")#
        ## error#
        } else {#
            stop("unexpected string lenght\n")#
        }#
        hand.shape[i,1]     <- appendSuits(tmp.ranks, tmp.suits)#
        suit.shape[i,1]     <- tmp.color#
        suit.combo[i,1]     <- paste0(tmp.suits, collapse="")#
#
        ##------------------------------------------------------------------#
        ## Identify pair types#
        ##------------------------------------------------------------------#
        if (max(tmp.tbl) == 4) {#
            tmp.count   <- c("4k")#
            tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
            tmp.lopair  <- NA#
        } else if (max(tmp.tbl) == 3) {#
            tmp.count   <- c("3k")#
            tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
            tmp.lopair  <- NA#
        } else if (max(tmp.tbl == 2)) {#
            if (tmp.unq == 2) {#
                tmp.count   <- c("2p")#
                tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
                tmp.lopair  <- glob.rank[max(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
            } else {#
                tmp.count   <- c("1p")#
                tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
                tmp.lopair  <- NA#
            }#
        } else {#
            tmp.count   <- c("0p")#
            tmp.hipair  <- NA#
            tmp.lopair  <- NA#
        }#
        pair.shape[i,1]     <- tmp.count#
        pair.ranks[i,]      <- c(tmp.hipair, tmp.lopair)#
        ##------------------------------------------------------------------#
        ## Identify shape types#
        ##------------------------------------------------------------------#
        ## Hand Shape	Description        ## XaXbXcXd	4K::abcd        ## XaXbXcYa	3K::aabc        ## XaXbXcYd	3K::abcd        ## XaXbYaYb	2P::aabb        ## XaXbYaYc	2P::aabc        ## XaXbYcYd	2P::abcd        ## XaXbYaZa	1P::aaab        ## XaXbYaZb	1P::aabb        ## XaXbYaZc	1P::aabc        ## XaXbYcZc	1P::aabc        ## XaXbYcZd	1P::abcd        ## XaYaZaRa	NP::aaaa        ## XaYaZaRb	NP::aaab        ## XaYaZbRb	NP::aabb        ## XaYaZbRc	NP::aabc        ## XaYbZcRd	NP::abcd#
        ##------------------------------------------------------------------#
        if (tmp.count == "4k") {#
             ## XaXbXcXd	4K::abcd#
            tmp.shape <- "XaXbXcXd"#
        } else if (tmp.count == "3k") {#
            ## XaXbXcYa	3K::aabc#
            if (suit.combo[i,1] == "ss.2o") {#
                tmp.shape   <- "XaXbXcYa"#
            ## XaXbXcYd	3K::abcd#
            } else if (suit.combo[i,1] == "rb") {#
                tmp.shape   <- "XaXbXcYd"#
            }#
        } else if (tmp.count == "2p") {#
            ## XaXbYaYb	2P::aabb#
            if (suit.combo[i,1] == "ds") {#
                tmp.shape   <- "XaXbYaYb"            ## XaXbYaYc	2P::aabc#
            } else if (suit.combo[i,1] == "ss.2o") {#
                tmp.shape   <- "XaXbYaYc"            ## XaXbYcYd	2P::abcd#
            } else if (suit.combo[i,1] == "rb") {#
                tmp.shape   <- "XaXbYcYd"#
            }#
        } else if (tmp.count == "1p") {#
            ## XaXbYaZa	1P::aaab#
            if (suit.combo[i,1] == "ss.1o") {#
                tmp.shape   <- "XaXbYaZa"            ## XaXbYaZb	1P::aabb            } else if (suit.combo[i,1] == "ds") {#
                tmp.shape   <- "XaXbYaZb"#
            ## XaXbYaZc	1P::aabc#
            } else if (suit.combo[i,1] == "ss.2o") {#
                tmp.shape   <- "XaXbYaZc"            ## XaXbYcZc	1P::aabc#
            #} else if (suit.combo[i,1] == "ss.2o") {#
            #    tmp.shape   <- "XaXbYaZc"            ## XaXbYcZd	1P::abcd#
            } else if (suit.combo[i,1] == "rb") {#
                tmp.shape   <- "XaXbYcZd"#
            }#
        } else {#
            ## XaYaZaRa	NP::aaaa#
            if (suit.combo[i,1] == "mo") {#
                tmp.shape   <- "XaYaZaRa"            ## XaYaZaRb	NP::aaab#
            } else if (suit.combo[i,1] == "ss.1o") {#
                tmp.shape   <- "XaYaZaRb"            ## XaYaZbRb	NP::aabb#
            } else if (suit.combo[i,1] == "ds") {#
                tmp.shape   <- "XaYaZbRb"            ## XaYaZbRc	NP::aabc#
            } else if (suit.combo[i,1] == "ss.2o") {#
                tmp.shape   <- "XaYaZbRc"            ## XaYbZcRd	NP::abcd#
            } else if (suit.combo[i,1] == "rb") {#
                tmp.shape   <- "XaYbZcRd"#
            }#
        }#
        shape.type[i,]  <- tmp.shape#
#
        ##------------------------------------------------------------------#
        ## Identify high card#
        ##------------------------------------------------------------------#
        high.card[i,]  <- glob.rank[which(glob.num == max(tmp.nums))]#
        ##------------------------------------------------------------------#
        ## Identify high card#
        ##------------------------------------------------------------------#
        ## get suits tied to the high card#
        hi.suits        <- tmp.suits[which(tmp.ranks %in% high.card[i,])]#
        non.hi.suits    <- tmp.suits[which(!(tmp.ranks %in% high.card[i,]))]#
        if (length(which(hi.suits %in% non.hi.suits)) > 0) {#
            high.suited[i,] <- "Y"#
        } else {#
            high.suited[i,] <- "N"#
        }#
        ##------------------------------------------------------------------#
        ## Identify connectedness#
        ##------------------------------------------------------------------#
        ## pure rundown variants#
        if (all(tmp.gaps == 1)) {#
            tmp.conn    <- "rd.0g"#
        } else if ( all(tmp.gaps == 2)) {#
            tmp.conn    <- "rd.1g"#
        } else if (all(tmp.gaps == 3)) {#
            tmp.conn    <- "rd.2g"#
        ## connected 2-pair#
        } else if ( (tmp.gaps[1] == 0) & (tmp.gaps[3] == 0) & (tmp.gaps[2] %in% c(1,2,3)) ) {#
            tmp.conn    <- "2p.conn"#
        ## rundown plus pair#
        } else if ( (sum(tmp.gaps==0)==1) & (sum(tmp.gaps==1)==2) ) {#
            tmp.conn    <- "rd.1p"#
        ## single gap rundown#
        } else if ( (sum(tmp.gaps==2)==1) & (sum(tmp.gaps==1)==2) ) {#
            tmp.conn    <- "rd.1g"#
#
        ## double gap rundown#
        } else if ( (sum(tmp.gaps==3)==1) & (sum(tmp.gaps==1)==2) ) {#
            tmp.conn    <- "rd.2g"#
#
        ## triple gap rundown#
        } else if ( (sum(tmp.gaps==4)==1) & (sum(tmp.gaps==1)==2) ) {#
            tmp.conn    <- "rd.3g"#
#
        ## dangler gap rundown#
        } else if ( (sum(tmp.gaps>4)==1) & (sum(tmp.gaps==1)==2) ) {#
            tmp.conn    <- "rd.dg"#
#
        ## 2x single gap rundown#
        } else if ( (sum(tmp.gaps==1)==1) & (sum(tmp.gaps==2)==2) ) {#
            tmp.conn    <- "rd.2x1g"#
#
        ## 2x double gap rundown#
        } else if ( (sum(tmp.gaps==1)==1) & (sum(tmp.gaps==3)==2) ) {#
            tmp.conn    <- "rd.2x2g"#
        ## connected single-pair#
        } else if ( (sum(tmp.gaps==0)==1) & (sum(tmp.gaps==1)==1) & (sum(tmp.gaps==2)==1) ) {#
            tmp.conn    <- "1p.conn"#
        ## default#
        } else {#
            tmp.conn    <- NA#
        }#
        rank.conn[i,]   <- tmp.conn#
        ##------------------------------------------------------------------#
        ## Consolidate gap data#
        ##------------------------------------------------------------------#
        rank.gaps[i,]   <- paste(tmp.gaps, collapse=":")#
#
    }#
    ## consolidate#
    hand.data   <- data.frame(  hand=hand.shape,#
                                suit=suit.shape,#
                                pair=pair.shape,#
                                ranks=pair.ranks,#
                                highCard=high.card,#
                                highSuited=high.suited,#
                                conn=rank.conn,#
                                gaps=rank.gaps)#
#
    colnames(hand.data) <- c("hand","suit","pair","hiPair","loPair","hiCard","hiSuited","conn","gaps")#
    ## save the output as a file#
    #write.table(hand.shape, file=out.file, row.names=FALSE, col.names=FALSE)#
    return(list(ho=hand.shape, hd=hand.data))#
}
plo_6max.list   <- processHandFile("ppt_plo_handrankings_06handed.txt")
##------------------------------------------------------------------#
## The purpose of this script is to parse the Pro Poker Tools (PPT)#
## hand ranking file #
##------------------------------------------------------------------#
#
##------------------------------------------------------------------#
## Clear the workspace#
##------------------------------------------------------------------#
rm(list=ls())#
#
##------------------------------------------------------------------#
## Set the working directory#
##------------------------------------------------------------------#
setwd("/Users/alexstephens/Development/poker/omaha_hi/data/pptoo/OmahaHi")#
#
##------------------------------------------------------------------#
## The PPT hands Omaha hands have the follow structures#
##------------------------------------------------------------------#
## XYZW#
## (XY)ZW#
## X(YZ)W#
## XY(ZW)#
## (XYZ)W#
## X(YZW)#
## (XYZW)#
## (XY)(ZW)#
##------------------------------------------------------------------#
#
##------------------------------------------------------------------#
## The goal is to convert these into the PPT generic syntax format#
##------------------------------------------------------------------#
## E.g., translate (AJ)(AJ) --> AxJxAyJy (double-suited double-pair)#
##------------------------------------------------------------------#
##------------------------------------------------------------------#
## <function> appendSuits#
##------------------------------------------------------------------#
## Takes a hand character vector, e.g., c("A","J","A","J") and#
## appends a suit character vector, e.g., c("x", "x", "y", "y")#
##------------------------------------------------------------------#
appendSuits <- function(h, s) {#
    return(paste(paste(h,s,sep=""), collapse=""))#
}#
#
##------------------------------------------------------------------#
## <function> rankToNum#
##------------------------------------------------------------------#
## Given a hand (e.g., c("A","J","A","J")), translate the ranks into#
## numerical equivalents (e.g., A=13, K=12, ... 3=2, 2=1)#
##------------------------------------------------------------------#
rankToNum <- function(n, r, hr) {#
    n[match(hr, r)]#
    return(sort(n[match(hr, r)], decreasing=TRUE))#
}#
##------------------------------------------------------------------#
## <function> processHandFile#
##------------------------------------------------------------------#
## Takes a PPT Omaha hand file as an input and writes the translated#
## format to a file.  The output filename contains the "_genericSyntax"#
## postfix.#
##------------------------------------------------------------------#
processHandFile <- function(in.file) {#
#
    ## "global" rank/number vectors#
    glob.num     <- seq(13, 1, -1)#
    glob.rank    <- c("A", "K", "Q", "J", "T", "9", "8", "7", "6", "5", "4", "3", "2")#
    ## process the filename#
    tmp.file    <- unlist(strsplit(in.file, "[.]"))#
    out.file    <- paste0(tmp.file[1], "_genericSyntax_DEBUG", ".", tmp.file[2])#
#
    ## read the input file#
    hf          <- read.csv(in.file, header=FALSE)#
    ## create output matrices#
    hand.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    suit.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    suit.combo  <- matrix(,nrow=nrow(hf), ncol=1)#
    pair.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    pair.ranks  <- matrix(,nrow=nrow(hf), ncol=2)#
    high.card   <- matrix(,nrow=nrow(hf), ncol=1)#
    high.suited <- matrix(,nrow=nrow(hf), ncol=1)#
    rank.conn   <- matrix(,nrow=nrow(hf), ncol=1)#
    rank.gaps   <- matrix(,nrow=nrow(hf), ncol=1)#
    shape.type  <- matrix(,nrow=nrow(hf), ncol=1)#
#
    ## loop over each row in the file and process the ranked hand#
    for (i in 1:nrow(hf)) {#
        #for (i in 1:1147) {#
        ## process a hand#
        tmp.ch      <- unlist(strsplit(as.character(hf[i,]), ""))   ## split hand into individual characters#
        tmp.nch     <- length(tmp.ch)                               ## count number of characters#
        tmp.lp      <- which(tmp.ch %in% c("("))                    ## location of left parentheses#
        tmp.rp      <- which(tmp.ch %in% c(")"))                    ## location of right parentheses#
        tmp.ranks   <- tmp.ch[which(!(tmp.ch %in% c("(",")")))]     ## extract ranks#
        ## get hand shape infp#
        tmp.nums    <- rankToNum(glob.num, glob.rank, tmp.ranks)    ## convert ranks to (sorted) numbers#
        tmp.gaps    <- abs(diff(tmp.nums))                          ## calculate gap sizes#
        tmp.unq     <- length(unique(tmp.nums))                     ## number of unique#
        tmp.tbl     <- table(tmp.ranks)#
        ##------------------------------------------------------------------#
        ## the if/then processes the hand based on the length, and#
        ## for single-suited suited hands it will use the location#
        ## of the right and left parentheses to assign the suits#
        ##------------------------------------------------------------------#
        ##------------------------------------------------------------------#
        ## Deconstruct suits and identify suit shapes#
        ##------------------------------------------------------------------#
        ## double suited#
        if (tmp.nch == 8) {#
            tmp.suits   <- c("x","x","y","y")#
            tmp.color   <- c("ds")#
        ## single suited#
        } else if (tmp.nch == 6) {#
            ## (XY)ZW [1,4]#
            if ((tmp.lp == 1) & (tmp.rp == 4)) {#
                tmp.suits   <- c("x","x","y","z")#
                tmp.color   <- c("ss.2o")#
            ## X(YZ)W [2,5]#
            } else if ((tmp.lp == 2) & (tmp.rp == 5)) {#
                tmp.suits   <- c("x","y","y","z")#
                tmp.color   <- c("ss.2o")#
            ## XY(ZW) [3,6]#
            } else if ((tmp.lp == 3) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","y","z","z")#
                tmp.color   <- c("ss.2o")#
            ## (XYZ)W [1,5]#
            } else if ((tmp.lp == 1) & (tmp.rp == 5)) {#
                tmp.suits   <- c("x","x","x","y")#
                tmp.color   <- c("ss.1o")#
            ## X(YZW) [2,6]#
            } else if ((tmp.lp == 2) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","y","y","y")#
                tmp.color   <- c("ss.1o")#
            ## (XYZW) [1,6]#
            } else if ((tmp.lp == 1) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","x","x","x")#
                tmp.color   <- c("mo")#
            }#
        ## rainbow#
        } else if (tmp.nch == 4) {#
            tmp.suits   <- c("x","y","z","w")#
            tmp.color   <- c("rb")#
        ## error#
        } else {#
            stop("unexpected string lenght\n")#
        }#
        hand.shape[i,1]     <- appendSuits(tmp.ranks, tmp.suits)#
        suit.shape[i,1]     <- tmp.color#
        suit.combo[i,1]     <- paste0(tmp.suits, collapse="")#
#
        ##------------------------------------------------------------------#
        ## Identify pair types#
        ##------------------------------------------------------------------#
        if (max(tmp.tbl) == 4) {#
            tmp.count   <- c("4k")#
            tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
            tmp.lopair  <- NA#
        } else if (max(tmp.tbl) == 3) {#
            tmp.count   <- c("3k")#
            tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
            tmp.lopair  <- NA#
        } else if (max(tmp.tbl == 2)) {#
            if (tmp.unq == 2) {#
                tmp.count   <- c("2p")#
                tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
                tmp.lopair  <- glob.rank[max(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
            } else {#
                tmp.count   <- c("1p")#
                tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
                tmp.lopair  <- NA#
            }#
        } else {#
            tmp.count   <- c("0p")#
            tmp.hipair  <- NA#
            tmp.lopair  <- NA#
        }#
        pair.shape[i,1]     <- tmp.count#
        pair.ranks[i,]      <- c(tmp.hipair, tmp.lopair)#
        ##------------------------------------------------------------------#
        ## Identify shape types#
        ##------------------------------------------------------------------#
        ## Hand Shape	Description        ## XaXbXcXd	4K::abcd        ## XaXbXcYa	3K::aabc        ## XaXbXcYd	3K::abcd        ## XaXbYaYb	2P::aabb        ## XaXbYaYc	2P::aabc        ## XaXbYcYd	2P::abcd        ## XaXbYaZa	1P::aaab        ## XaXbYaZb	1P::aabb        ## XaXbYaZc	1P::aabc        ## XaXbYcZc	1P::aabc        ## XaXbYcZd	1P::abcd        ## XaYaZaRa	NP::aaaa        ## XaYaZaRb	NP::aaab        ## XaYaZbRb	NP::aabb        ## XaYaZbRc	NP::aabc        ## XaYbZcRd	NP::abcd#
        ##------------------------------------------------------------------#
        if (pair.shape[i,1] == "4k") {#
             ## XaXbXcXd	4K::abcd#
            tmp.shape <- "XaXbXcXd"#
        } else if (pair.shape[i,1] == "3k") {#
            ## XaXbXcYa	3K::aabc#
            if (suit.combo[i,1] == "ss.2o") {#
                tmp.shape   <- "XaXbXcYa"#
            ## XaXbXcYd	3K::abcd#
            } else if (suit.combo[i,1] == "rb") {#
                tmp.shape   <- "XaXbXcYd"#
            }#
        } else if (pair.shape[i,1] == "2p") {#
            ## XaXbYaYb	2P::aabb#
            if (suit.combo[i,1] == "ds") {#
                tmp.shape   <- "XaXbYaYb"            ## XaXbYaYc	2P::aabc#
            } else if (suit.combo[i,1] == "ss.2o") {#
                tmp.shape   <- "XaXbYaYc"            ## XaXbYcYd	2P::abcd#
            } else if (suit.combo[i,1] == "rb") {#
                tmp.shape   <- "XaXbYcYd"#
            }#
        } else if (pair.shape[i,1] == "1p") {#
            ## XaXbYaZa	1P::aaab#
            if (suit.combo[i,1] == "ss.1o") {#
                tmp.shape   <- "XaXbYaZa"            ## XaXbYaZb	1P::aabb            } else if (suit.combo[i,1] == "ds") {#
                tmp.shape   <- "XaXbYaZb"#
            ## XaXbYaZc	1P::aabc#
            } else if (suit.combo[i,1] == "ss.2o") {#
                tmp.shape   <- "XaXbYaZc"            ## XaXbYcZc	1P::aabc#
            #} else if (suit.combo[i,1] == "ss.2o") {#
            #    tmp.shape   <- "XaXbYaZc"            ## XaXbYcZd	1P::abcd#
            } else if (suit.combo[i,1] == "rb") {#
                tmp.shape   <- "XaXbYcZd"#
            }#
        } else if (pair.shape[i,1] == "0p") {#
            ## XaYaZaRa	NP::aaaa#
            if (suit.combo[i,1] == "mo") {#
                tmp.shape   <- "XaYaZaRa"            ## XaYaZaRb	NP::aaab#
            } else if (suit.combo[i,1] == "ss.1o") {#
                tmp.shape   <- "XaYaZaRb"            ## XaYaZbRb	NP::aabb#
            } else if (suit.combo[i,1] == "ds") {#
                tmp.shape   <- "XaYaZbRb"            ## XaYaZbRc	NP::aabc#
            } else if (suit.combo[i,1] == "ss.2o") {#
                tmp.shape   <- "XaYaZbRc"            ## XaYbZcRd	NP::abcd#
            } else if (suit.combo[i,1] == "rb") {#
                tmp.shape   <- "XaYbZcRd"#
            }#
        } else {#
            tmp.shape <- "err"#
        }#
        shape.type[i,]  <- tmp.shape#
#
        ##------------------------------------------------------------------#
        ## Identify high card#
        ##------------------------------------------------------------------#
        high.card[i,]  <- glob.rank[which(glob.num == max(tmp.nums))]#
        ##------------------------------------------------------------------#
        ## Identify high card#
        ##------------------------------------------------------------------#
        ## get suits tied to the high card#
        hi.suits        <- tmp.suits[which(tmp.ranks %in% high.card[i,])]#
        non.hi.suits    <- tmp.suits[which(!(tmp.ranks %in% high.card[i,]))]#
        if (length(which(hi.suits %in% non.hi.suits)) > 0) {#
            high.suited[i,] <- "Y"#
        } else {#
            high.suited[i,] <- "N"#
        }#
        ##------------------------------------------------------------------#
        ## Identify connectedness#
        ##------------------------------------------------------------------#
        ## pure rundown variants#
        if (all(tmp.gaps == 1)) {#
            tmp.conn    <- "rd.0g"#
        } else if ( all(tmp.gaps == 2)) {#
            tmp.conn    <- "rd.1g"#
        } else if (all(tmp.gaps == 3)) {#
            tmp.conn    <- "rd.2g"#
        ## connected 2-pair#
        } else if ( (tmp.gaps[1] == 0) & (tmp.gaps[3] == 0) & (tmp.gaps[2] %in% c(1,2,3)) ) {#
            tmp.conn    <- "2p.conn"#
        ## rundown plus pair#
        } else if ( (sum(tmp.gaps==0)==1) & (sum(tmp.gaps==1)==2) ) {#
            tmp.conn    <- "rd.1p"#
        ## single gap rundown#
        } else if ( (sum(tmp.gaps==2)==1) & (sum(tmp.gaps==1)==2) ) {#
            tmp.conn    <- "rd.1g"#
#
        ## double gap rundown#
        } else if ( (sum(tmp.gaps==3)==1) & (sum(tmp.gaps==1)==2) ) {#
            tmp.conn    <- "rd.2g"#
#
        ## triple gap rundown#
        } else if ( (sum(tmp.gaps==4)==1) & (sum(tmp.gaps==1)==2) ) {#
            tmp.conn    <- "rd.3g"#
#
        ## dangler gap rundown#
        } else if ( (sum(tmp.gaps>4)==1) & (sum(tmp.gaps==1)==2) ) {#
            tmp.conn    <- "rd.dg"#
#
        ## 2x single gap rundown#
        } else if ( (sum(tmp.gaps==1)==1) & (sum(tmp.gaps==2)==2) ) {#
            tmp.conn    <- "rd.2x1g"#
#
        ## 2x double gap rundown#
        } else if ( (sum(tmp.gaps==1)==1) & (sum(tmp.gaps==3)==2) ) {#
            tmp.conn    <- "rd.2x2g"#
        ## connected single-pair#
        } else if ( (sum(tmp.gaps==0)==1) & (sum(tmp.gaps==1)==1) & (sum(tmp.gaps==2)==1) ) {#
            tmp.conn    <- "1p.conn"#
        ## default#
        } else {#
            tmp.conn    <- NA#
        }#
        rank.conn[i,]   <- tmp.conn#
        ##------------------------------------------------------------------#
        ## Consolidate gap data#
        ##------------------------------------------------------------------#
        rank.gaps[i,]   <- paste(tmp.gaps, collapse=":")#
#
    }#
    ## consolidate#
    hand.data   <- data.frame(  hand=hand.shape,#
                                suit=suit.shape,#
                                pair=pair.shape,#
                                ranks=pair.ranks,#
                                highCard=high.card,#
                                highSuited=high.suited,#
                                conn=rank.conn,#
                                gaps=rank.gaps)#
#
    colnames(hand.data) <- c("hand","suit","pair","hiPair","loPair","hiCard","hiSuited","conn","gaps")#
    ## save the output as a file#
    #write.table(hand.shape, file=out.file, row.names=FALSE, col.names=FALSE)#
    return(list(ho=hand.shape, hd=hand.data))#
}#
##------------------------------------------------------------------#
## <main> process hands#
##------------------------------------------------------------------#
#
#plo_3max.list   <- processHandFile("ppt_plo_handrankings_03handed.txt")#
#save(plo_3max.list, file="ppt_plo_handrankings_03handed.Rdata")#
#
plo_6max.list   <- processHandFile("ppt_plo_handrankings_06handed.txt")#
##save(plo_6max.list, file="ppt_plo_handrankings_06handed.Rdata")#
#
#plo_10max.list  <- processHandFile("ppt_plo_handrankings_10handed.txt")#
#save(plo_10max.list, file="ppt_plo_handrankings_10handed.Rdata")#
#
#plo_random.list <- processHandFile("ppt_plo_handrankings_preflop_vs_random.txt")#
#save(plo_random.list, file="ppt_plo_handrankings_preflop_vs_random.Rdata")#
##------------------------------------------------------------------#
## Before#
##------------------------------------------------------------------#
## qp:data alexstephens$ head ppt_plo_handrankings_preflop_vs_random.txt#
## (AT)(AT)#
## (AJ)(AJ)#
## (AQ)(AQ)#
##------------------------------------------------------------------#
## After#
##------------------------------------------------------------------#
## qp:data alexstephens$ head ppt_plo_handrankings_preflop_vs_random_genericSyntax.txt#
## "AxTxAyTy"#
## "AxJxAyJy"#
## "AxQxAyQy"
##------------------------------------------------------------------#
## The purpose of this script is to parse the Pro Poker Tools (PPT)#
## hand ranking file #
##------------------------------------------------------------------#
#
##------------------------------------------------------------------#
## Clear the workspace#
##------------------------------------------------------------------#
rm(list=ls())#
#
##------------------------------------------------------------------#
## Set the working directory#
##------------------------------------------------------------------#
setwd("/Users/alexstephens/Development/poker/omaha_hi/data/pptoo/OmahaHi")#
#
##------------------------------------------------------------------#
## The PPT hands Omaha hands have the follow structures#
##------------------------------------------------------------------#
## XYZW#
## (XY)ZW#
## X(YZ)W#
## XY(ZW)#
## (XYZ)W#
## X(YZW)#
## (XYZW)#
## (XY)(ZW)#
##------------------------------------------------------------------#
#
##------------------------------------------------------------------#
## The goal is to convert these into the PPT generic syntax format#
##------------------------------------------------------------------#
## E.g., translate (AJ)(AJ) --> AxJxAyJy (double-suited double-pair)#
##------------------------------------------------------------------#
##------------------------------------------------------------------#
## <function> appendSuits#
##------------------------------------------------------------------#
## Takes a hand character vector, e.g., c("A","J","A","J") and#
## appends a suit character vector, e.g., c("x", "x", "y", "y")#
##------------------------------------------------------------------#
appendSuits <- function(h, s) {#
    return(paste(paste(h,s,sep=""), collapse=""))#
}#
#
##------------------------------------------------------------------#
## <function> rankToNum#
##------------------------------------------------------------------#
## Given a hand (e.g., c("A","J","A","J")), translate the ranks into#
## numerical equivalents (e.g., A=13, K=12, ... 3=2, 2=1)#
##------------------------------------------------------------------#
rankToNum <- function(n, r, hr) {#
    n[match(hr, r)]#
    return(sort(n[match(hr, r)], decreasing=TRUE))#
}#
##------------------------------------------------------------------#
## <function> processHandFile#
##------------------------------------------------------------------#
## Takes a PPT Omaha hand file as an input and writes the translated#
## format to a file.  The output filename contains the "_genericSyntax"#
## postfix.#
##------------------------------------------------------------------#
processHandFile <- function(in.file) {#
#
    ## "global" rank/number vectors#
    glob.num     <- seq(13, 1, -1)#
    glob.rank    <- c("A", "K", "Q", "J", "T", "9", "8", "7", "6", "5", "4", "3", "2")#
    ## process the filename#
    tmp.file    <- unlist(strsplit(in.file, "[.]"))#
    out.file    <- paste0(tmp.file[1], "_genericSyntax_DEBUG", ".", tmp.file[2])#
#
    ## read the input file#
    hf          <- read.csv(in.file, header=FALSE)#
    ## create output matrices#
    hand.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    suit.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    suit.combo  <- matrix(,nrow=nrow(hf), ncol=1)#
    pair.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    pair.ranks  <- matrix(,nrow=nrow(hf), ncol=2)#
    high.card   <- matrix(,nrow=nrow(hf), ncol=1)#
    high.suited <- matrix(,nrow=nrow(hf), ncol=1)#
    rank.conn   <- matrix(,nrow=nrow(hf), ncol=1)#
    rank.gaps   <- matrix(,nrow=nrow(hf), ncol=1)#
    shape.type  <- matrix(,nrow=nrow(hf), ncol=1)#
#
    ## loop over each row in the file and process the ranked hand#
    for (i in 1:nrow(hf)) {#
        #for (i in 1:1147) {#
        ## process a hand#
        tmp.ch      <- unlist(strsplit(as.character(hf[i,]), ""))   ## split hand into individual characters#
        tmp.nch     <- length(tmp.ch)                               ## count number of characters#
        tmp.lp      <- which(tmp.ch %in% c("("))                    ## location of left parentheses#
        tmp.rp      <- which(tmp.ch %in% c(")"))                    ## location of right parentheses#
        tmp.ranks   <- tmp.ch[which(!(tmp.ch %in% c("(",")")))]     ## extract ranks#
        ## get hand shape infp#
        tmp.nums    <- rankToNum(glob.num, glob.rank, tmp.ranks)    ## convert ranks to (sorted) numbers#
        tmp.gaps    <- abs(diff(tmp.nums))                          ## calculate gap sizes#
        tmp.unq     <- length(unique(tmp.nums))                     ## number of unique#
        tmp.tbl     <- table(tmp.ranks)#
        ##------------------------------------------------------------------#
        ## the if/then processes the hand based on the length, and#
        ## for single-suited suited hands it will use the location#
        ## of the right and left parentheses to assign the suits#
        ##------------------------------------------------------------------#
        ##------------------------------------------------------------------#
        ## Deconstruct suits and identify suit shapes#
        ##------------------------------------------------------------------#
        ## double suited#
        if (tmp.nch == 8) {#
            tmp.suits   <- c("x","x","y","y")#
            tmp.color   <- c("ds")#
        ## single suited#
        } else if (tmp.nch == 6) {#
            ## (XY)ZW [1,4]#
            if ((tmp.lp == 1) & (tmp.rp == 4)) {#
                tmp.suits   <- c("x","x","y","z")#
                tmp.color   <- c("ss.2o")#
            ## X(YZ)W [2,5]#
            } else if ((tmp.lp == 2) & (tmp.rp == 5)) {#
                tmp.suits   <- c("x","y","y","z")#
                tmp.color   <- c("ss.2o")#
            ## XY(ZW) [3,6]#
            } else if ((tmp.lp == 3) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","y","z","z")#
                tmp.color   <- c("ss.2o")#
            ## (XYZ)W [1,5]#
            } else if ((tmp.lp == 1) & (tmp.rp == 5)) {#
                tmp.suits   <- c("x","x","x","y")#
                tmp.color   <- c("ss.1o")#
            ## X(YZW) [2,6]#
            } else if ((tmp.lp == 2) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","y","y","y")#
                tmp.color   <- c("ss.1o")#
            ## (XYZW) [1,6]#
            } else if ((tmp.lp == 1) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","x","x","x")#
                tmp.color   <- c("mo")#
            }#
        ## rainbow#
        } else if (tmp.nch == 4) {#
            tmp.suits   <- c("x","y","z","w")#
            tmp.color   <- c("rb")#
        ## error#
        } else {#
            stop("unexpected string lenght\n")#
        }#
        hand.shape[i,1]     <- appendSuits(tmp.ranks, tmp.suits)#
        suit.shape[i,1]     <- tmp.color#
        suit.combo[i,1]     <- paste0(tmp.suits, collapse="")#
#
        ##------------------------------------------------------------------#
        ## Identify pair types#
        ##------------------------------------------------------------------#
        if (max(tmp.tbl) == 4) {#
            tmp.count   <- c("4k")#
            tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
            tmp.lopair  <- NA#
        } else if (max(tmp.tbl) == 3) {#
            tmp.count   <- c("3k")#
            tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
            tmp.lopair  <- NA#
        } else if (max(tmp.tbl == 2)) {#
            if (tmp.unq == 2) {#
                tmp.count   <- c("2p")#
                tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
                tmp.lopair  <- glob.rank[max(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
            } else {#
                tmp.count   <- c("1p")#
                tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
                tmp.lopair  <- NA#
            }#
        } else {#
            tmp.count   <- c("0p")#
            tmp.hipair  <- NA#
            tmp.lopair  <- NA#
        }#
        pair.shape[i,1]     <- tmp.count#
        pair.ranks[i,]      <- c(tmp.hipair, tmp.lopair)#
        ##------------------------------------------------------------------#
        ## Identify shape types#
        ##------------------------------------------------------------------#
        ## Hand Shape	Description        ## XaXbXcXd	4K::abcd        ## XaXbXcYa	3K::aabc        ## XaXbXcYd	3K::abcd        ## XaXbYaYb	2P::aabb        ## XaXbYaYc	2P::aabc        ## XaXbYcYd	2P::abcd        ## XaXbYaZa	1P::aaab        ## XaXbYaZb	1P::aabb        ## XaXbYaZc	1P::aabc        ## XaXbYcZc	1P::aabc        ## XaXbYcZd	1P::abcd        ## XaYaZaRa	NP::aaaa        ## XaYaZaRb	NP::aaab        ## XaYaZbRb	NP::aabb        ## XaYaZbRc	NP::aabc        ## XaYbZcRd	NP::abcd#
        ##------------------------------------------------------------------#
        #        if (pair.shape[i,1] == "4k") {#
        ##
        #    ## XaXbXcXd	4K::abcd#
        #    tmp.shape <- "XaXbXcXd"#
        ##
        #} else if (pair.shape[i,1] == "3k") {#
        ##
        #    ## XaXbXcYa	3K::aabc#
#    if (suit.combo[i,1] == "ss.2o") {#
#                tmp.shape   <- "XaXbXcYa"#
#            ## XaXbXcYd	3K::abcd#
#            } else if (suit.combo[i,1] == "rb") {#
#                tmp.shape   <- "XaXbXcYd"#
#            }#
##
#        } else if (pair.shape[i,1] == "2p") {#
##
#            ## XaXbYaYb	2P::aabb#
#            if (suit.combo[i,1] == "ds") {#
#                tmp.shape   <- "XaXbYaYb"#            ## XaXbYaYc	2P::aabc#
#            } else if (suit.combo[i,1] == "ss.2o") {#
#                tmp.shape   <- "XaXbYaYc"#            ## XaXbYcYd	2P::abcd#
#            } else if (suit.combo[i,1] == "rb") {#
#                tmp.shape   <- "XaXbYcYd"#
#            }#
##
#        } else if (pair.shape[i,1] == "1p") {#
##
#            ## XaXbYaZa	1P::aaab#
#            if (suit.combo[i,1] == "ss.1o") {#
#                tmp.shape   <- "XaXbYaZa"#            ## XaXbYaZb	1P::aabb#            } else if (suit.combo[i,1] == "ds") {#
#                tmp.shape   <- "XaXbYaZb"#
#            ## XaXbYaZc	1P::aabc#
#            } else if (suit.combo[i,1] == "ss.2o") {#
#                tmp.shape   <- "XaXbYaZc"#            ## XaXbYcZc	1P::aabc#
#            #} else if (suit.combo[i,1] == "ss.2o") {#
#            #    tmp.shape   <- "XaXbYaZc"#            ## XaXbYcZd	1P::abcd#
#            } else if (suit.combo[i,1] == "rb") {#
#                tmp.shape   <- "XaXbYcZd"#
#            }#
##
#        } else if (pair.shape[i,1] == "0p") {#
##
#            ## XaYaZaRa	NP::aaaa#
#            if (suit.combo[i,1] == "mo") {#
#                tmp.shape   <- "XaYaZaRa"#            ## XaYaZaRb	NP::aaab#
#            } else if (suit.combo[i,1] == "ss.1o") {#
#                tmp.shape   <- "XaYaZaRb"#            ## XaYaZbRb	NP::aabb#
#            } else if (suit.combo[i,1] == "ds") {#
#                tmp.shape   <- "XaYaZbRb"#            ## XaYaZbRc	NP::aabc#
#            } else if (suit.combo[i,1] == "ss.2o") {#
#                tmp.shape   <- "XaYaZbRc"#            ## XaYbZcRd	NP::abcd#
#            } else if (suit.combo[i,1] == "rb") {#
#                tmp.shape   <- "XaYbZcRd"#
#            }#
##
#        } else {#
#            tmp.shape <- "err"#
#        }#
#        shape.type[i,]  <- tmp.shape#
        ##------------------------------------------------------------------#
        ## Identify high card#
        ##------------------------------------------------------------------#
        high.card[i,]  <- glob.rank[which(glob.num == max(tmp.nums))]#
        ##------------------------------------------------------------------#
        ## Identify high card#
        ##------------------------------------------------------------------#
        ## get suits tied to the high card#
        hi.suits        <- tmp.suits[which(tmp.ranks %in% high.card[i,])]#
        non.hi.suits    <- tmp.suits[which(!(tmp.ranks %in% high.card[i,]))]#
        if (length(which(hi.suits %in% non.hi.suits)) > 0) {#
            high.suited[i,] <- "Y"#
        } else {#
            high.suited[i,] <- "N"#
        }#
        ##------------------------------------------------------------------#
        ## Identify connectedness#
        ##------------------------------------------------------------------#
        ## pure rundown variants#
        if (all(tmp.gaps == 1)) {#
            tmp.conn    <- "rd.0g"#
        } else if ( all(tmp.gaps == 2)) {#
            tmp.conn    <- "rd.1g"#
        } else if (all(tmp.gaps == 3)) {#
            tmp.conn    <- "rd.2g"#
        ## connected 2-pair#
        } else if ( (tmp.gaps[1] == 0) & (tmp.gaps[3] == 0) & (tmp.gaps[2] %in% c(1,2,3)) ) {#
            tmp.conn    <- "2p.conn"#
        ## rundown plus pair#
        } else if ( (sum(tmp.gaps==0)==1) & (sum(tmp.gaps==1)==2) ) {#
            tmp.conn    <- "rd.1p"#
        ## single gap rundown#
        } else if ( (sum(tmp.gaps==2)==1) & (sum(tmp.gaps==1)==2) ) {#
            tmp.conn    <- "rd.1g"#
#
        ## double gap rundown#
        } else if ( (sum(tmp.gaps==3)==1) & (sum(tmp.gaps==1)==2) ) {#
            tmp.conn    <- "rd.2g"#
#
        ## triple gap rundown#
        } else if ( (sum(tmp.gaps==4)==1) & (sum(tmp.gaps==1)==2) ) {#
            tmp.conn    <- "rd.3g"#
#
        ## dangler gap rundown#
        } else if ( (sum(tmp.gaps>4)==1) & (sum(tmp.gaps==1)==2) ) {#
            tmp.conn    <- "rd.dg"#
#
        ## 2x single gap rundown#
        } else if ( (sum(tmp.gaps==1)==1) & (sum(tmp.gaps==2)==2) ) {#
            tmp.conn    <- "rd.2x1g"#
#
        ## 2x double gap rundown#
        } else if ( (sum(tmp.gaps==1)==1) & (sum(tmp.gaps==3)==2) ) {#
            tmp.conn    <- "rd.2x2g"#
        ## connected single-pair#
        } else if ( (sum(tmp.gaps==0)==1) & (sum(tmp.gaps==1)==1) & (sum(tmp.gaps==2)==1) ) {#
            tmp.conn    <- "1p.conn"#
        ## default#
        } else {#
            tmp.conn    <- NA#
        }#
        rank.conn[i,]   <- tmp.conn#
        ##------------------------------------------------------------------#
        ## Consolidate gap data#
        ##------------------------------------------------------------------#
        rank.gaps[i,]   <- paste(tmp.gaps, collapse=":")#
#
    }#
    ## consolidate#
    hand.data   <- data.frame(  hand=hand.shape,#
                                suit=suit.shape,#
                                suitCombo=suit.combo,#
                                pair=pair.shape,#
                                ranks=pair.ranks,#
                                highCard=high.card,#
                                highSuited=high.suited,#
                                conn=rank.conn,#
                                gaps=rank.gaps)#
#
    colnames(hand.data) <- c("hand","suit","suitCombo","pair","hiPair","loPair","hiCard","hiSuited","conn","gaps")#
    ## save the output as a file#
    #write.table(hand.shape, file=out.file, row.names=FALSE, col.names=FALSE)#
    return(list(ho=hand.shape, hd=hand.data))#
}#
##------------------------------------------------------------------#
## <main> process hands#
##------------------------------------------------------------------#
#
#plo_3max.list   <- processHandFile("ppt_plo_handrankings_03handed.txt")#
#save(plo_3max.list, file="ppt_plo_handrankings_03handed.Rdata")#
#
plo_6max.list   <- processHandFile("ppt_plo_handrankings_06handed.txt")#
##save(plo_6max.list, file="ppt_plo_handrankings_06handed.Rdata")#
#
#plo_10max.list  <- processHandFile("ppt_plo_handrankings_10handed.txt")#
#save(plo_10max.list, file="ppt_plo_handrankings_10handed.Rdata")#
#
#plo_random.list <- processHandFile("ppt_plo_handrankings_preflop_vs_random.txt")#
#save(plo_random.list, file="ppt_plo_handrankings_preflop_vs_random.Rdata")#
##------------------------------------------------------------------#
## Before#
##------------------------------------------------------------------#
## qp:data alexstephens$ head ppt_plo_handrankings_preflop_vs_random.txt#
## (AT)(AT)#
## (AJ)(AJ)#
## (AQ)(AQ)#
##------------------------------------------------------------------#
## After#
##------------------------------------------------------------------#
## qp:data alexstephens$ head ppt_plo_handrankings_preflop_vs_random_genericSyntax.txt#
## "AxTxAyTy"#
## "AxJxAyJy"#
## "AxQxAyQy"
head(plo_6max.list[["hd"]])
table(suitCombo)
table(plo_6max.list[["hd"]]$suitCombo)
4095+2002+1001
##------------------------------------------------------------------#
## The purpose of this script is to parse the Pro Poker Tools (PPT)#
## hand ranking file #
##------------------------------------------------------------------#
#
##------------------------------------------------------------------#
## Clear the workspace#
##------------------------------------------------------------------#
rm(list=ls())#
#
##------------------------------------------------------------------#
## Set the working directory#
##------------------------------------------------------------------#
setwd("/Users/alexstephens/Development/poker/omaha_hi/data/pptoo/OmahaHi")#
#
##------------------------------------------------------------------#
## The PPT hands Omaha hands have the follow structures#
##------------------------------------------------------------------#
## XYZW#
## (XY)ZW#
## X(YZ)W#
## XY(ZW)#
## (XYZ)W#
## X(YZW)#
## (XYZW)#
## (XY)(ZW)#
##------------------------------------------------------------------#
#
##------------------------------------------------------------------#
## The goal is to convert these into the PPT generic syntax format#
##------------------------------------------------------------------#
## E.g., translate (AJ)(AJ) --> AxJxAyJy (double-suited double-pair)#
##------------------------------------------------------------------#
##------------------------------------------------------------------#
## <function> appendSuits#
##------------------------------------------------------------------#
## Takes a hand character vector, e.g., c("A","J","A","J") and#
## appends a suit character vector, e.g., c("x", "x", "y", "y")#
##------------------------------------------------------------------#
appendSuits <- function(h, s) {#
    return(paste(paste(h,s,sep=""), collapse=""))#
}#
#
##------------------------------------------------------------------#
## <function> rankToNum#
##------------------------------------------------------------------#
## Given a hand (e.g., c("A","J","A","J")), translate the ranks into#
## numerical equivalents (e.g., A=13, K=12, ... 3=2, 2=1)#
##------------------------------------------------------------------#
rankToNum <- function(n, r, hr) {#
    n[match(hr, r)]#
    return(sort(n[match(hr, r)], decreasing=TRUE))#
}#
##------------------------------------------------------------------#
## <function> processHandFile#
##------------------------------------------------------------------#
## Takes a PPT Omaha hand file as an input and writes the translated#
## format to a file.  The output filename contains the "_genericSyntax"#
## postfix.#
##------------------------------------------------------------------#
processHandFile <- function(in.file) {#
#
    ## "global" rank/number vectors#
    glob.num     <- seq(13, 1, -1)#
    glob.rank    <- c("A", "K", "Q", "J", "T", "9", "8", "7", "6", "5", "4", "3", "2")#
    ## process the filename#
    tmp.file    <- unlist(strsplit(in.file, "[.]"))#
    out.file    <- paste0(tmp.file[1], "_genericSyntax_DEBUG", ".", tmp.file[2])#
#
    ## read the input file#
    hf          <- read.csv(in.file, header=FALSE)#
    ## create output matrices#
    hand.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    suit.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    suit.combo  <- matrix(,nrow=nrow(hf), ncol=1)#
    pair.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    pair.ranks  <- matrix(,nrow=nrow(hf), ncol=2)#
    high.card   <- matrix(,nrow=nrow(hf), ncol=1)#
    high.suited <- matrix(,nrow=nrow(hf), ncol=1)#
    rank.conn   <- matrix(,nrow=nrow(hf), ncol=1)#
    rank.gaps   <- matrix(,nrow=nrow(hf), ncol=1)#
    shape.type  <- matrix(,nrow=nrow(hf), ncol=1)#
#
    ## loop over each row in the file and process the ranked hand#
    for (i in 1:nrow(hf)) {#
        #for (i in 1:1147) {#
        ## process a hand#
        tmp.ch      <- unlist(strsplit(as.character(hf[i,]), ""))   ## split hand into individual characters#
        tmp.nch     <- length(tmp.ch)                               ## count number of characters#
        tmp.lp      <- which(tmp.ch %in% c("("))                    ## location of left parentheses#
        tmp.rp      <- which(tmp.ch %in% c(")"))                    ## location of right parentheses#
        tmp.ranks   <- tmp.ch[which(!(tmp.ch %in% c("(",")")))]     ## extract ranks#
        ## get hand shape infp#
        tmp.nums    <- rankToNum(glob.num, glob.rank, tmp.ranks)    ## convert ranks to (sorted) numbers#
        tmp.gaps    <- abs(diff(tmp.nums))                          ## calculate gap sizes#
        tmp.unq     <- length(unique(tmp.nums))                     ## number of unique#
        tmp.tbl     <- table(tmp.ranks)#
        ##------------------------------------------------------------------#
        ## the if/then processes the hand based on the length, and#
        ## for single-suited suited hands it will use the location#
        ## of the right and left parentheses to assign the suits#
        ##------------------------------------------------------------------#
        ##------------------------------------------------------------------#
        ## Deconstruct suits and identify suit shapes#
        ##------------------------------------------------------------------#
        ## double suited#
        if (tmp.nch == 8) {#
            tmp.suits   <- c("x","x","y","y")#
            tmp.color   <- c("ds")#
        ## single suited#
        } else if (tmp.nch == 6) {#
            ## (XY)ZW [1,4]#
            if ((tmp.lp == 1) & (tmp.rp == 4)) {#
                tmp.suits   <- c("x","x","y","z")#
                tmp.color   <- c("ss.2o")#
            ## X(YZ)W [2,5]#
            } else if ((tmp.lp == 2) & (tmp.rp == 5)) {#
                tmp.suits   <- c("x","y","y","z")#
                tmp.color   <- c("ss.2o")#
            ## XY(ZW) [3,6]#
            } else if ((tmp.lp == 3) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","y","z","z")#
                tmp.color   <- c("ss.2o")#
            ## (XYZ)W [1,5]#
            } else if ((tmp.lp == 1) & (tmp.rp == 5)) {#
                tmp.suits   <- c("x","x","x","y")#
                tmp.color   <- c("ss.1o")#
            ## X(YZW) [2,6]#
            } else if ((tmp.lp == 2) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","y","y","y")#
                tmp.color   <- c("ss.1o")#
            ## (XYZW) [1,6]#
            } else if ((tmp.lp == 1) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","x","x","x")#
                tmp.color   <- c("mo")#
            }#
        ## rainbow#
        } else if (tmp.nch == 4) {#
            tmp.suits   <- c("x","y","z","w")#
            tmp.color   <- c("rb")#
        ## error#
        } else {#
            stop("unexpected string lenght\n")#
        }#
        hand.shape[i,1]     <- appendSuits(tmp.ranks, tmp.suits)#
        suit.shape[i,1]     <- tmp.color#
        ##------------------------------------------------------------------#
        ## Create homogeneous suit combos#
        ##------------------------------------------------------------------#
        tmp.combo   <- paste0(tmp.suits, collapse="")#
        if (tmp.combo %in% c("xxxx") {#
            suit.combo[i,1] <- c("aaaa")#
        } else if (tmp.combo %in% c("xxxy","xyyy")) {#
            suit.combo[i,1] <- c("aaab")#
        } else if (tmp.combo %in% c("xxyy")) {#
            suit.combo[i,1] <- c("aabb")#
        } else if (tmp.combo %in% c("xxyz","xyyz","xyzz")) {#
            suit.combo[i,1] <- c("aabc")#
        } else if (tmp.combo %in% c("xyzw")) {#
            suit.combo[i,1] <- c("aabc")#
        }#
#
        ##------------------------------------------------------------------#
        ## Identify pair types#
        ##------------------------------------------------------------------#
        if (max(tmp.tbl) == 4) {#
            tmp.count   <- c("4k")#
            tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
            tmp.lopair  <- NA#
        } else if (max(tmp.tbl) == 3) {#
            tmp.count   <- c("3k")#
            tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
            tmp.lopair  <- NA#
        } else if (max(tmp.tbl == 2)) {#
            if (tmp.unq == 2) {#
                tmp.count   <- c("2p")#
                tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
                tmp.lopair  <- glob.rank[max(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
            } else {#
                tmp.count   <- c("1p")#
                tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
                tmp.lopair  <- NA#
            }#
        } else {#
            tmp.count   <- c("0p")#
            tmp.hipair  <- NA#
            tmp.lopair  <- NA#
        }#
        pair.shape[i,1]     <- tmp.count#
        pair.ranks[i,]      <- c(tmp.hipair, tmp.lopair)#
        ##------------------------------------------------------------------#
        ## Identify shape types#
        ##------------------------------------------------------------------#
        ## Hand Shape	Description        ## XaXbXcXd	4K::abcd        ## XaXbXcYa	3K::aabc        ## XaXbXcYd	3K::abcd        ## XaXbYaYb	2P::aabb        ## XaXbYaYc	2P::aabc        ## XaXbYcYd	2P::abcd        ## XaXbYaZa	1P::aaab        ## XaXbYaZb	1P::aabb        ## XaXbYaZc	1P::aabc        ## XaXbYcZc	1P::aabc        ## XaXbYcZd	1P::abcd        ## XaYaZaRa	NP::aaaa        ## XaYaZaRb	NP::aaab        ## XaYaZbRb	NP::aabb        ## XaYaZbRc	NP::aabc        ## XaYbZcRd	NP::abcd#
        ##------------------------------------------------------------------#
        #        if (pair.shape[i,1] == "4k") {#
        ##
        #    ## XaXbXcXd	4K::abcd#
        #    tmp.shape <- "XaXbXcXd"#
        ##
        #} else if (pair.shape[i,1] == "3k") {#
        ##
        #    ## XaXbXcYa	3K::aabc#
#    if (suit.combo[i,1] == "ss.2o") {#
#                tmp.shape   <- "XaXbXcYa"#
#            ## XaXbXcYd	3K::abcd#
#            } else if (suit.combo[i,1] == "rb") {#
#                tmp.shape   <- "XaXbXcYd"#
#            }#
##
#        } else if (pair.shape[i,1] == "2p") {#
##
#            ## XaXbYaYb	2P::aabb#
#            if (suit.combo[i,1] == "ds") {#
#                tmp.shape   <- "XaXbYaYb"#            ## XaXbYaYc	2P::aabc#
#            } else if (suit.combo[i,1] == "ss.2o") {#
#                tmp.shape   <- "XaXbYaYc"#            ## XaXbYcYd	2P::abcd#
#            } else if (suit.combo[i,1] == "rb") {#
#                tmp.shape   <- "XaXbYcYd"#
#            }#
##
#        } else if (pair.shape[i,1] == "1p") {#
##
#            ## XaXbYaZa	1P::aaab#
#            if (suit.combo[i,1] == "ss.1o") {#
#                tmp.shape   <- "XaXbYaZa"#            ## XaXbYaZb	1P::aabb#            } else if (suit.combo[i,1] == "ds") {#
#                tmp.shape   <- "XaXbYaZb"#
#            ## XaXbYaZc	1P::aabc#
#            } else if (suit.combo[i,1] == "ss.2o") {#
#                tmp.shape   <- "XaXbYaZc"#            ## XaXbYcZc	1P::aabc#
#            #} else if (suit.combo[i,1] == "ss.2o") {#
#            #    tmp.shape   <- "XaXbYaZc"#            ## XaXbYcZd	1P::abcd#
#            } else if (suit.combo[i,1] == "rb") {#
#                tmp.shape   <- "XaXbYcZd"#
#            }#
##
#        } else if (pair.shape[i,1] == "0p") {#
##
#            ## XaYaZaRa	NP::aaaa#
#            if (suit.combo[i,1] == "mo") {#
#                tmp.shape   <- "XaYaZaRa"#            ## XaYaZaRb	NP::aaab#
#            } else if (suit.combo[i,1] == "ss.1o") {#
#                tmp.shape   <- "XaYaZaRb"#            ## XaYaZbRb	NP::aabb#
#            } else if (suit.combo[i,1] == "ds") {#
#                tmp.shape   <- "XaYaZbRb"#            ## XaYaZbRc	NP::aabc#
#            } else if (suit.combo[i,1] == "ss.2o") {#
#                tmp.shape   <- "XaYaZbRc"#            ## XaYbZcRd	NP::abcd#
#            } else if (suit.combo[i,1] == "rb") {#
#                tmp.shape   <- "XaYbZcRd"#
#            }#
##
#        } else {#
#            tmp.shape <- "err"#
#        }#
#        shape.type[i,]  <- tmp.shape#
        ##------------------------------------------------------------------#
        ## Identify high card#
        ##------------------------------------------------------------------#
        high.card[i,]  <- glob.rank[which(glob.num == max(tmp.nums))]#
        ##------------------------------------------------------------------#
        ## Identify high card#
        ##------------------------------------------------------------------#
        ## get suits tied to the high card#
        hi.suits        <- tmp.suits[which(tmp.ranks %in% high.card[i,])]#
        non.hi.suits    <- tmp.suits[which(!(tmp.ranks %in% high.card[i,]))]#
        if (length(which(hi.suits %in% non.hi.suits)) > 0) {#
            high.suited[i,] <- "Y"#
        } else {#
            high.suited[i,] <- "N"#
        }#
        ##------------------------------------------------------------------#
        ## Identify connectedness#
        ##------------------------------------------------------------------#
        ## pure rundown variants#
        if (all(tmp.gaps == 1)) {#
            tmp.conn    <- "rd.0g"#
        } else if ( all(tmp.gaps == 2)) {#
            tmp.conn    <- "rd.1g"#
        } else if (all(tmp.gaps == 3)) {#
            tmp.conn    <- "rd.2g"#
        ## connected 2-pair#
        } else if ( (tmp.gaps[1] == 0) & (tmp.gaps[3] == 0) & (tmp.gaps[2] %in% c(1,2,3)) ) {#
            tmp.conn    <- "2p.conn"#
        ## rundown plus pair#
        } else if ( (sum(tmp.gaps==0)==1) & (sum(tmp.gaps==1)==2) ) {#
            tmp.conn    <- "rd.1p"#
        ## single gap rundown#
        } else if ( (sum(tmp.gaps==2)==1) & (sum(tmp.gaps==1)==2) ) {#
            tmp.conn    <- "rd.1g"#
#
        ## double gap rundown#
        } else if ( (sum(tmp.gaps==3)==1) & (sum(tmp.gaps==1)==2) ) {#
            tmp.conn    <- "rd.2g"#
#
        ## triple gap rundown#
        } else if ( (sum(tmp.gaps==4)==1) & (sum(tmp.gaps==1)==2) ) {#
            tmp.conn    <- "rd.3g"#
#
        ## dangler gap rundown#
        } else if ( (sum(tmp.gaps>4)==1) & (sum(tmp.gaps==1)==2) ) {#
            tmp.conn    <- "rd.dg"#
#
        ## 2x single gap rundown#
        } else if ( (sum(tmp.gaps==1)==1) & (sum(tmp.gaps==2)==2) ) {#
            tmp.conn    <- "rd.2x1g"#
#
        ## 2x double gap rundown#
        } else if ( (sum(tmp.gaps==1)==1) & (sum(tmp.gaps==3)==2) ) {#
            tmp.conn    <- "rd.2x2g"#
        ## connected single-pair#
        } else if ( (sum(tmp.gaps==0)==1) & (sum(tmp.gaps==1)==1) & (sum(tmp.gaps==2)==1) ) {#
            tmp.conn    <- "1p.conn"#
        ## default#
        } else {#
            tmp.conn    <- NA#
        }#
        rank.conn[i,]   <- tmp.conn#
        ##------------------------------------------------------------------#
        ## Consolidate gap data#
        ##------------------------------------------------------------------#
        rank.gaps[i,]   <- paste(tmp.gaps, collapse=":")#
#
    }#
    ## consolidate#
    hand.data   <- data.frame(  hand=hand.shape,#
                                suit=suit.shape,#
                                suitCombo=suit.combo,#
                                pair=pair.shape,#
                                ranks=pair.ranks,#
                                highCard=high.card,#
                                highSuited=high.suited,#
                                conn=rank.conn,#
                                gaps=rank.gaps)#
#
    colnames(hand.data) <- c("hand","suit","suitCombo","pair","hiPair","loPair","hiCard","hiSuited","conn","gaps")#
    ## save the output as a file#
    #write.table(hand.shape, file=out.file, row.names=FALSE, col.names=FALSE)#
    return(list(ho=hand.shape, hd=hand.data))#
}#
##------------------------------------------------------------------#
## <main> process hands#
##------------------------------------------------------------------#
#
#plo_3max.list   <- processHandFile("ppt_plo_handrankings_03handed.txt")#
#save(plo_3max.list, file="ppt_plo_handrankings_03handed.Rdata")#
#
plo_6max.list   <- processHandFile("ppt_plo_handrankings_06handed.txt")#
##save(plo_6max.list, file="ppt_plo_handrankings_06handed.Rdata")#
#
#plo_10max.list  <- processHandFile("ppt_plo_handrankings_10handed.txt")#
#save(plo_10max.list, file="ppt_plo_handrankings_10handed.Rdata")#
#
#plo_random.list <- processHandFile("ppt_plo_handrankings_preflop_vs_random.txt")#
#save(plo_random.list, file="ppt_plo_handrankings_preflop_vs_random.Rdata")#
##------------------------------------------------------------------#
## Before#
##------------------------------------------------------------------#
## qp:data alexstephens$ head ppt_plo_handrankings_preflop_vs_random.txt#
## (AT)(AT)#
## (AJ)(AJ)#
## (AQ)(AQ)#
##------------------------------------------------------------------#
## After#
##------------------------------------------------------------------#
## qp:data alexstephens$ head ppt_plo_handrankings_preflop_vs_random_genericSyntax.txt#
## "AxTxAyTy"#
## "AxJxAyJy"#
## "AxQxAyQy"
##------------------------------------------------------------------#
## The purpose of this script is to parse the Pro Poker Tools (PPT)#
## hand ranking file #
##------------------------------------------------------------------#
#
##------------------------------------------------------------------#
## Clear the workspace#
##------------------------------------------------------------------#
rm(list=ls())#
#
##------------------------------------------------------------------#
## Set the working directory#
##------------------------------------------------------------------#
setwd("/Users/alexstephens/Development/poker/omaha_hi/data/pptoo/OmahaHi")#
#
##------------------------------------------------------------------#
## The PPT hands Omaha hands have the follow structures#
##------------------------------------------------------------------#
## XYZW#
## (XY)ZW#
## X(YZ)W#
## XY(ZW)#
## (XYZ)W#
## X(YZW)#
## (XYZW)#
## (XY)(ZW)#
##------------------------------------------------------------------#
#
##------------------------------------------------------------------#
## The goal is to convert these into the PPT generic syntax format#
##------------------------------------------------------------------#
## E.g., translate (AJ)(AJ) --> AxJxAyJy (double-suited double-pair)#
##------------------------------------------------------------------#
##------------------------------------------------------------------#
## <function> appendSuits#
##------------------------------------------------------------------#
## Takes a hand character vector, e.g., c("A","J","A","J") and#
## appends a suit character vector, e.g., c("x", "x", "y", "y")#
##------------------------------------------------------------------#
appendSuits <- function(h, s) {#
    return(paste(paste(h,s,sep=""), collapse=""))#
}#
#
##------------------------------------------------------------------#
## <function> rankToNum#
##------------------------------------------------------------------#
## Given a hand (e.g., c("A","J","A","J")), translate the ranks into#
## numerical equivalents (e.g., A=13, K=12, ... 3=2, 2=1)#
##------------------------------------------------------------------#
rankToNum <- function(n, r, hr) {#
    n[match(hr, r)]#
    return(sort(n[match(hr, r)], decreasing=TRUE))#
}#
##------------------------------------------------------------------#
## <function> processHandFile#
##------------------------------------------------------------------#
## Takes a PPT Omaha hand file as an input and writes the translated#
## format to a file.  The output filename contains the "_genericSyntax"#
## postfix.#
##------------------------------------------------------------------#
processHandFile <- function(in.file) {#
#
    ## "global" rank/number vectors#
    glob.num     <- seq(13, 1, -1)#
    glob.rank    <- c("A", "K", "Q", "J", "T", "9", "8", "7", "6", "5", "4", "3", "2")#
    ## process the filename#
    tmp.file    <- unlist(strsplit(in.file, "[.]"))#
    out.file    <- paste0(tmp.file[1], "_genericSyntax_DEBUG", ".", tmp.file[2])#
#
    ## read the input file#
    hf          <- read.csv(in.file, header=FALSE)#
    ## create output matrices#
    hand.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    suit.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    suit.combo  <- matrix(,nrow=nrow(hf), ncol=1)#
    pair.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    pair.ranks  <- matrix(,nrow=nrow(hf), ncol=2)#
    high.card   <- matrix(,nrow=nrow(hf), ncol=1)#
    high.suited <- matrix(,nrow=nrow(hf), ncol=1)#
    rank.conn   <- matrix(,nrow=nrow(hf), ncol=1)#
    rank.gaps   <- matrix(,nrow=nrow(hf), ncol=1)#
    shape.type  <- matrix(,nrow=nrow(hf), ncol=1)#
#
    ## loop over each row in the file and process the ranked hand#
    for (i in 1:nrow(hf)) {#
        #for (i in 1:1147) {#
        ## process a hand#
        tmp.ch      <- unlist(strsplit(as.character(hf[i,]), ""))   ## split hand into individual characters#
        tmp.nch     <- length(tmp.ch)                               ## count number of characters#
        tmp.lp      <- which(tmp.ch %in% c("("))                    ## location of left parentheses#
        tmp.rp      <- which(tmp.ch %in% c(")"))                    ## location of right parentheses#
        tmp.ranks   <- tmp.ch[which(!(tmp.ch %in% c("(",")")))]     ## extract ranks#
        ## get hand shape infp#
        tmp.nums    <- rankToNum(glob.num, glob.rank, tmp.ranks)    ## convert ranks to (sorted) numbers#
        tmp.gaps    <- abs(diff(tmp.nums))                          ## calculate gap sizes#
        tmp.unq     <- length(unique(tmp.nums))                     ## number of unique#
        tmp.tbl     <- table(tmp.ranks)#
        ##------------------------------------------------------------------#
        ## the if/then processes the hand based on the length, and#
        ## for single-suited suited hands it will use the location#
        ## of the right and left parentheses to assign the suits#
        ##------------------------------------------------------------------#
        ##------------------------------------------------------------------#
        ## Deconstruct suits and identify suit shapes#
        ##------------------------------------------------------------------#
        ## double suited#
        if (tmp.nch == 8) {#
            tmp.suits   <- c("x","x","y","y")#
            tmp.color   <- c("ds")#
        ## single suited#
        } else if (tmp.nch == 6) {#
            ## (XY)ZW [1,4]#
            if ((tmp.lp == 1) & (tmp.rp == 4)) {#
                tmp.suits   <- c("x","x","y","z")#
                tmp.color   <- c("ss.2o")#
            ## X(YZ)W [2,5]#
            } else if ((tmp.lp == 2) & (tmp.rp == 5)) {#
                tmp.suits   <- c("x","y","y","z")#
                tmp.color   <- c("ss.2o")#
            ## XY(ZW) [3,6]#
            } else if ((tmp.lp == 3) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","y","z","z")#
                tmp.color   <- c("ss.2o")#
            ## (XYZ)W [1,5]#
            } else if ((tmp.lp == 1) & (tmp.rp == 5)) {#
                tmp.suits   <- c("x","x","x","y")#
                tmp.color   <- c("ss.1o")#
            ## X(YZW) [2,6]#
            } else if ((tmp.lp == 2) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","y","y","y")#
                tmp.color   <- c("ss.1o")#
            ## (XYZW) [1,6]#
            } else if ((tmp.lp == 1) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","x","x","x")#
                tmp.color   <- c("mo")#
            }#
        ## rainbow#
        } else if (tmp.nch == 4) {#
            tmp.suits   <- c("x","y","z","w")#
            tmp.color   <- c("rb")#
        ## error#
        } else {#
            stop("unexpected string lenght\n")#
        }#
        hand.shape[i,1]     <- appendSuits(tmp.ranks, tmp.suits)#
        suit.shape[i,1]     <- tmp.color#
        ##------------------------------------------------------------------#
        ## Create homogeneous suit combos#
        ##------------------------------------------------------------------#
        tmp.combo   <- paste0(tmp.suits, collapse="")#
        if (tmp.combo %in% c("xxxx")) {#
            suit.combo[i,1] <- c("aaaa")#
        } else if (tmp.combo %in% c("xxxy","xyyy")) {#
            suit.combo[i,1] <- c("aaab")#
        } else if (tmp.combo %in% c("xxyy")) {#
            suit.combo[i,1] <- c("aabb")#
        } else if (tmp.combo %in% c("xxyz","xyyz","xyzz")) {#
            suit.combo[i,1] <- c("aabc")#
        } else if (tmp.combo %in% c("xyzw")) {#
            suit.combo[i,1] <- c("aabc")#
        }#
#
        ##------------------------------------------------------------------#
        ## Identify pair types#
        ##------------------------------------------------------------------#
        if (max(tmp.tbl) == 4) {#
            tmp.count   <- c("4k")#
            tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
            tmp.lopair  <- NA#
        } else if (max(tmp.tbl) == 3) {#
            tmp.count   <- c("3k")#
            tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
            tmp.lopair  <- NA#
        } else if (max(tmp.tbl == 2)) {#
            if (tmp.unq == 2) {#
                tmp.count   <- c("2p")#
                tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
                tmp.lopair  <- glob.rank[max(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
            } else {#
                tmp.count   <- c("1p")#
                tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
                tmp.lopair  <- NA#
            }#
        } else {#
            tmp.count   <- c("0p")#
            tmp.hipair  <- NA#
            tmp.lopair  <- NA#
        }#
        pair.shape[i,1]     <- tmp.count#
        pair.ranks[i,]      <- c(tmp.hipair, tmp.lopair)#
        ##------------------------------------------------------------------#
        ## Identify shape types#
        ##------------------------------------------------------------------#
        ## Hand Shape	Description        ## XaXbXcXd	4K::abcd        ## XaXbXcYa	3K::aabc        ## XaXbXcYd	3K::abcd        ## XaXbYaYb	2P::aabb        ## XaXbYaYc	2P::aabc        ## XaXbYcYd	2P::abcd        ## XaXbYaZa	1P::aaab        ## XaXbYaZb	1P::aabb        ## XaXbYaZc	1P::aabc        ## XaXbYcZc	1P::aabc        ## XaXbYcZd	1P::abcd        ## XaYaZaRa	NP::aaaa        ## XaYaZaRb	NP::aaab        ## XaYaZbRb	NP::aabb        ## XaYaZbRc	NP::aabc        ## XaYbZcRd	NP::abcd#
        ##------------------------------------------------------------------#
        #        if (pair.shape[i,1] == "4k") {#
        ##
        #    ## XaXbXcXd	4K::abcd#
        #    tmp.shape <- "XaXbXcXd"#
        ##
        #} else if (pair.shape[i,1] == "3k") {#
        ##
        #    ## XaXbXcYa	3K::aabc#
#    if (suit.combo[i,1] == "ss.2o") {#
#                tmp.shape   <- "XaXbXcYa"#
#            ## XaXbXcYd	3K::abcd#
#            } else if (suit.combo[i,1] == "rb") {#
#                tmp.shape   <- "XaXbXcYd"#
#            }#
##
#        } else if (pair.shape[i,1] == "2p") {#
##
#            ## XaXbYaYb	2P::aabb#
#            if (suit.combo[i,1] == "ds") {#
#                tmp.shape   <- "XaXbYaYb"#            ## XaXbYaYc	2P::aabc#
#            } else if (suit.combo[i,1] == "ss.2o") {#
#                tmp.shape   <- "XaXbYaYc"#            ## XaXbYcYd	2P::abcd#
#            } else if (suit.combo[i,1] == "rb") {#
#                tmp.shape   <- "XaXbYcYd"#
#            }#
##
#        } else if (pair.shape[i,1] == "1p") {#
##
#            ## XaXbYaZa	1P::aaab#
#            if (suit.combo[i,1] == "ss.1o") {#
#                tmp.shape   <- "XaXbYaZa"#            ## XaXbYaZb	1P::aabb#            } else if (suit.combo[i,1] == "ds") {#
#                tmp.shape   <- "XaXbYaZb"#
#            ## XaXbYaZc	1P::aabc#
#            } else if (suit.combo[i,1] == "ss.2o") {#
#                tmp.shape   <- "XaXbYaZc"#            ## XaXbYcZc	1P::aabc#
#            #} else if (suit.combo[i,1] == "ss.2o") {#
#            #    tmp.shape   <- "XaXbYaZc"#            ## XaXbYcZd	1P::abcd#
#            } else if (suit.combo[i,1] == "rb") {#
#                tmp.shape   <- "XaXbYcZd"#
#            }#
##
#        } else if (pair.shape[i,1] == "0p") {#
##
#            ## XaYaZaRa	NP::aaaa#
#            if (suit.combo[i,1] == "mo") {#
#                tmp.shape   <- "XaYaZaRa"#            ## XaYaZaRb	NP::aaab#
#            } else if (suit.combo[i,1] == "ss.1o") {#
#                tmp.shape   <- "XaYaZaRb"#            ## XaYaZbRb	NP::aabb#
#            } else if (suit.combo[i,1] == "ds") {#
#                tmp.shape   <- "XaYaZbRb"#            ## XaYaZbRc	NP::aabc#
#            } else if (suit.combo[i,1] == "ss.2o") {#
#                tmp.shape   <- "XaYaZbRc"#            ## XaYbZcRd	NP::abcd#
#            } else if (suit.combo[i,1] == "rb") {#
#                tmp.shape   <- "XaYbZcRd"#
#            }#
##
#        } else {#
#            tmp.shape <- "err"#
#        }#
#        shape.type[i,]  <- tmp.shape#
        ##------------------------------------------------------------------#
        ## Identify high card#
        ##------------------------------------------------------------------#
        high.card[i,]  <- glob.rank[which(glob.num == max(tmp.nums))]#
        ##------------------------------------------------------------------#
        ## Identify high card#
        ##------------------------------------------------------------------#
        ## get suits tied to the high card#
        hi.suits        <- tmp.suits[which(tmp.ranks %in% high.card[i,])]#
        non.hi.suits    <- tmp.suits[which(!(tmp.ranks %in% high.card[i,]))]#
        if (length(which(hi.suits %in% non.hi.suits)) > 0) {#
            high.suited[i,] <- "Y"#
        } else {#
            high.suited[i,] <- "N"#
        }#
        ##------------------------------------------------------------------#
        ## Identify connectedness#
        ##------------------------------------------------------------------#
        ## pure rundown variants#
        if (all(tmp.gaps == 1)) {#
            tmp.conn    <- "rd.0g"#
        } else if ( all(tmp.gaps == 2)) {#
            tmp.conn    <- "rd.1g"#
        } else if (all(tmp.gaps == 3)) {#
            tmp.conn    <- "rd.2g"#
        ## connected 2-pair#
        } else if ( (tmp.gaps[1] == 0) & (tmp.gaps[3] == 0) & (tmp.gaps[2] %in% c(1,2,3)) ) {#
            tmp.conn    <- "2p.conn"#
        ## rundown plus pair#
        } else if ( (sum(tmp.gaps==0)==1) & (sum(tmp.gaps==1)==2) ) {#
            tmp.conn    <- "rd.1p"#
        ## single gap rundown#
        } else if ( (sum(tmp.gaps==2)==1) & (sum(tmp.gaps==1)==2) ) {#
            tmp.conn    <- "rd.1g"#
#
        ## double gap rundown#
        } else if ( (sum(tmp.gaps==3)==1) & (sum(tmp.gaps==1)==2) ) {#
            tmp.conn    <- "rd.2g"#
#
        ## triple gap rundown#
        } else if ( (sum(tmp.gaps==4)==1) & (sum(tmp.gaps==1)==2) ) {#
            tmp.conn    <- "rd.3g"#
#
        ## dangler gap rundown#
        } else if ( (sum(tmp.gaps>4)==1) & (sum(tmp.gaps==1)==2) ) {#
            tmp.conn    <- "rd.dg"#
#
        ## 2x single gap rundown#
        } else if ( (sum(tmp.gaps==1)==1) & (sum(tmp.gaps==2)==2) ) {#
            tmp.conn    <- "rd.2x1g"#
#
        ## 2x double gap rundown#
        } else if ( (sum(tmp.gaps==1)==1) & (sum(tmp.gaps==3)==2) ) {#
            tmp.conn    <- "rd.2x2g"#
        ## connected single-pair#
        } else if ( (sum(tmp.gaps==0)==1) & (sum(tmp.gaps==1)==1) & (sum(tmp.gaps==2)==1) ) {#
            tmp.conn    <- "1p.conn"#
        ## default#
        } else {#
            tmp.conn    <- NA#
        }#
        rank.conn[i,]   <- tmp.conn#
        ##------------------------------------------------------------------#
        ## Consolidate gap data#
        ##------------------------------------------------------------------#
        rank.gaps[i,]   <- paste(tmp.gaps, collapse=":")#
#
    }#
    ## consolidate#
    hand.data   <- data.frame(  hand=hand.shape,#
                                suit=suit.shape,#
                                suitCombo=suit.combo,#
                                pair=pair.shape,#
                                ranks=pair.ranks,#
                                highCard=high.card,#
                                highSuited=high.suited,#
                                conn=rank.conn,#
                                gaps=rank.gaps)#
#
    colnames(hand.data) <- c("hand","suit","suitCombo","pair","hiPair","loPair","hiCard","hiSuited","conn","gaps")#
    ## save the output as a file#
    #write.table(hand.shape, file=out.file, row.names=FALSE, col.names=FALSE)#
    return(list(ho=hand.shape, hd=hand.data))#
}#
##------------------------------------------------------------------#
## <main> process hands#
##------------------------------------------------------------------#
#
#plo_3max.list   <- processHandFile("ppt_plo_handrankings_03handed.txt")#
#save(plo_3max.list, file="ppt_plo_handrankings_03handed.Rdata")#
#
plo_6max.list   <- processHandFile("ppt_plo_handrankings_06handed.txt")#
##save(plo_6max.list, file="ppt_plo_handrankings_06handed.Rdata")#
#
#plo_10max.list  <- processHandFile("ppt_plo_handrankings_10handed.txt")#
#save(plo_10max.list, file="ppt_plo_handrankings_10handed.Rdata")#
#
#plo_random.list <- processHandFile("ppt_plo_handrankings_preflop_vs_random.txt")#
#save(plo_random.list, file="ppt_plo_handrankings_preflop_vs_random.Rdata")#
##------------------------------------------------------------------#
## Before#
##------------------------------------------------------------------#
## qp:data alexstephens$ head ppt_plo_handrankings_preflop_vs_random.txt#
## (AT)(AT)#
## (AJ)(AJ)#
## (AQ)(AQ)#
##------------------------------------------------------------------#
## After#
##------------------------------------------------------------------#
## qp:data alexstephens$ head ppt_plo_handrankings_preflop_vs_random_genericSyntax.txt#
## "AxTxAyTy"#
## "AxJxAyJy"#
## "AxQxAyQy"
head(plo_6max.list[["hd"]])
table(plo_6max.list[["hd"]]$suitCombo)
##------------------------------------------------------------------#
## The purpose of this script is to parse the Pro Poker Tools (PPT)#
## hand ranking file #
##------------------------------------------------------------------#
#
##------------------------------------------------------------------#
## Clear the workspace#
##------------------------------------------------------------------#
rm(list=ls())#
#
##------------------------------------------------------------------#
## Set the working directory#
##------------------------------------------------------------------#
setwd("/Users/alexstephens/Development/poker/omaha_hi/data/pptoo/OmahaHi")#
#
##------------------------------------------------------------------#
## The PPT hands Omaha hands have the follow structures#
##------------------------------------------------------------------#
## XYZW#
## (XY)ZW#
## X(YZ)W#
## XY(ZW)#
## (XYZ)W#
## X(YZW)#
## (XYZW)#
## (XY)(ZW)#
##------------------------------------------------------------------#
#
##------------------------------------------------------------------#
## The goal is to convert these into the PPT generic syntax format#
##------------------------------------------------------------------#
## E.g., translate (AJ)(AJ) --> AxJxAyJy (double-suited double-pair)#
##------------------------------------------------------------------#
##------------------------------------------------------------------#
## <function> appendSuits#
##------------------------------------------------------------------#
## Takes a hand character vector, e.g., c("A","J","A","J") and#
## appends a suit character vector, e.g., c("x", "x", "y", "y")#
##------------------------------------------------------------------#
appendSuits <- function(h, s) {#
    return(paste(paste(h,s,sep=""), collapse=""))#
}#
#
##------------------------------------------------------------------#
## <function> rankToNum#
##------------------------------------------------------------------#
## Given a hand (e.g., c("A","J","A","J")), translate the ranks into#
## numerical equivalents (e.g., A=13, K=12, ... 3=2, 2=1)#
##------------------------------------------------------------------#
rankToNum <- function(n, r, hr) {#
    n[match(hr, r)]#
    return(sort(n[match(hr, r)], decreasing=TRUE))#
}#
##------------------------------------------------------------------#
## <function> processHandFile#
##------------------------------------------------------------------#
## Takes a PPT Omaha hand file as an input and writes the translated#
## format to a file.  The output filename contains the "_genericSyntax"#
## postfix.#
##------------------------------------------------------------------#
processHandFile <- function(in.file) {#
#
    ## "global" rank/number vectors#
    glob.num     <- seq(13, 1, -1)#
    glob.rank    <- c("A", "K", "Q", "J", "T", "9", "8", "7", "6", "5", "4", "3", "2")#
    ## process the filename#
    tmp.file    <- unlist(strsplit(in.file, "[.]"))#
    out.file    <- paste0(tmp.file[1], "_genericSyntax_DEBUG", ".", tmp.file[2])#
#
    ## read the input file#
    hf          <- read.csv(in.file, header=FALSE)#
    ## create output matrices#
    hand.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    suit.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    suit.combo  <- matrix(,nrow=nrow(hf), ncol=1)#
    pair.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    pair.ranks  <- matrix(,nrow=nrow(hf), ncol=2)#
    high.card   <- matrix(,nrow=nrow(hf), ncol=1)#
    high.suited <- matrix(,nrow=nrow(hf), ncol=1)#
    rank.conn   <- matrix(,nrow=nrow(hf), ncol=1)#
    rank.gaps   <- matrix(,nrow=nrow(hf), ncol=1)#
    shape.type  <- matrix(,nrow=nrow(hf), ncol=1)#
#
    ## loop over each row in the file and process the ranked hand#
    for (i in 1:nrow(hf)) {#
        #for (i in 1:1147) {#
        ## process a hand#
        tmp.ch      <- unlist(strsplit(as.character(hf[i,]), ""))   ## split hand into individual characters#
        tmp.nch     <- length(tmp.ch)                               ## count number of characters#
        tmp.lp      <- which(tmp.ch %in% c("("))                    ## location of left parentheses#
        tmp.rp      <- which(tmp.ch %in% c(")"))                    ## location of right parentheses#
        tmp.ranks   <- tmp.ch[which(!(tmp.ch %in% c("(",")")))]     ## extract ranks#
        ## get hand shape infp#
        tmp.nums    <- rankToNum(glob.num, glob.rank, tmp.ranks)    ## convert ranks to (sorted) numbers#
        tmp.gaps    <- abs(diff(tmp.nums))                          ## calculate gap sizes#
        tmp.unq     <- length(unique(tmp.nums))                     ## number of unique#
        tmp.tbl     <- table(tmp.ranks)#
        ##------------------------------------------------------------------#
        ## the if/then processes the hand based on the length, and#
        ## for single-suited suited hands it will use the location#
        ## of the right and left parentheses to assign the suits#
        ##------------------------------------------------------------------#
        ##------------------------------------------------------------------#
        ## Deconstruct suits and identify suit shapes#
        ##------------------------------------------------------------------#
        ## double suited#
        if (tmp.nch == 8) {#
            tmp.suits   <- c("x","x","y","y")#
            tmp.color   <- c("ds")#
        ## single suited#
        } else if (tmp.nch == 6) {#
            ## (XY)ZW [1,4]#
            if ((tmp.lp == 1) & (tmp.rp == 4)) {#
                tmp.suits   <- c("x","x","y","z")#
                tmp.color   <- c("ss.2o")#
            ## X(YZ)W [2,5]#
            } else if ((tmp.lp == 2) & (tmp.rp == 5)) {#
                tmp.suits   <- c("x","y","y","z")#
                tmp.color   <- c("ss.2o")#
            ## XY(ZW) [3,6]#
            } else if ((tmp.lp == 3) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","y","z","z")#
                tmp.color   <- c("ss.2o")#
            ## (XYZ)W [1,5]#
            } else if ((tmp.lp == 1) & (tmp.rp == 5)) {#
                tmp.suits   <- c("x","x","x","y")#
                tmp.color   <- c("ss.1o")#
            ## X(YZW) [2,6]#
            } else if ((tmp.lp == 2) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","y","y","y")#
                tmp.color   <- c("ss.1o")#
            ## (XYZW) [1,6]#
            } else if ((tmp.lp == 1) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","x","x","x")#
                tmp.color   <- c("mo")#
            }#
        ## rainbow#
        } else if (tmp.nch == 4) {#
            tmp.suits   <- c("x","y","z","w")#
            tmp.color   <- c("rb")#
        ## error#
        } else {#
            stop("unexpected string lenght\n")#
        }#
        hand.shape[i,1]     <- appendSuits(tmp.ranks, tmp.suits)#
        suit.shape[i,1]     <- tmp.color#
        ##------------------------------------------------------------------#
        ## Create homogeneous suit combos#
        ##------------------------------------------------------------------#
        tmp.combo   <- paste0(tmp.suits, collapse="")#
        if (tmp.combo %in% c("xxxx")) {#
            suit.combo[i,1] <- c("aaaa")#
        } else if (tmp.combo %in% c("xxxy","xyyy")) {#
            suit.combo[i,1] <- c("aaab")#
        } else if (tmp.combo %in% c("xxyy")) {#
            suit.combo[i,1] <- c("aabb")#
        } else if (tmp.combo %in% c("xxyz","xyyz","xyzz")) {#
            suit.combo[i,1] <- c("aabc")#
        } else if (tmp.combo %in% c("xyzw")) {#
            suit.combo[i,1] <- c("abcd")#
        }#
#
        ##------------------------------------------------------------------#
        ## Identify pair types#
        ##------------------------------------------------------------------#
        if (max(tmp.tbl) == 4) {#
            tmp.count   <- c("4k")#
            tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
            tmp.lopair  <- NA#
        } else if (max(tmp.tbl) == 3) {#
            tmp.count   <- c("3k")#
            tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
            tmp.lopair  <- NA#
        } else if (max(tmp.tbl == 2)) {#
            if (tmp.unq == 2) {#
                tmp.count   <- c("2p")#
                tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
                tmp.lopair  <- glob.rank[max(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
            } else {#
                tmp.count   <- c("1p")#
                tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
                tmp.lopair  <- NA#
            }#
        } else {#
            tmp.count   <- c("0p")#
            tmp.hipair  <- NA#
            tmp.lopair  <- NA#
        }#
        pair.shape[i,1]     <- tmp.count#
        pair.ranks[i,]      <- c(tmp.hipair, tmp.lopair)#
        ##------------------------------------------------------------------#
        ## Identify shape types#
        ##------------------------------------------------------------------#
        ## Hand Shape	Description        ## XaXbXcXd	4K::abcd        ## XaXbXcYa	3K::aabc        ## XaXbXcYd	3K::abcd        ## XaXbYaYb	2P::aabb        ## XaXbYaYc	2P::aabc        ## XaXbYcYd	2P::abcd        ## XaXbYaZa	1P::aaab        ## XaXbYaZb	1P::aabb        ## XaXbYaZc	1P::aabc        ## XaXbYcZc	1P::aabc        ## XaXbYcZd	1P::abcd        ## XaYaZaRa	NP::aaaa        ## XaYaZaRb	NP::aaab        ## XaYaZbRb	NP::aabb        ## XaYaZbRc	NP::aabc        ## XaYbZcRd	NP::abcd#
        ##------------------------------------------------------------------#
        #        if (pair.shape[i,1] == "4k") {#
        ##
        #    ## XaXbXcXd	4K::abcd#
        #    tmp.shape <- "XaXbXcXd"#
        ##
        #} else if (pair.shape[i,1] == "3k") {#
        ##
        #    ## XaXbXcYa	3K::aabc#
#    if (suit.combo[i,1] == "ss.2o") {#
#                tmp.shape   <- "XaXbXcYa"#
#            ## XaXbXcYd	3K::abcd#
#            } else if (suit.combo[i,1] == "rb") {#
#                tmp.shape   <- "XaXbXcYd"#
#            }#
##
#        } else if (pair.shape[i,1] == "2p") {#
##
#            ## XaXbYaYb	2P::aabb#
#            if (suit.combo[i,1] == "ds") {#
#                tmp.shape   <- "XaXbYaYb"#            ## XaXbYaYc	2P::aabc#
#            } else if (suit.combo[i,1] == "ss.2o") {#
#                tmp.shape   <- "XaXbYaYc"#            ## XaXbYcYd	2P::abcd#
#            } else if (suit.combo[i,1] == "rb") {#
#                tmp.shape   <- "XaXbYcYd"#
#            }#
##
#        } else if (pair.shape[i,1] == "1p") {#
##
#            ## XaXbYaZa	1P::aaab#
#            if (suit.combo[i,1] == "ss.1o") {#
#                tmp.shape   <- "XaXbYaZa"#            ## XaXbYaZb	1P::aabb#            } else if (suit.combo[i,1] == "ds") {#
#                tmp.shape   <- "XaXbYaZb"#
#            ## XaXbYaZc	1P::aabc#
#            } else if (suit.combo[i,1] == "ss.2o") {#
#                tmp.shape   <- "XaXbYaZc"#            ## XaXbYcZc	1P::aabc#
#            #} else if (suit.combo[i,1] == "ss.2o") {#
#            #    tmp.shape   <- "XaXbYaZc"#            ## XaXbYcZd	1P::abcd#
#            } else if (suit.combo[i,1] == "rb") {#
#                tmp.shape   <- "XaXbYcZd"#
#            }#
##
#        } else if (pair.shape[i,1] == "0p") {#
##
#            ## XaYaZaRa	NP::aaaa#
#            if (suit.combo[i,1] == "mo") {#
#                tmp.shape   <- "XaYaZaRa"#            ## XaYaZaRb	NP::aaab#
#            } else if (suit.combo[i,1] == "ss.1o") {#
#                tmp.shape   <- "XaYaZaRb"#            ## XaYaZbRb	NP::aabb#
#            } else if (suit.combo[i,1] == "ds") {#
#                tmp.shape   <- "XaYaZbRb"#            ## XaYaZbRc	NP::aabc#
#            } else if (suit.combo[i,1] == "ss.2o") {#
#                tmp.shape   <- "XaYaZbRc"#            ## XaYbZcRd	NP::abcd#
#            } else if (suit.combo[i,1] == "rb") {#
#                tmp.shape   <- "XaYbZcRd"#
#            }#
##
#        } else {#
#            tmp.shape <- "err"#
#        }#
#        shape.type[i,]  <- tmp.shape#
        ##------------------------------------------------------------------#
        ## Identify high card#
        ##------------------------------------------------------------------#
        high.card[i,]  <- glob.rank[which(glob.num == max(tmp.nums))]#
        ##------------------------------------------------------------------#
        ## Identify high card#
        ##------------------------------------------------------------------#
        ## get suits tied to the high card#
        hi.suits        <- tmp.suits[which(tmp.ranks %in% high.card[i,])]#
        non.hi.suits    <- tmp.suits[which(!(tmp.ranks %in% high.card[i,]))]#
        if (length(which(hi.suits %in% non.hi.suits)) > 0) {#
            high.suited[i,] <- "Y"#
        } else {#
            high.suited[i,] <- "N"#
        }#
        ##------------------------------------------------------------------#
        ## Identify connectedness#
        ##------------------------------------------------------------------#
        ## pure rundown variants#
        if (all(tmp.gaps == 1)) {#
            tmp.conn    <- "rd.0g"#
        } else if ( all(tmp.gaps == 2)) {#
            tmp.conn    <- "rd.1g"#
        } else if (all(tmp.gaps == 3)) {#
            tmp.conn    <- "rd.2g"#
        ## connected 2-pair#
        } else if ( (tmp.gaps[1] == 0) & (tmp.gaps[3] == 0) & (tmp.gaps[2] %in% c(1,2,3)) ) {#
            tmp.conn    <- "2p.conn"#
        ## rundown plus pair#
        } else if ( (sum(tmp.gaps==0)==1) & (sum(tmp.gaps==1)==2) ) {#
            tmp.conn    <- "rd.1p"#
        ## single gap rundown#
        } else if ( (sum(tmp.gaps==2)==1) & (sum(tmp.gaps==1)==2) ) {#
            tmp.conn    <- "rd.1g"#
#
        ## double gap rundown#
        } else if ( (sum(tmp.gaps==3)==1) & (sum(tmp.gaps==1)==2) ) {#
            tmp.conn    <- "rd.2g"#
#
        ## triple gap rundown#
        } else if ( (sum(tmp.gaps==4)==1) & (sum(tmp.gaps==1)==2) ) {#
            tmp.conn    <- "rd.3g"#
#
        ## dangler gap rundown#
        } else if ( (sum(tmp.gaps>4)==1) & (sum(tmp.gaps==1)==2) ) {#
            tmp.conn    <- "rd.dg"#
#
        ## 2x single gap rundown#
        } else if ( (sum(tmp.gaps==1)==1) & (sum(tmp.gaps==2)==2) ) {#
            tmp.conn    <- "rd.2x1g"#
#
        ## 2x double gap rundown#
        } else if ( (sum(tmp.gaps==1)==1) & (sum(tmp.gaps==3)==2) ) {#
            tmp.conn    <- "rd.2x2g"#
        ## connected single-pair#
        } else if ( (sum(tmp.gaps==0)==1) & (sum(tmp.gaps==1)==1) & (sum(tmp.gaps==2)==1) ) {#
            tmp.conn    <- "1p.conn"#
        ## default#
        } else {#
            tmp.conn    <- NA#
        }#
        rank.conn[i,]   <- tmp.conn#
        ##------------------------------------------------------------------#
        ## Consolidate gap data#
        ##------------------------------------------------------------------#
        rank.gaps[i,]   <- paste(tmp.gaps, collapse=":")#
#
    }#
    ## consolidate#
    hand.data   <- data.frame(  hand=hand.shape,#
                                suit=suit.shape,#
                                suitCombo=suit.combo,#
                                pair=pair.shape,#
                                ranks=pair.ranks,#
                                highCard=high.card,#
                                highSuited=high.suited,#
                                conn=rank.conn,#
                                gaps=rank.gaps)#
#
    colnames(hand.data) <- c("hand","suit","suitCombo","pair","hiPair","loPair","hiCard","hiSuited","conn","gaps")#
    ## save the output as a file#
    #write.table(hand.shape, file=out.file, row.names=FALSE, col.names=FALSE)#
    return(list(ho=hand.shape, hd=hand.data))#
}#
##------------------------------------------------------------------#
## <main> process hands#
##------------------------------------------------------------------#
#
#plo_3max.list   <- processHandFile("ppt_plo_handrankings_03handed.txt")#
#save(plo_3max.list, file="ppt_plo_handrankings_03handed.Rdata")#
#
plo_6max.list   <- processHandFile("ppt_plo_handrankings_06handed.txt")#
##save(plo_6max.list, file="ppt_plo_handrankings_06handed.Rdata")#
#
#plo_10max.list  <- processHandFile("ppt_plo_handrankings_10handed.txt")#
#save(plo_10max.list, file="ppt_plo_handrankings_10handed.Rdata")#
#
#plo_random.list <- processHandFile("ppt_plo_handrankings_preflop_vs_random.txt")#
#save(plo_random.list, file="ppt_plo_handrankings_preflop_vs_random.Rdata")#
##------------------------------------------------------------------#
## Before#
##------------------------------------------------------------------#
## qp:data alexstephens$ head ppt_plo_handrankings_preflop_vs_random.txt#
## (AT)(AT)#
## (AJ)(AJ)#
## (AQ)(AQ)#
##------------------------------------------------------------------#
## After#
##------------------------------------------------------------------#
## qp:data alexstephens$ head ppt_plo_handrankings_preflop_vs_random_genericSyntax.txt#
## "AxTxAyTy"#
## "AxJxAyJy"#
## "AxQxAyQy"
table(plo_6max.list[["hd"]]$suitCombo)
##------------------------------------------------------------------#
## The purpose of this script is to parse the Pro Poker Tools (PPT)#
## hand ranking file #
##------------------------------------------------------------------#
#
##------------------------------------------------------------------#
## Clear the workspace#
##------------------------------------------------------------------#
rm(list=ls())#
#
##------------------------------------------------------------------#
## Set the working directory#
##------------------------------------------------------------------#
setwd("/Users/alexstephens/Development/poker/omaha_hi/data/pptoo/OmahaHi")#
#
##------------------------------------------------------------------#
## The PPT hands Omaha hands have the follow structures#
##------------------------------------------------------------------#
## XYZW#
## (XY)ZW#
## X(YZ)W#
## XY(ZW)#
## (XYZ)W#
## X(YZW)#
## (XYZW)#
## (XY)(ZW)#
##------------------------------------------------------------------#
#
##------------------------------------------------------------------#
## The goal is to convert these into the PPT generic syntax format#
##------------------------------------------------------------------#
## E.g., translate (AJ)(AJ) --> AxJxAyJy (double-suited double-pair)#
##------------------------------------------------------------------#
##------------------------------------------------------------------#
## <function> appendSuits#
##------------------------------------------------------------------#
## Takes a hand character vector, e.g., c("A","J","A","J") and#
## appends a suit character vector, e.g., c("x", "x", "y", "y")#
##------------------------------------------------------------------#
appendSuits <- function(h, s) {#
    return(paste(paste(h,s,sep=""), collapse=""))#
}#
#
##------------------------------------------------------------------#
## <function> rankToNum#
##------------------------------------------------------------------#
## Given a hand (e.g., c("A","J","A","J")), translate the ranks into#
## numerical equivalents (e.g., A=13, K=12, ... 3=2, 2=1)#
##------------------------------------------------------------------#
rankToNum <- function(n, r, hr) {#
    n[match(hr, r)]#
    return(sort(n[match(hr, r)], decreasing=TRUE))#
}#
##------------------------------------------------------------------#
## <function> processHandFile#
##------------------------------------------------------------------#
## Takes a PPT Omaha hand file as an input and writes the translated#
## format to a file.  The output filename contains the "_genericSyntax"#
## postfix.#
##------------------------------------------------------------------#
processHandFile <- function(in.file) {#
#
    ## "global" rank/number vectors#
    glob.num     <- seq(13, 1, -1)#
    glob.rank    <- c("A", "K", "Q", "J", "T", "9", "8", "7", "6", "5", "4", "3", "2")#
    ## process the filename#
    tmp.file    <- unlist(strsplit(in.file, "[.]"))#
    out.file    <- paste0(tmp.file[1], "_genericSyntax_DEBUG", ".", tmp.file[2])#
#
    ## read the input file#
    hf          <- read.csv(in.file, header=FALSE)#
    ## create output matrices#
    hand.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    suit.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    suit.combo  <- matrix(,nrow=nrow(hf), ncol=1)#
    pair.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    pair.ranks  <- matrix(,nrow=nrow(hf), ncol=2)#
    high.card   <- matrix(,nrow=nrow(hf), ncol=1)#
    high.suited <- matrix(,nrow=nrow(hf), ncol=1)#
    rank.conn   <- matrix(,nrow=nrow(hf), ncol=1)#
    rank.gaps   <- matrix(,nrow=nrow(hf), ncol=1)#
    shape.type  <- matrix(,nrow=nrow(hf), ncol=1)#
#
    ## loop over each row in the file and process the ranked hand#
    for (i in 1:nrow(hf)) {#
        #for (i in 1:1147) {#
        ## process a hand#
        tmp.ch      <- unlist(strsplit(as.character(hf[i,]), ""))   ## split hand into individual characters#
        tmp.nch     <- length(tmp.ch)                               ## count number of characters#
        tmp.lp      <- which(tmp.ch %in% c("("))                    ## location of left parentheses#
        tmp.rp      <- which(tmp.ch %in% c(")"))                    ## location of right parentheses#
        tmp.ranks   <- tmp.ch[which(!(tmp.ch %in% c("(",")")))]     ## extract ranks#
        ## get hand shape infp#
        tmp.nums    <- rankToNum(glob.num, glob.rank, tmp.ranks)    ## convert ranks to (sorted) numbers#
        tmp.gaps    <- abs(diff(tmp.nums))                          ## calculate gap sizes#
        tmp.unq     <- length(unique(tmp.nums))                     ## number of unique#
        tmp.tbl     <- table(tmp.ranks)#
        ##------------------------------------------------------------------#
        ## the if/then processes the hand based on the length, and#
        ## for single-suited suited hands it will use the location#
        ## of the right and left parentheses to assign the suits#
        ##------------------------------------------------------------------#
        ##------------------------------------------------------------------#
        ## Deconstruct suits and identify suit shapes#
        ##------------------------------------------------------------------#
        ## double suited#
        if (tmp.nch == 8) {#
            tmp.suits   <- c("x","x","y","y")#
            tmp.color   <- c("ds")#
        ## single suited#
        } else if (tmp.nch == 6) {#
            ## (XY)ZW [1,4]#
            if ((tmp.lp == 1) & (tmp.rp == 4)) {#
                tmp.suits   <- c("x","x","y","z")#
                tmp.color   <- c("ss.2o")#
            ## X(YZ)W [2,5]#
            } else if ((tmp.lp == 2) & (tmp.rp == 5)) {#
                tmp.suits   <- c("x","y","y","z")#
                tmp.color   <- c("ss.2o")#
            ## XY(ZW) [3,6]#
            } else if ((tmp.lp == 3) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","y","z","z")#
                tmp.color   <- c("ss.2o")#
            ## (XYZ)W [1,5]#
            } else if ((tmp.lp == 1) & (tmp.rp == 5)) {#
                tmp.suits   <- c("x","x","x","y")#
                tmp.color   <- c("ss.1o")#
            ## X(YZW) [2,6]#
            } else if ((tmp.lp == 2) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","y","y","y")#
                tmp.color   <- c("ss.1o")#
            ## (XYZW) [1,6]#
            } else if ((tmp.lp == 1) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","x","x","x")#
                tmp.color   <- c("mo")#
            }#
        ## rainbow#
        } else if (tmp.nch == 4) {#
            tmp.suits   <- c("x","y","z","w")#
            tmp.color   <- c("rb")#
        ## error#
        } else {#
            stop("unexpected string lenght\n")#
        }#
        hand.shape[i,1]     <- appendSuits(tmp.ranks, tmp.suits)#
        suit.shape[i,1]     <- tmp.color#
        ##------------------------------------------------------------------#
        ## Create homogeneous suit combos#
        ##------------------------------------------------------------------#
        tmp.combo   <- paste0(tmp.suits, collapse="")#
        if (tmp.combo %in% c("xxxx")) {#
            suit.combo[i,1] <- c("aaaa")#
        } else if (tmp.combo %in% c("xxxy","xyyy")) {#
            suit.combo[i,1] <- c("aaab")#
        } else if (tmp.combo %in% c("xxyy")) {#
            suit.combo[i,1] <- c("aabb")#
        } else if (tmp.combo %in% c("xxyz","xyyz","xyzz")) {#
            suit.combo[i,1] <- c("aabc")#
        } else if (tmp.combo %in% c("xyzw")) {#
            suit.combo[i,1] <- c("abcd")#
        }#
#
        ##------------------------------------------------------------------#
        ## Identify pair types#
        ##------------------------------------------------------------------#
        if (max(tmp.tbl) == 4) {#
            tmp.count   <- c("4k")#
            tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
            tmp.lopair  <- NA#
        } else if (max(tmp.tbl) == 3) {#
            tmp.count   <- c("3k")#
            tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
            tmp.lopair  <- NA#
        } else if (max(tmp.tbl == 2)) {#
            if (tmp.unq == 2) {#
                tmp.count   <- c("2p")#
                tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
                tmp.lopair  <- glob.rank[max(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
            } else {#
                tmp.count   <- c("1p")#
                tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
                tmp.lopair  <- NA#
            }#
        } else {#
            tmp.count   <- c("0p")#
            tmp.hipair  <- NA#
            tmp.lopair  <- NA#
        }#
        pair.shape[i,1]     <- tmp.count#
        pair.ranks[i,]      <- c(tmp.hipair, tmp.lopair)#
        ##------------------------------------------------------------------#
        ## Identify shape types#
        ##------------------------------------------------------------------#
        ## Hand Shape	Description        ## XaXbXcXd	4K::abcd        ## XaXbXcYa	3K::aabc        ## XaXbXcYd	3K::abcd        ## XaXbYaYb	2P::aabb        ## XaXbYaYc	2P::aabc        ## XaXbYcYd	2P::abcd        ## XaXbYaZa	1P::aaab        ## XaXbYaZb	1P::aabb        ## XaXbYaZc	1P::aabc        ## XaXbYcZc	1P::aabc        ## XaXbYcZd	1P::abcd        ## XaYaZaRa	NP::aaaa        ## XaYaZaRb	NP::aaab        ## XaYaZbRb	NP::aabb        ## XaYaZbRc	NP::aabc        ## XaYbZcRd	NP::abcd#
        ##------------------------------------------------------------------#
        if (pair.shape[i,1] == "4k") {#
            ## XaXbXcXd	4K::abcd#
            tmp.shape <- "XaXbXcXd"#
#
        } else if (pair.shape[i,1] == "3k") {#
            ## XaXbXcYa	3K::aabc#
            if (suit.combo[i,1] == "aabc") {#
                tmp.shape   <- "XaXbXcYa"#
            ## XaXbXcYd	3K::abcd#
            } else if (suit.combo[i,1] == "abcd") {#
                tmp.shape   <- "XaXbXcYd"#
            }#
##
#        } else if (pair.shape[i,1] == "2p") {#
##
#            ## XaXbYaYb	2P::aabb#
#            if (suit.combo[i,1] == "ds") {#
#                tmp.shape   <- "XaXbYaYb"#            ## XaXbYaYc	2P::aabc#
#            } else if (suit.combo[i,1] == "ss.2o") {#
#                tmp.shape   <- "XaXbYaYc"#            ## XaXbYcYd	2P::abcd#
#            } else if (suit.combo[i,1] == "rb") {#
#                tmp.shape   <- "XaXbYcYd"#
#            }#
##
#        } else if (pair.shape[i,1] == "1p") {#
##
#            ## XaXbYaZa	1P::aaab#
#            if (suit.combo[i,1] == "ss.1o") {#
#                tmp.shape   <- "XaXbYaZa"#            ## XaXbYaZb	1P::aabb#            } else if (suit.combo[i,1] == "ds") {#
#                tmp.shape   <- "XaXbYaZb"#
#            ## XaXbYaZc	1P::aabc#
#            } else if (suit.combo[i,1] == "ss.2o") {#
#                tmp.shape   <- "XaXbYaZc"#            ## XaXbYcZc	1P::aabc#
#            #} else if (suit.combo[i,1] == "ss.2o") {#
#            #    tmp.shape   <- "XaXbYaZc"#            ## XaXbYcZd	1P::abcd#
#            } else if (suit.combo[i,1] == "rb") {#
#                tmp.shape   <- "XaXbYcZd"#
#            }#
##
#        } else if (pair.shape[i,1] == "0p") {#
##
#            ## XaYaZaRa	NP::aaaa#
#            if (suit.combo[i,1] == "mo") {#
#                tmp.shape   <- "XaYaZaRa"#            ## XaYaZaRb	NP::aaab#
#            } else if (suit.combo[i,1] == "ss.1o") {#
#                tmp.shape   <- "XaYaZaRb"#            ## XaYaZbRb	NP::aabb#
#            } else if (suit.combo[i,1] == "ds") {#
#                tmp.shape   <- "XaYaZbRb"#            ## XaYaZbRc	NP::aabc#
#            } else if (suit.combo[i,1] == "ss.2o") {#
#                tmp.shape   <- "XaYaZbRc"#            ## XaYbZcRd	NP::abcd#
#            } else if (suit.combo[i,1] == "rb") {#
#                tmp.shape   <- "XaYbZcRd"#
#            }#
##
        } else {#
            tmp.shape <- "err"#
        }#
        shape.type[i,]  <- tmp.shape#
        ##------------------------------------------------------------------#
        ## Identify high card#
        ##------------------------------------------------------------------#
        high.card[i,]  <- glob.rank[which(glob.num == max(tmp.nums))]#
        ##------------------------------------------------------------------#
        ## Identify high card#
        ##------------------------------------------------------------------#
        ## get suits tied to the high card#
        hi.suits        <- tmp.suits[which(tmp.ranks %in% high.card[i,])]#
        non.hi.suits    <- tmp.suits[which(!(tmp.ranks %in% high.card[i,]))]#
        if (length(which(hi.suits %in% non.hi.suits)) > 0) {#
            high.suited[i,] <- "Y"#
        } else {#
            high.suited[i,] <- "N"#
        }#
        ##------------------------------------------------------------------#
        ## Identify connectedness#
        ##------------------------------------------------------------------#
        ## pure rundown variants#
        if (all(tmp.gaps == 1)) {#
            tmp.conn    <- "rd.0g"#
        } else if ( all(tmp.gaps == 2)) {#
            tmp.conn    <- "rd.1g"#
        } else if (all(tmp.gaps == 3)) {#
            tmp.conn    <- "rd.2g"#
        ## connected 2-pair#
        } else if ( (tmp.gaps[1] == 0) & (tmp.gaps[3] == 0) & (tmp.gaps[2] %in% c(1,2,3)) ) {#
            tmp.conn    <- "2p.conn"#
        ## rundown plus pair#
        } else if ( (sum(tmp.gaps==0)==1) & (sum(tmp.gaps==1)==2) ) {#
            tmp.conn    <- "rd.1p"#
        ## single gap rundown#
        } else if ( (sum(tmp.gaps==2)==1) & (sum(tmp.gaps==1)==2) ) {#
            tmp.conn    <- "rd.1g"#
#
        ## double gap rundown#
        } else if ( (sum(tmp.gaps==3)==1) & (sum(tmp.gaps==1)==2) ) {#
            tmp.conn    <- "rd.2g"#
#
        ## triple gap rundown#
        } else if ( (sum(tmp.gaps==4)==1) & (sum(tmp.gaps==1)==2) ) {#
            tmp.conn    <- "rd.3g"#
#
        ## dangler gap rundown#
        } else if ( (sum(tmp.gaps>4)==1) & (sum(tmp.gaps==1)==2) ) {#
            tmp.conn    <- "rd.dg"#
#
        ## 2x single gap rundown#
        } else if ( (sum(tmp.gaps==1)==1) & (sum(tmp.gaps==2)==2) ) {#
            tmp.conn    <- "rd.2x1g"#
#
        ## 2x double gap rundown#
        } else if ( (sum(tmp.gaps==1)==1) & (sum(tmp.gaps==3)==2) ) {#
            tmp.conn    <- "rd.2x2g"#
        ## connected single-pair#
        } else if ( (sum(tmp.gaps==0)==1) & (sum(tmp.gaps==1)==1) & (sum(tmp.gaps==2)==1) ) {#
            tmp.conn    <- "1p.conn"#
        ## default#
        } else {#
            tmp.conn    <- NA#
        }#
        rank.conn[i,]   <- tmp.conn#
        ##------------------------------------------------------------------#
        ## Consolidate gap data#
        ##------------------------------------------------------------------#
        rank.gaps[i,]   <- paste(tmp.gaps, collapse=":")#
#
    }#
    ## consolidate#
    hand.data   <- data.frame(  hand=hand.shape,#
                                suit=suit.shape,#
                                suitCombo=suit.combo,#
                                shapeType=shape.type,#
                                pair=pair.shape,#
                                ranks=pair.ranks,#
                                highCard=high.card,#
                                highSuited=high.suited,#
                                conn=rank.conn,#
                                gaps=rank.gaps)#
#
    colnames(hand.data) <- c("hand","suit","suitCombo","pair","hiPair","loPair","hiCard","hiSuited","conn","gaps")#
    ## save the output as a file#
    #write.table(hand.shape, file=out.file, row.names=FALSE, col.names=FALSE)#
    return(list(ho=hand.shape, hd=hand.data))#
}#
##------------------------------------------------------------------#
## <main> process hands#
##------------------------------------------------------------------#
#
#plo_3max.list   <- processHandFile("ppt_plo_handrankings_03handed.txt")#
#save(plo_3max.list, file="ppt_plo_handrankings_03handed.Rdata")#
#
plo_6max.list   <- processHandFile("ppt_plo_handrankings_06handed.txt")#
##save(plo_6max.list, file="ppt_plo_handrankings_06handed.Rdata")#
#
#plo_10max.list  <- processHandFile("ppt_plo_handrankings_10handed.txt")#
#save(plo_10max.list, file="ppt_plo_handrankings_10handed.Rdata")#
#
#plo_random.list <- processHandFile("ppt_plo_handrankings_preflop_vs_random.txt")#
#save(plo_random.list, file="ppt_plo_handrankings_preflop_vs_random.Rdata")#
##------------------------------------------------------------------#
## Before#
##------------------------------------------------------------------#
## qp:data alexstephens$ head ppt_plo_handrankings_preflop_vs_random.txt#
## (AT)(AT)#
## (AJ)(AJ)#
## (AQ)(AQ)#
##------------------------------------------------------------------#
## After#
##------------------------------------------------------------------#
## qp:data alexstephens$ head ppt_plo_handrankings_preflop_vs_random_genericSyntax.txt#
## "AxTxAyTy"#
## "AxJxAyJy"#
## "AxQxAyQy"
table(plo_6max.list[["hd"]]$suitCombo)
table(plo_6max.list[["hd"]]$shapeType)
table(plo_6max.list[["hd"]]$shapeType)##------------------------------------------------------------------#
## The purpose of this script is to parse the Pro Poker Tools (PPT)#
## hand ranking file #
##------------------------------------------------------------------#
#
##------------------------------------------------------------------#
## Clear the workspace#
##------------------------------------------------------------------#
rm(list=ls())#
#
##------------------------------------------------------------------#
## Set the working directory#
##------------------------------------------------------------------#
setwd("/Users/alexstephens/Development/poker/omaha_hi/data/pptoo/OmahaHi")#
#
##------------------------------------------------------------------#
## The PPT hands Omaha hands have the follow structures#
##------------------------------------------------------------------#
## XYZW#
## (XY)ZW#
## X(YZ)W#
## XY(ZW)#
## (XYZ)W#
## X(YZW)#
## (XYZW)#
## (XY)(ZW)#
##------------------------------------------------------------------#
#
##------------------------------------------------------------------#
## The goal is to convert these into the PPT generic syntax format#
##------------------------------------------------------------------#
## E.g., translate (AJ)(AJ) --> AxJxAyJy (double-suited double-pair)#
##------------------------------------------------------------------#
##------------------------------------------------------------------#
## <function> appendSuits#
##------------------------------------------------------------------#
## Takes a hand character vector, e.g., c("A","J","A","J") and#
## appends a suit character vector, e.g., c("x", "x", "y", "y")#
##------------------------------------------------------------------#
appendSuits <- function(h, s) {#
    return(paste(paste(h,s,sep=""), collapse=""))#
}#
#
##------------------------------------------------------------------#
## <function> rankToNum#
##------------------------------------------------------------------#
## Given a hand (e.g., c("A","J","A","J")), translate the ranks into#
## numerical equivalents (e.g., A=13, K=12, ... 3=2, 2=1)#
##------------------------------------------------------------------#
rankToNum <- function(n, r, hr) {#
    n[match(hr, r)]#
    return(sort(n[match(hr, r)], decreasing=TRUE))#
}#
##------------------------------------------------------------------#
## <function> processHandFile#
##------------------------------------------------------------------#
## Takes a PPT Omaha hand file as an input and writes the translated#
## format to a file.  The output filename contains the "_genericSyntax"#
## postfix.#
##------------------------------------------------------------------#
processHandFile <- function(in.file) {#
#
    ## "global" rank/number vectors#
    glob.num     <- seq(13, 1, -1)#
    glob.rank    <- c("A", "K", "Q", "J", "T", "9", "8", "7", "6", "5", "4", "3", "2")#
    ## process the filename#
    tmp.file    <- unlist(strsplit(in.file, "[.]"))#
    out.file    <- paste0(tmp.file[1], "_genericSyntax_DEBUG", ".", tmp.file[2])#
#
    ## read the input file#
    hf          <- read.csv(in.file, header=FALSE)#
    ## create output matrices#
    hand.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    suit.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    suit.combo  <- matrix(,nrow=nrow(hf), ncol=1)#
    pair.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    pair.ranks  <- matrix(,nrow=nrow(hf), ncol=2)#
    high.card   <- matrix(,nrow=nrow(hf), ncol=1)#
    high.suited <- matrix(,nrow=nrow(hf), ncol=1)#
    rank.conn   <- matrix(,nrow=nrow(hf), ncol=1)#
    rank.gaps   <- matrix(,nrow=nrow(hf), ncol=1)#
    shape.type  <- matrix(,nrow=nrow(hf), ncol=1)#
#
    ## loop over each row in the file and process the ranked hand#
    for (i in 1:nrow(hf)) {#
        #for (i in 1:1147) {#
        ## process a hand#
        tmp.ch      <- unlist(strsplit(as.character(hf[i,]), ""))   ## split hand into individual characters#
        tmp.nch     <- length(tmp.ch)                               ## count number of characters#
        tmp.lp      <- which(tmp.ch %in% c("("))                    ## location of left parentheses#
        tmp.rp      <- which(tmp.ch %in% c(")"))                    ## location of right parentheses#
        tmp.ranks   <- tmp.ch[which(!(tmp.ch %in% c("(",")")))]     ## extract ranks#
        ## get hand shape infp#
        tmp.nums    <- rankToNum(glob.num, glob.rank, tmp.ranks)    ## convert ranks to (sorted) numbers#
        tmp.gaps    <- abs(diff(tmp.nums))                          ## calculate gap sizes#
        tmp.unq     <- length(unique(tmp.nums))                     ## number of unique#
        tmp.tbl     <- table(tmp.ranks)#
        ##------------------------------------------------------------------#
        ## the if/then processes the hand based on the length, and#
        ## for single-suited suited hands it will use the location#
        ## of the right and left parentheses to assign the suits#
        ##------------------------------------------------------------------#
        ##------------------------------------------------------------------#
        ## Deconstruct suits and identify suit shapes#
        ##------------------------------------------------------------------#
        ## double suited#
        if (tmp.nch == 8) {#
            tmp.suits   <- c("x","x","y","y")#
            tmp.color   <- c("ds")#
        ## single suited#
        } else if (tmp.nch == 6) {#
            ## (XY)ZW [1,4]#
            if ((tmp.lp == 1) & (tmp.rp == 4)) {#
                tmp.suits   <- c("x","x","y","z")#
                tmp.color   <- c("ss.2o")#
            ## X(YZ)W [2,5]#
            } else if ((tmp.lp == 2) & (tmp.rp == 5)) {#
                tmp.suits   <- c("x","y","y","z")#
                tmp.color   <- c("ss.2o")#
            ## XY(ZW) [3,6]#
            } else if ((tmp.lp == 3) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","y","z","z")#
                tmp.color   <- c("ss.2o")#
            ## (XYZ)W [1,5]#
            } else if ((tmp.lp == 1) & (tmp.rp == 5)) {#
                tmp.suits   <- c("x","x","x","y")#
                tmp.color   <- c("ss.1o")#
            ## X(YZW) [2,6]#
            } else if ((tmp.lp == 2) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","y","y","y")#
                tmp.color   <- c("ss.1o")#
            ## (XYZW) [1,6]#
            } else if ((tmp.lp == 1) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","x","x","x")#
                tmp.color   <- c("mo")#
            }#
        ## rainbow#
        } else if (tmp.nch == 4) {#
            tmp.suits   <- c("x","y","z","w")#
            tmp.color   <- c("rb")#
        ## error#
        } else {#
            stop("unexpected string lenght\n")#
        }#
        hand.shape[i,1]     <- appendSuits(tmp.ranks, tmp.suits)#
        suit.shape[i,1]     <- tmp.color#
        ##------------------------------------------------------------------#
        ## Create homogeneous suit combos#
        ##------------------------------------------------------------------#
        tmp.combo   <- paste0(tmp.suits, collapse="")#
        if (tmp.combo %in% c("xxxx")) {#
            suit.combo[i,1] <- c("aaaa")#
        } else if (tmp.combo %in% c("xxxy","xyyy")) {#
            suit.combo[i,1] <- c("aaab")#
        } else if (tmp.combo %in% c("xxyy")) {#
            suit.combo[i,1] <- c("aabb")#
        } else if (tmp.combo %in% c("xxyz","xyyz","xyzz")) {#
            suit.combo[i,1] <- c("aabc")#
        } else if (tmp.combo %in% c("xyzw")) {#
            suit.combo[i,1] <- c("abcd")#
        }#
#
        ##------------------------------------------------------------------#
        ## Identify pair types#
        ##------------------------------------------------------------------#
        if (max(tmp.tbl) == 4) {#
            tmp.count   <- c("4k")#
            tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
            tmp.lopair  <- NA#
        } else if (max(tmp.tbl) == 3) {#
            tmp.count   <- c("3k")#
            tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
            tmp.lopair  <- NA#
        } else if (max(tmp.tbl == 2)) {#
            if (tmp.unq == 2) {#
                tmp.count   <- c("2p")#
                tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
                tmp.lopair  <- glob.rank[max(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
            } else {#
                tmp.count   <- c("1p")#
                tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
                tmp.lopair  <- NA#
            }#
        } else {#
            tmp.count   <- c("0p")#
            tmp.hipair  <- NA#
            tmp.lopair  <- NA#
        }#
        pair.shape[i,1]     <- tmp.count#
        pair.ranks[i,]      <- c(tmp.hipair, tmp.lopair)#
        ##------------------------------------------------------------------#
        ## Identify shape types#
        ##------------------------------------------------------------------#
        ## Hand Shape	Description        ## XaXbXcXd	4K::abcd        ## XaXbXcYa	3K::aabc        ## XaXbXcYd	3K::abcd        ## XaXbYaYb	2P::aabb        ## XaXbYaYc	2P::aabc        ## XaXbYcYd	2P::abcd        ## XaXbYaZa	1P::aaab        ## XaXbYaZb	1P::aabb        ## XaXbYaZc	1P::aabc        ## XaXbYcZc	1P::aabc        ## XaXbYcZd	1P::abcd        ## XaYaZaRa	NP::aaaa        ## XaYaZaRb	NP::aaab        ## XaYaZbRb	NP::aabb        ## XaYaZbRc	NP::aabc        ## XaYbZcRd	NP::abcd#
        ##------------------------------------------------------------------#
        if (pair.shape[i,1] == "4k") {#
            ## XaXbXcXd	4K::abcd#
            tmp.shape <- "XaXbXcXd"#
#
        } else if (pair.shape[i,1] == "3k") {#
            ## XaXbXcYa	3K::aabc#
            if (suit.combo[i,1] == "aabc") {#
                tmp.shape   <- "XaXbXcYa"#
            ## XaXbXcYd	3K::abcd#
            } else if (suit.combo[i,1] == "abcd") {#
                tmp.shape   <- "XaXbXcYd"#
            }#
##
#        } else if (pair.shape[i,1] == "2p") {#
##
#            ## XaXbYaYb	2P::aabb#
#            if (suit.combo[i,1] == "ds") {#
#                tmp.shape   <- "XaXbYaYb"#            ## XaXbYaYc	2P::aabc#
#            } else if (suit.combo[i,1] == "ss.2o") {#
#                tmp.shape   <- "XaXbYaYc"#            ## XaXbYcYd	2P::abcd#
#            } else if (suit.combo[i,1] == "rb") {#
#                tmp.shape   <- "XaXbYcYd"#
#            }#
##
#        } else if (pair.shape[i,1] == "1p") {#
##
#            ## XaXbYaZa	1P::aaab#
#            if (suit.combo[i,1] == "ss.1o") {#
#                tmp.shape   <- "XaXbYaZa"#            ## XaXbYaZb	1P::aabb#            } else if (suit.combo[i,1] == "ds") {#
#                tmp.shape   <- "XaXbYaZb"#
#            ## XaXbYaZc	1P::aabc#
#            } else if (suit.combo[i,1] == "ss.2o") {#
#                tmp.shape   <- "XaXbYaZc"#            ## XaXbYcZc	1P::aabc#
#            #} else if (suit.combo[i,1] == "ss.2o") {#
#            #    tmp.shape   <- "XaXbYaZc"#            ## XaXbYcZd	1P::abcd#
#            } else if (suit.combo[i,1] == "rb") {#
#                tmp.shape   <- "XaXbYcZd"#
#            }#
##
#        } else if (pair.shape[i,1] == "0p") {#
##
#            ## XaYaZaRa	NP::aaaa#
#            if (suit.combo[i,1] == "mo") {#
#                tmp.shape   <- "XaYaZaRa"#            ## XaYaZaRb	NP::aaab#
#            } else if (suit.combo[i,1] == "ss.1o") {#
#                tmp.shape   <- "XaYaZaRb"#            ## XaYaZbRb	NP::aabb#
#            } else if (suit.combo[i,1] == "ds") {#
#                tmp.shape   <- "XaYaZbRb"#            ## XaYaZbRc	NP::aabc#
#            } else if (suit.combo[i,1] == "ss.2o") {#
#                tmp.shape   <- "XaYaZbRc"#            ## XaYbZcRd	NP::abcd#
#            } else if (suit.combo[i,1] == "rb") {#
#                tmp.shape   <- "XaYbZcRd"#
#            }#
##
        } else {#
            tmp.shape <- "err"#
        }#
        shape.type[i,]  <- tmp.shape#
        ##------------------------------------------------------------------#
        ## Identify high card#
        ##------------------------------------------------------------------#
        high.card[i,]  <- glob.rank[which(glob.num == max(tmp.nums))]#
        ##------------------------------------------------------------------#
        ## Identify high card#
        ##------------------------------------------------------------------#
        ## get suits tied to the high card#
        hi.suits        <- tmp.suits[which(tmp.ranks %in% high.card[i,])]#
        non.hi.suits    <- tmp.suits[which(!(tmp.ranks %in% high.card[i,]))]#
        if (length(which(hi.suits %in% non.hi.suits)) > 0) {#
            high.suited[i,] <- "Y"#
        } else {#
            high.suited[i,] <- "N"#
        }#
        ##------------------------------------------------------------------#
        ## Identify connectedness#
        ##------------------------------------------------------------------#
        ## pure rundown variants#
        if (all(tmp.gaps == 1)) {#
            tmp.conn    <- "rd.0g"#
        } else if ( all(tmp.gaps == 2)) {#
            tmp.conn    <- "rd.1g"#
        } else if (all(tmp.gaps == 3)) {#
            tmp.conn    <- "rd.2g"#
        ## connected 2-pair#
        } else if ( (tmp.gaps[1] == 0) & (tmp.gaps[3] == 0) & (tmp.gaps[2] %in% c(1,2,3)) ) {#
            tmp.conn    <- "2p.conn"#
        ## rundown plus pair#
        } else if ( (sum(tmp.gaps==0)==1) & (sum(tmp.gaps==1)==2) ) {#
            tmp.conn    <- "rd.1p"#
        ## single gap rundown#
        } else if ( (sum(tmp.gaps==2)==1) & (sum(tmp.gaps==1)==2) ) {#
            tmp.conn    <- "rd.1g"#
#
        ## double gap rundown#
        } else if ( (sum(tmp.gaps==3)==1) & (sum(tmp.gaps==1)==2) ) {#
            tmp.conn    <- "rd.2g"#
#
        ## triple gap rundown#
        } else if ( (sum(tmp.gaps==4)==1) & (sum(tmp.gaps==1)==2) ) {#
            tmp.conn    <- "rd.3g"#
#
        ## dangler gap rundown#
        } else if ( (sum(tmp.gaps>4)==1) & (sum(tmp.gaps==1)==2) ) {#
            tmp.conn    <- "rd.dg"#
#
        ## 2x single gap rundown#
        } else if ( (sum(tmp.gaps==1)==1) & (sum(tmp.gaps==2)==2) ) {#
            tmp.conn    <- "rd.2x1g"#
#
        ## 2x double gap rundown#
        } else if ( (sum(tmp.gaps==1)==1) & (sum(tmp.gaps==3)==2) ) {#
            tmp.conn    <- "rd.2x2g"#
        ## connected single-pair#
        } else if ( (sum(tmp.gaps==0)==1) & (sum(tmp.gaps==1)==1) & (sum(tmp.gaps==2)==1) ) {#
            tmp.conn    <- "1p.conn"#
        ## default#
        } else {#
            tmp.conn    <- NA#
        }#
        rank.conn[i,]   <- tmp.conn#
        ##------------------------------------------------------------------#
        ## Consolidate gap data#
        ##------------------------------------------------------------------#
        rank.gaps[i,]   <- paste(tmp.gaps, collapse=":")#
#
    }#
    ## consolidate#
    hand.data   <- data.frame(  hand=hand.shape,#
                                suit=suit.shape,#
                                suitCombo=suit.combo,#
                                shapeType=shape.type,#
                                pair=pair.shape,#
                                ranks=pair.ranks,#
                                highCard=high.card,#
                                highSuited=high.suited,#
                                conn=rank.conn,#
                                gaps=rank.gaps)#
#
    colnames(hand.data) <- c("hand","suit","suitCombo","shapeType","pair","hiPair","loPair","hiCard","hiSuited","conn","gaps")#
    ## save the output as a file#
    #write.table(hand.shape, file=out.file, row.names=FALSE, col.names=FALSE)#
    return(list(ho=hand.shape, hd=hand.data))#
}#
##------------------------------------------------------------------#
## <main> process hands#
##------------------------------------------------------------------#
#
#plo_3max.list   <- processHandFile("ppt_plo_handrankings_03handed.txt")#
#save(plo_3max.list, file="ppt_plo_handrankings_03handed.Rdata")#
#
plo_6max.list   <- processHandFile("ppt_plo_handrankings_06handed.txt")#
##save(plo_6max.list, file="ppt_plo_handrankings_06handed.Rdata")#
#
#plo_10max.list  <- processHandFile("ppt_plo_handrankings_10handed.txt")#
#save(plo_10max.list, file="ppt_plo_handrankings_10handed.Rdata")#
#
#plo_random.list <- processHandFile("ppt_plo_handrankings_preflop_vs_random.txt")#
#save(plo_random.list, file="ppt_plo_handrankings_preflop_vs_random.Rdata")#
##------------------------------------------------------------------#
## Before#
##------------------------------------------------------------------#
## qp:data alexstephens$ head ppt_plo_handrankings_preflop_vs_random.txt#
## (AT)(AT)#
## (AJ)(AJ)#
## (AQ)(AQ)#
##------------------------------------------------------------------#
## After#
##------------------------------------------------------------------#
## qp:data alexstephens$ head ppt_plo_handrankings_preflop_vs_random_genericSyntax.txt#
## "AxTxAyTy"#
## "AxJxAyJy"#
## "AxQxAyQy"
table(plo_6max.list[["hd"]]$shapeType)
##------------------------------------------------------------------#
## The purpose of this script is to parse the Pro Poker Tools (PPT)#
## hand ranking file #
##------------------------------------------------------------------#
#
##------------------------------------------------------------------#
## Clear the workspace#
##------------------------------------------------------------------#
rm(list=ls())#
#
##------------------------------------------------------------------#
## Set the working directory#
##------------------------------------------------------------------#
setwd("/Users/alexstephens/Development/poker/omaha_hi/data/pptoo/OmahaHi")#
#
##------------------------------------------------------------------#
## The PPT hands Omaha hands have the follow structures#
##------------------------------------------------------------------#
## XYZW#
## (XY)ZW#
## X(YZ)W#
## XY(ZW)#
## (XYZ)W#
## X(YZW)#
## (XYZW)#
## (XY)(ZW)#
##------------------------------------------------------------------#
#
##------------------------------------------------------------------#
## The goal is to convert these into the PPT generic syntax format#
##------------------------------------------------------------------#
## E.g., translate (AJ)(AJ) --> AxJxAyJy (double-suited double-pair)#
##------------------------------------------------------------------#
##------------------------------------------------------------------#
## <function> appendSuits#
##------------------------------------------------------------------#
## Takes a hand character vector, e.g., c("A","J","A","J") and#
## appends a suit character vector, e.g., c("x", "x", "y", "y")#
##------------------------------------------------------------------#
appendSuits <- function(h, s) {#
    return(paste(paste(h,s,sep=""), collapse=""))#
}#
#
##------------------------------------------------------------------#
## <function> rankToNum#
##------------------------------------------------------------------#
## Given a hand (e.g., c("A","J","A","J")), translate the ranks into#
## numerical equivalents (e.g., A=13, K=12, ... 3=2, 2=1)#
##------------------------------------------------------------------#
rankToNum <- function(n, r, hr) {#
    n[match(hr, r)]#
    return(sort(n[match(hr, r)], decreasing=TRUE))#
}#
##------------------------------------------------------------------#
## <function> processHandFile#
##------------------------------------------------------------------#
## Takes a PPT Omaha hand file as an input and writes the translated#
## format to a file.  The output filename contains the "_genericSyntax"#
## postfix.#
##------------------------------------------------------------------#
processHandFile <- function(in.file) {#
#
    ## "global" rank/number vectors#
    glob.num     <- seq(13, 1, -1)#
    glob.rank    <- c("A", "K", "Q", "J", "T", "9", "8", "7", "6", "5", "4", "3", "2")#
    ## process the filename#
    tmp.file    <- unlist(strsplit(in.file, "[.]"))#
    out.file    <- paste0(tmp.file[1], "_genericSyntax_DEBUG", ".", tmp.file[2])#
#
    ## read the input file#
    hf          <- read.csv(in.file, header=FALSE)#
    ## create output matrices#
    hand.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    suit.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    suit.combo  <- matrix(,nrow=nrow(hf), ncol=1)#
    pair.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    pair.ranks  <- matrix(,nrow=nrow(hf), ncol=2)#
    high.card   <- matrix(,nrow=nrow(hf), ncol=1)#
    high.suited <- matrix(,nrow=nrow(hf), ncol=1)#
    rank.conn   <- matrix(,nrow=nrow(hf), ncol=1)#
    rank.gaps   <- matrix(,nrow=nrow(hf), ncol=1)#
    shape.type  <- matrix(,nrow=nrow(hf), ncol=1)#
#
    ## loop over each row in the file and process the ranked hand#
    for (i in 1:nrow(hf)) {#
        #for (i in 1:1147) {#
        ## process a hand#
        tmp.ch      <- unlist(strsplit(as.character(hf[i,]), ""))   ## split hand into individual characters#
        tmp.nch     <- length(tmp.ch)                               ## count number of characters#
        tmp.lp      <- which(tmp.ch %in% c("("))                    ## location of left parentheses#
        tmp.rp      <- which(tmp.ch %in% c(")"))                    ## location of right parentheses#
        tmp.ranks   <- tmp.ch[which(!(tmp.ch %in% c("(",")")))]     ## extract ranks#
        ## get hand shape infp#
        tmp.nums    <- rankToNum(glob.num, glob.rank, tmp.ranks)    ## convert ranks to (sorted) numbers#
        tmp.gaps    <- abs(diff(tmp.nums))                          ## calculate gap sizes#
        tmp.unq     <- length(unique(tmp.nums))                     ## number of unique#
        tmp.tbl     <- table(tmp.ranks)#
        ##------------------------------------------------------------------#
        ## the if/then processes the hand based on the length, and#
        ## for single-suited suited hands it will use the location#
        ## of the right and left parentheses to assign the suits#
        ##------------------------------------------------------------------#
        ##------------------------------------------------------------------#
        ## Deconstruct suits and identify suit shapes#
        ##------------------------------------------------------------------#
        ## double suited#
        if (tmp.nch == 8) {#
            tmp.suits   <- c("x","x","y","y")#
            tmp.color   <- c("ds")#
        ## single suited#
        } else if (tmp.nch == 6) {#
            ## (XY)ZW [1,4]#
            if ((tmp.lp == 1) & (tmp.rp == 4)) {#
                tmp.suits   <- c("x","x","y","z")#
                tmp.color   <- c("ss.2o")#
            ## X(YZ)W [2,5]#
            } else if ((tmp.lp == 2) & (tmp.rp == 5)) {#
                tmp.suits   <- c("x","y","y","z")#
                tmp.color   <- c("ss.2o")#
            ## XY(ZW) [3,6]#
            } else if ((tmp.lp == 3) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","y","z","z")#
                tmp.color   <- c("ss.2o")#
            ## (XYZ)W [1,5]#
            } else if ((tmp.lp == 1) & (tmp.rp == 5)) {#
                tmp.suits   <- c("x","x","x","y")#
                tmp.color   <- c("ss.1o")#
            ## X(YZW) [2,6]#
            } else if ((tmp.lp == 2) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","y","y","y")#
                tmp.color   <- c("ss.1o")#
            ## (XYZW) [1,6]#
            } else if ((tmp.lp == 1) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","x","x","x")#
                tmp.color   <- c("mo")#
            }#
        ## rainbow#
        } else if (tmp.nch == 4) {#
            tmp.suits   <- c("x","y","z","w")#
            tmp.color   <- c("rb")#
        ## error#
        } else {#
            stop("unexpected string lenght\n")#
        }#
        hand.shape[i,1]     <- appendSuits(tmp.ranks, tmp.suits)#
        suit.shape[i,1]     <- tmp.color#
        ##------------------------------------------------------------------#
        ## Create homogeneous suit combos#
        ##------------------------------------------------------------------#
        tmp.combo   <- paste0(tmp.suits, collapse="")#
        if (tmp.combo %in% c("xxxx")) {#
            suit.combo[i,1] <- c("aaaa")#
        } else if (tmp.combo %in% c("xxxy","xyyy")) {#
            suit.combo[i,1] <- c("aaab")#
        } else if (tmp.combo %in% c("xxyy")) {#
            suit.combo[i,1] <- c("aabb")#
        } else if (tmp.combo %in% c("xxyz","xyyz","xyzz")) {#
            suit.combo[i,1] <- c("aabc")#
        } else if (tmp.combo %in% c("xyzw")) {#
            suit.combo[i,1] <- c("abcd")#
        }#
#
        ##------------------------------------------------------------------#
        ## Identify pair types#
        ##------------------------------------------------------------------#
        if (max(tmp.tbl) == 4) {#
            tmp.count   <- c("4k")#
            tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
            tmp.lopair  <- NA#
        } else if (max(tmp.tbl) == 3) {#
            tmp.count   <- c("3k")#
            tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
            tmp.lopair  <- NA#
        } else if (max(tmp.tbl == 2)) {#
            if (tmp.unq == 2) {#
                tmp.count   <- c("2p")#
                tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
                tmp.lopair  <- glob.rank[max(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
            } else {#
                tmp.count   <- c("1p")#
                tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
                tmp.lopair  <- NA#
            }#
        } else {#
            tmp.count   <- c("0p")#
            tmp.hipair  <- NA#
            tmp.lopair  <- NA#
        }#
        pair.shape[i,1]     <- tmp.count#
        pair.ranks[i,]      <- c(tmp.hipair, tmp.lopair)#
        ##------------------------------------------------------------------#
        ## Identify shape types#
        ##------------------------------------------------------------------#
        ## Hand Shape	Description        ## XaXbXcXd	4K::abcd        ## XaXbXcYa	3K::aabc        ## XaXbXcYd	3K::abcd        ## XaXbYaYb	2P::aabb        ## XaXbYaYc	2P::aabc        ## XaXbYcYd	2P::abcd        ## XaXbYaZa	1P::aaab        ## XaXbYaZb	1P::aabb        ## XaXbYaZc	1P::aabc        ## XaXbYcZc	1P::aabc        ## XaXbYcZd	1P::abcd        ## XaYaZaRa	NP::aaaa        ## XaYaZaRb	NP::aaab        ## XaYaZbRb	NP::aabb        ## XaYaZbRc	NP::aabc        ## XaYbZcRd	NP::abcd#
        ##------------------------------------------------------------------#
        if (pair.shape[i,1] == "4k") {#
            ## XaXbXcXd	4K::abcd#
            tmp.shape <- "XaXbXcXd"#
#
        } else if (pair.shape[i,1] == "3k") {#
            ## XaXbXcYa	3K::aabc#
            if (suit.combo[i,1] == "aabc") {#
                tmp.shape   <- "XaXbXcYa"#
            ## XaXbXcYd	3K::abcd#
            } else if (suit.combo[i,1] == "abcd") {#
                tmp.shape   <- "XaXbXcYd"#
            }#
#
        } else if (pair.shape[i,1] == "2p") {#
#
            ## XaXbYaYb	2P::aabb#
            if (suit.combo[i,1] == "aabb") {#
                tmp.shape   <- "XaXbYaYb"            ## XaXbYaYc	2P::aabc#
            } else if (suit.combo[i,1] == "aabc") {#
                tmp.shape   <- "XaXbYaYc"            ## XaXbYcYd	2P::abcd#
            } else if (suit.combo[i,1] == "abcd") {#
                tmp.shape   <- "XaXbYcYd"#
            }#
#
        } else if (pair.shape[i,1] == "1p") {#
#
            ## XaXbYaZa	1P::aaab#
            if (suit.combo[i,1] == "aaab") {#
                tmp.shape   <- "XaXbYaZa"            ## XaXbYaZb	1P::aabb            } else if (suit.combo[i,1] == "aabb") {#
                tmp.shape   <- "XaXbYaZb"#
            ## XaXbYaZc	1P::aabc#
            } else if (suit.combo[i,1] == "aabc") {#
                tmp.shape   <- "XaXbYaZc"            ## XaXbYcZc	1P::aabc#
            #} else if (suit.combo[i,1] == "ss.2o") {#
            #    tmp.shape   <- "XaXbYaZc"            ## XaXbYcZd	1P::abcd#
            } else if (suit.combo[i,1] == "abcd") {#
                tmp.shape   <- "XaXbYcZd"#
            }#
        } else if (pair.shape[i,1] == "0p") {#
#
            ## XaYaZaRa	NP::aaaa#
            if (suit.combo[i,1] == "aaaa") {#
                tmp.shape   <- "XaYaZaRa"            ## XaYaZaRb	NP::aaab#
            } else if (suit.combo[i,1] == "aaab") {#
                tmp.shape   <- "XaYaZaRb"            ## XaYaZbRb	NP::aabb#
            } else if (suit.combo[i,1] == "aabb") {#
                tmp.shape   <- "XaYaZbRb"            ## XaYaZbRc	NP::aabc#
            } else if (suit.combo[i,1] == "aabc") {#
                tmp.shape   <- "XaYaZbRc"            ## XaYbZcRd	NP::abcd#
            } else if (suit.combo[i,1] == "abcd") {#
                tmp.shape   <- "XaYbZcRd"#
            }#
#
        } else {#
            tmp.shape <- "err"#
        }#
        shape.type[i,]  <- tmp.shape#
        ##------------------------------------------------------------------#
        ## Identify high card#
        ##------------------------------------------------------------------#
        high.card[i,]  <- glob.rank[which(glob.num == max(tmp.nums))]#
        ##------------------------------------------------------------------#
        ## Identify high card#
        ##------------------------------------------------------------------#
        ## get suits tied to the high card#
        hi.suits        <- tmp.suits[which(tmp.ranks %in% high.card[i,])]#
        non.hi.suits    <- tmp.suits[which(!(tmp.ranks %in% high.card[i,]))]#
        if (length(which(hi.suits %in% non.hi.suits)) > 0) {#
            high.suited[i,] <- "Y"#
        } else {#
            high.suited[i,] <- "N"#
        }#
        ##------------------------------------------------------------------#
        ## Identify connectedness#
        ##------------------------------------------------------------------#
        ## pure rundown variants#
        if (all(tmp.gaps == 1)) {#
            tmp.conn    <- "rd.0g"#
        } else if ( all(tmp.gaps == 2)) {#
            tmp.conn    <- "rd.1g"#
        } else if (all(tmp.gaps == 3)) {#
            tmp.conn    <- "rd.2g"#
        ## connected 2-pair#
        } else if ( (tmp.gaps[1] == 0) & (tmp.gaps[3] == 0) & (tmp.gaps[2] %in% c(1,2,3)) ) {#
            tmp.conn    <- "2p.conn"#
        ## rundown plus pair#
        } else if ( (sum(tmp.gaps==0)==1) & (sum(tmp.gaps==1)==2) ) {#
            tmp.conn    <- "rd.1p"#
        ## single gap rundown#
        } else if ( (sum(tmp.gaps==2)==1) & (sum(tmp.gaps==1)==2) ) {#
            tmp.conn    <- "rd.1g"#
#
        ## double gap rundown#
        } else if ( (sum(tmp.gaps==3)==1) & (sum(tmp.gaps==1)==2) ) {#
            tmp.conn    <- "rd.2g"#
#
        ## triple gap rundown#
        } else if ( (sum(tmp.gaps==4)==1) & (sum(tmp.gaps==1)==2) ) {#
            tmp.conn    <- "rd.3g"#
#
        ## dangler gap rundown#
        } else if ( (sum(tmp.gaps>4)==1) & (sum(tmp.gaps==1)==2) ) {#
            tmp.conn    <- "rd.dg"#
#
        ## 2x single gap rundown#
        } else if ( (sum(tmp.gaps==1)==1) & (sum(tmp.gaps==2)==2) ) {#
            tmp.conn    <- "rd.2x1g"#
#
        ## 2x double gap rundown#
        } else if ( (sum(tmp.gaps==1)==1) & (sum(tmp.gaps==3)==2) ) {#
            tmp.conn    <- "rd.2x2g"#
        ## connected single-pair#
        } else if ( (sum(tmp.gaps==0)==1) & (sum(tmp.gaps==1)==1) & (sum(tmp.gaps==2)==1) ) {#
            tmp.conn    <- "1p.conn"#
        ## default#
        } else {#
            tmp.conn    <- NA#
        }#
        rank.conn[i,]   <- tmp.conn#
        ##------------------------------------------------------------------#
        ## Consolidate gap data#
        ##------------------------------------------------------------------#
        rank.gaps[i,]   <- paste(tmp.gaps, collapse=":")#
#
    }#
    ## consolidate#
    hand.data   <- data.frame(  hand=hand.shape,#
                                suit=suit.shape,#
                                suitCombo=suit.combo,#
                                shapeType=shape.type,#
                                pair=pair.shape,#
                                ranks=pair.ranks,#
                                highCard=high.card,#
                                highSuited=high.suited,#
                                conn=rank.conn,#
                                gaps=rank.gaps)#
#
    colnames(hand.data) <- c("hand","suit","suitCombo","shapeType","pair","hiPair","loPair","hiCard","hiSuited","conn","gaps")#
    ## save the output as a file#
    #write.table(hand.shape, file=out.file, row.names=FALSE, col.names=FALSE)#
    return(list(ho=hand.shape, hd=hand.data))#
}#
##------------------------------------------------------------------#
## <main> process hands#
##------------------------------------------------------------------#
#
#plo_3max.list   <- processHandFile("ppt_plo_handrankings_03handed.txt")#
#save(plo_3max.list, file="ppt_plo_handrankings_03handed.Rdata")#
#
plo_6max.list   <- processHandFile("ppt_plo_handrankings_06handed.txt")#
##save(plo_6max.list, file="ppt_plo_handrankings_06handed.Rdata")#
#
#plo_10max.list  <- processHandFile("ppt_plo_handrankings_10handed.txt")#
#save(plo_10max.list, file="ppt_plo_handrankings_10handed.Rdata")#
#
#plo_random.list <- processHandFile("ppt_plo_handrankings_preflop_vs_random.txt")#
#save(plo_random.list, file="ppt_plo_handrankings_preflop_vs_random.Rdata")#
##------------------------------------------------------------------#
## Before#
##------------------------------------------------------------------#
## qp:data alexstephens$ head ppt_plo_handrankings_preflop_vs_random.txt#
## (AT)(AT)#
## (AJ)(AJ)#
## (AQ)(AQ)#
##------------------------------------------------------------------#
## After#
##------------------------------------------------------------------#
## qp:data alexstephens$ head ppt_plo_handrankings_preflop_vs_random_genericSyntax.txt#
## "AxTxAyTy"#
## "AxJxAyJy"#
## "AxQxAyQy"
table(plo_6max.list[["hd"]]$shapeType)
table(plo_6max.list[["hd"]]$pair, plo_6max.list[["hd"]]$shapeType)
table(plo_6max.list[["hd"]]$pair, plo_6max.list[["hd"]]$suitCombo)
table(plo_6max.list[["hd"]]$shapeType, plo_6max.list[["hd"]]$suitCombo)
##------------------------------------------------------------------#
## The purpose of this script is to parse the Pro Poker Tools (PPT)#
## hand ranking file #
##------------------------------------------------------------------#
#
##------------------------------------------------------------------#
## Clear the workspace#
##------------------------------------------------------------------#
rm(list=ls())#
#
##------------------------------------------------------------------#
## Set the working directory#
##------------------------------------------------------------------#
setwd("/Users/alexstephens/Development/poker/omaha_hi/data/pptoo/OmahaHi")#
#
##------------------------------------------------------------------#
## The PPT hands Omaha hands have the follow structures#
##------------------------------------------------------------------#
## XYZW#
## (XY)ZW#
## X(YZ)W#
## XY(ZW)#
## (XYZ)W#
## X(YZW)#
## (XYZW)#
## (XY)(ZW)#
##------------------------------------------------------------------#
#
##------------------------------------------------------------------#
## The goal is to convert these into the PPT generic syntax format#
##------------------------------------------------------------------#
## E.g., translate (AJ)(AJ) --> AxJxAyJy (double-suited double-pair)#
##------------------------------------------------------------------#
##------------------------------------------------------------------#
## <function> appendSuits#
##------------------------------------------------------------------#
## Takes a hand character vector, e.g., c("A","J","A","J") and#
## appends a suit character vector, e.g., c("x", "x", "y", "y")#
##------------------------------------------------------------------#
appendSuits <- function(h, s) {#
    return(paste(paste(h,s,sep=""), collapse=""))#
}#
#
##------------------------------------------------------------------#
## <function> rankToNum#
##------------------------------------------------------------------#
## Given a hand (e.g., c("A","J","A","J")), translate the ranks into#
## numerical equivalents (e.g., A=13, K=12, ... 3=2, 2=1)#
##------------------------------------------------------------------#
rankToNum <- function(n, r, hr) {#
    n[match(hr, r)]#
    return(sort(n[match(hr, r)], decreasing=TRUE))#
}#
##------------------------------------------------------------------#
## <function> processHandFile#
##------------------------------------------------------------------#
## Takes a PPT Omaha hand file as an input and writes the translated#
## format to a file.  The output filename contains the "_genericSyntax"#
## postfix.#
##------------------------------------------------------------------#
processHandFile <- function(in.file) {#
#
    ## "global" rank/number vectors#
    glob.num     <- seq(13, 1, -1)#
    glob.rank    <- c("A", "K", "Q", "J", "T", "9", "8", "7", "6", "5", "4", "3", "2")#
    ## process the filename#
    tmp.file    <- unlist(strsplit(in.file, "[.]"))#
    out.file    <- paste0(tmp.file[1], "_genericSyntax_DEBUG", ".", tmp.file[2])#
#
    ## read the input file#
    hf          <- read.csv(in.file, header=FALSE)#
    ## create output matrices#
    hand.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    suit.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    suit.combo  <- matrix(,nrow=nrow(hf), ncol=1)#
    pair.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    pair.ranks  <- matrix(,nrow=nrow(hf), ncol=2)#
    high.card   <- matrix(,nrow=nrow(hf), ncol=1)#
    high.suited <- matrix(,nrow=nrow(hf), ncol=1)#
    rank.conn   <- matrix(,nrow=nrow(hf), ncol=1)#
    rank.gaps   <- matrix(,nrow=nrow(hf), ncol=1)#
    shape.type  <- matrix(,nrow=nrow(hf), ncol=1)#
#
    ## loop over each row in the file and process the ranked hand#
    for (i in 1:nrow(hf)) {#
        #for (i in 1:1147) {#
        ## process a hand#
        tmp.ch      <- unlist(strsplit(as.character(hf[i,]), ""))   ## split hand into individual characters#
        tmp.nch     <- length(tmp.ch)                               ## count number of characters#
        tmp.lp      <- which(tmp.ch %in% c("("))                    ## location of left parentheses#
        tmp.rp      <- which(tmp.ch %in% c(")"))                    ## location of right parentheses#
        tmp.ranks   <- tmp.ch[which(!(tmp.ch %in% c("(",")")))]     ## extract ranks#
        ## get hand shape infp#
        tmp.nums    <- rankToNum(glob.num, glob.rank, tmp.ranks)    ## convert ranks to (sorted) numbers#
        tmp.gaps    <- abs(diff(tmp.nums))                          ## calculate gap sizes#
        tmp.unq     <- length(unique(tmp.nums))                     ## number of unique#
        tmp.tbl     <- table(tmp.ranks)#
        ##------------------------------------------------------------------#
        ## the if/then processes the hand based on the length, and#
        ## for single-suited suited hands it will use the location#
        ## of the right and left parentheses to assign the suits#
        ##------------------------------------------------------------------#
        ##------------------------------------------------------------------#
        ## Deconstruct suits and identify suit shapes#
        ##------------------------------------------------------------------#
        ## double suited#
        if (tmp.nch == 8) {#
            tmp.suits   <- c("x","x","y","y")#
            tmp.color   <- c("ds")#
        ## single suited#
        } else if (tmp.nch == 6) {#
            ## (XY)ZW [1,4]#
            if ((tmp.lp == 1) & (tmp.rp == 4)) {#
                tmp.suits   <- c("x","x","y","z")#
                tmp.color   <- c("ss.2o")#
            ## X(YZ)W [2,5]#
            } else if ((tmp.lp == 2) & (tmp.rp == 5)) {#
                tmp.suits   <- c("x","y","y","z")#
                tmp.color   <- c("ss.2o")#
            ## XY(ZW) [3,6]#
            } else if ((tmp.lp == 3) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","y","z","z")#
                tmp.color   <- c("ss.2o")#
            ## (XYZ)W [1,5]#
            } else if ((tmp.lp == 1) & (tmp.rp == 5)) {#
                tmp.suits   <- c("x","x","x","y")#
                tmp.color   <- c("ss.1o")#
            ## X(YZW) [2,6]#
            } else if ((tmp.lp == 2) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","y","y","y")#
                tmp.color   <- c("ss.1o")#
            ## (XYZW) [1,6]#
            } else if ((tmp.lp == 1) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","x","x","x")#
                tmp.color   <- c("mo")#
            }#
        ## rainbow#
        } else if (tmp.nch == 4) {#
            tmp.suits   <- c("x","y","z","w")#
            tmp.color   <- c("rb")#
        ## error#
        } else {#
            stop("unexpected string lenght\n")#
        }#
        hand.shape[i,1]     <- appendSuits(tmp.ranks, tmp.suits)#
        suit.shape[i,1]     <- tmp.color#
        ##------------------------------------------------------------------#
        ## Create homogeneous suit combos#
        ##------------------------------------------------------------------#
        tmp.combo   <- paste0(tmp.suits, collapse="")#
        if (tmp.combo %in% c("xxxx")) {#
            suit.combo[i,1] <- c("aaaa")#
        } else if (tmp.combo %in% c("xxxy","xyyy")) {#
            suit.combo[i,1] <- c("aaab")#
        } else if (tmp.combo %in% c("xxyy")) {#
            suit.combo[i,1] <- c("aabb")#
        } else if (tmp.combo %in% c("xxyz","xyyz","xyzz")) {#
            suit.combo[i,1] <- c("aabc")#
        } else if (tmp.combo %in% c("xyzw")) {#
            suit.combo[i,1] <- c("abcd")#
        }#
        ##------------------------------------------------------------------#
        ## Identify pair types#
        ##------------------------------------------------------------------#
        if (max(tmp.tbl) == 4) {#
            tmp.count   <- c("4k")#
            tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
            tmp.lopair  <- NA#
        } else if (max(tmp.tbl) == 3) {#
            tmp.count   <- c("3k")#
            tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
            tmp.lopair  <- NA#
        } else if (max(tmp.tbl == 2)) {#
            if (tmp.unq == 2) {#
                tmp.count   <- c("2p")#
                tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
                tmp.lopair  <- glob.rank[max(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
            } else {#
                tmp.count   <- c("1p")#
                tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
                tmp.lopair  <- NA#
            }#
        } else {#
            tmp.count   <- c("0p")#
            tmp.hipair  <- NA#
            tmp.lopair  <- NA#
        }#
        pair.shape[i,1]     <- tmp.count#
        pair.ranks[i,]      <- c(tmp.hipair, tmp.lopair)#
        ##------------------------------------------------------------------#
        ## Identify shape types#
        ##------------------------------------------------------------------#
        if (pair.shape[i,1] == "4k") {#
            ## XaXbXcXd	4K::abcd#
            tmp.shape <- "XaXbXcXd"#
#
        } else if (pair.shape[i,1] == "3k") {#
            ## XaXbXcYa	3K::aabc#
            if (suit.combo[i,1] == "aabc") {#
                tmp.shape   <- "XaXbXcYa"#
            ## XaXbXcYd	3K::abcd#
            } else if (suit.combo[i,1] == "abcd") {#
                tmp.shape   <- "XaXbXcYd"#
            }#
#
        } else if (pair.shape[i,1] == "2p") {#
#
            ## XaXbYaYb	2P::aabb#
            if (suit.combo[i,1] == "aabb") {#
                tmp.shape   <- "XaXbYaYb"            ## XaXbYaYc	2P::aabc#
            } else if (suit.combo[i,1] == "aabc") {#
                tmp.shape   <- "XaXbYaYc"            ## XaXbYcYd	2P::abcd#
            } else if (suit.combo[i,1] == "abcd") {#
                tmp.shape   <- "XaXbYcYd"#
            }#
#
        } else if (pair.shape[i,1] == "1p") {#
#
            ## XaXbYaZa	1P::aaab#
            if (suit.combo[i,1] == "aaab") {#
                tmp.shape   <- "XaXbYaZa"            ## XaXbYaZb	1P::aabb            } else if (suit.combo[i,1] == "aabb") {#
                tmp.shape   <- "XaXbYaZb"#
            ## XaXbYaZc	1P::aabc#
            } else if (suit.combo[i,1] == "aabc") {#
                tmp.shape   <- "XaXbYaZc"            ## XaXbYcZc	1P::aabc#
            #} else if (suit.combo[i,1] == "ss.2o") {#
            #    tmp.shape   <- "XaXbYaZc"            ## XaXbYcZd	1P::abcd#
            } else if (suit.combo[i,1] == "abcd") {#
                tmp.shape   <- "XaXbYcZd"#
            }#
        } else if (pair.shape[i,1] == "0p") {#
#
            ## XaYaZaRa	NP::aaaa#
            if (suit.combo[i,1] == "aaaa") {#
                tmp.shape   <- "XaYaZaRa"            ## XaYaZaRb	NP::aaab#
            } else if (suit.combo[i,1] == "aaab") {#
                tmp.shape   <- "XaYaZaRb"            ## XaYaZbRb	NP::aabb#
            } else if (suit.combo[i,1] == "aabb") {#
                tmp.shape   <- "XaYaZbRb"            ## XaYaZbRc	NP::aabc#
            } else if (suit.combo[i,1] == "aabc") {#
                tmp.shape   <- "XaYaZbRc"            ## XaYbZcRd	NP::abcd#
            } else if (suit.combo[i,1] == "abcd") {#
                tmp.shape   <- "XaYbZcRd"#
            }#
#
        } else {#
            tmp.shape <- "err"#
        }#
        shape.type[i,]  <- tmp.shape#
        ##------------------------------------------------------------------#
        ## Identify high card#
        ##------------------------------------------------------------------#
        high.card[i,]  <- glob.rank[which(glob.num == max(tmp.nums))]#
        ##------------------------------------------------------------------#
        ## Identify high card#
        ##------------------------------------------------------------------#
        ## get suits tied to the high card#
        hi.suits        <- tmp.suits[which(tmp.ranks %in% high.card[i,])]#
        non.hi.suits    <- tmp.suits[which(!(tmp.ranks %in% high.card[i,]))]#
        if (length(which(hi.suits %in% non.hi.suits)) > 0) {#
            high.suited[i,] <- "Y"#
        } else {#
            high.suited[i,] <- "N"#
        }#
        ##------------------------------------------------------------------#
        ## Identify connectedness#
        ##------------------------------------------------------------------#
        ## pure rundown variants#
        if (all(tmp.gaps == 1)) {#
            tmp.conn    <- "rd.0g"#
        } else if ( all(tmp.gaps == 2)) {#
            tmp.conn    <- "rd.1g"#
        } else if (all(tmp.gaps == 3)) {#
            tmp.conn    <- "rd.2g"#
        ## connected 2-pair#
        } else if ( (tmp.gaps[1] == 0) & (tmp.gaps[3] == 0) & (tmp.gaps[2] %in% c(1,2,3)) ) {#
            tmp.conn    <- "2p.conn"#
        ## rundown plus pair#
        } else if ( (sum(tmp.gaps==0)==1) & (sum(tmp.gaps==1)==2) ) {#
            tmp.conn    <- "rd.1p"#
        ## single gap rundown#
        } else if ( (sum(tmp.gaps==2)==1) & (sum(tmp.gaps==1)==2) ) {#
            tmp.conn    <- "rd.1g"#
#
        ## double gap rundown#
        } else if ( (sum(tmp.gaps==3)==1) & (sum(tmp.gaps==1)==2) ) {#
            tmp.conn    <- "rd.2g"#
#
        ## triple gap rundown#
        } else if ( (sum(tmp.gaps==4)==1) & (sum(tmp.gaps==1)==2) ) {#
            tmp.conn    <- "rd.3g"#
#
        ## dangler gap rundown#
        } else if ( (sum(tmp.gaps>4)==1) & (sum(tmp.gaps==1)==2) ) {#
            tmp.conn    <- "rd.dg"#
#
        ## 2x single gap rundown#
        } else if ( (sum(tmp.gaps==1)==1) & (sum(tmp.gaps==2)==2) ) {#
            tmp.conn    <- "rd.2x1g"#
#
        ## 2x double gap rundown#
        } else if ( (sum(tmp.gaps==1)==1) & (sum(tmp.gaps==3)==2) ) {#
            tmp.conn    <- "rd.2x2g"#
        ## connected single-pair#
        } else if ( (sum(tmp.gaps==0)==1) & (sum(tmp.gaps==1)==1) & (sum(tmp.gaps==2)==1) ) {#
            tmp.conn    <- "1p.conn"#
        ## default#
        } else {#
            tmp.conn    <- NA#
        }#
        rank.conn[i,]   <- tmp.conn#
        ##------------------------------------------------------------------#
        ## Consolidate gap data#
        ##------------------------------------------------------------------#
        rank.gaps[i,]   <- paste(tmp.gaps, collapse=":")#
#
    }#
    ## consolidate#
    hand.data   <- data.frame(  hand=hand.shape,#
                                suit=suit.shape,#
                                suitCombo=suit.combo,#
                                shapeType=shape.type,#
                                pair=pair.shape,#
                                ranks=pair.ranks,#
                                highCard=high.card,#
                                highSuited=high.suited,#
                                conn=rank.conn,#
                                gaps=rank.gaps)#
#
    colnames(hand.data) <- c("hand","suit","suitCombo","shapeType","pair","hiPair","loPair","hiCard","hiSuited","conn","gaps")#
    ## return the results#
    return(list(ho=hand.shape, hd=hand.data))#
}#
##------------------------------------------------------------------#
## <main> process hands#
##------------------------------------------------------------------#
#
#plo_3max.list   <- processHandFile("ppt_plo_handrankings_03handed.txt")#
#save(plo_3max.list, file="ppt_plo_handrankings_03handed.Rdata")#
#
plo_6max.list   <- processHandFile("ppt_plo_handrankings_06handed.txt")#
##save(plo_6max.list, file="ppt_plo_handrankings_06handed.Rdata")#
#
#plo_10max.list  <- processHandFile("ppt_plo_handrankings_10handed.txt")#
#save(plo_10max.list, file="ppt_plo_handrankings_10handed.Rdata")#
#
#plo_random.list <- processHandFile("ppt_plo_handrankings_preflop_vs_random.txt")#
#save(plo_random.list, file="ppt_plo_handrankings_preflop_vs_random.Rdata")#
##------------------------------------------------------------------#
## Before#
##------------------------------------------------------------------#
## qp:data alexstephens$ head ppt_plo_handrankings_preflop_vs_random.txt#
## (AT)(AT)#
## (AJ)(AJ)#
## (AQ)(AQ)#
##------------------------------------------------------------------#
## After#
##------------------------------------------------------------------#
## qp:data alexstephens$ head ppt_plo_handrankings_preflop_vs_random_genericSyntax.txt#
## "AxTxAyTy"#
## "AxJxAyJy"#
## "AxQxAyQy"
##------------------------------------------------------------------#
## The purpose of this script is to parse the Pro Poker Tools (PPT)#
## hand ranking file #
##------------------------------------------------------------------#
#
##------------------------------------------------------------------#
## Clear the workspace#
##------------------------------------------------------------------#
rm(list=ls())#
#
##------------------------------------------------------------------#
## Set the working directory#
##------------------------------------------------------------------#
setwd("/Users/alexstephens/Development/poker/omaha_hi/data/pptoo/OmahaHi")#
#
##------------------------------------------------------------------#
## The PPT hands Omaha hands have the follow structures#
##------------------------------------------------------------------#
## XYZW#
## (XY)ZW#
## X(YZ)W#
## XY(ZW)#
## (XYZ)W#
## X(YZW)#
## (XYZW)#
## (XY)(ZW)#
##------------------------------------------------------------------#
#
##------------------------------------------------------------------#
## The goal is to convert these into the PPT generic syntax format#
##------------------------------------------------------------------#
## E.g., translate (AJ)(AJ) --> AxJxAyJy (double-suited double-pair)#
##------------------------------------------------------------------#
##------------------------------------------------------------------#
## <function> appendSuits#
##------------------------------------------------------------------#
## Takes a hand character vector, e.g., c("A","J","A","J") and#
## appends a suit character vector, e.g., c("x", "x", "y", "y")#
##------------------------------------------------------------------#
appendSuits <- function(h, s) {#
    return(paste(paste(h,s,sep=""), collapse=""))#
}#
#
##------------------------------------------------------------------#
## <function> rankToNum#
##------------------------------------------------------------------#
## Given a hand (e.g., c("A","J","A","J")), translate the ranks into#
## numerical equivalents (e.g., A=13, K=12, ... 3=2, 2=1)#
##------------------------------------------------------------------#
rankToNum <- function(n, r, hr) {#
    n[match(hr, r)]#
    return(sort(n[match(hr, r)], decreasing=TRUE))#
}#
##------------------------------------------------------------------#
## <function> processHandFile#
##------------------------------------------------------------------#
## Takes a PPT Omaha hand file as an input and writes the translated#
## format to a file.  The output filename contains the "_genericSyntax"#
## postfix.#
##------------------------------------------------------------------#
processHandFile <- function(in.file) {#
#
    ## "global" rank/number vectors#
    glob.num     <- seq(13, 1, -1)#
    glob.rank    <- c("A", "K", "Q", "J", "T", "9", "8", "7", "6", "5", "4", "3", "2")#
    ## process the filename#
    tmp.file    <- unlist(strsplit(in.file, "[.]"))#
    out.file    <- paste0(tmp.file[1], "_genericSyntax_DEBUG", ".", tmp.file[2])#
#
    ## read the input file#
    hf          <- read.csv(in.file, header=FALSE)#
    ## create output matrices#
    hand.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    suit.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    suit.combo  <- matrix(,nrow=nrow(hf), ncol=1)#
    pair.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    pair.ranks  <- matrix(,nrow=nrow(hf), ncol=2)#
    high.card   <- matrix(,nrow=nrow(hf), ncol=1)#
    high.suited <- matrix(,nrow=nrow(hf), ncol=1)#
    rank.conn   <- matrix(,nrow=nrow(hf), ncol=1)#
    rank.gaps   <- matrix(,nrow=nrow(hf), ncol=1)#
    shape.type  <- matrix(,nrow=nrow(hf), ncol=1)#
#
    ## loop over each row in the file and process the ranked hand#
    for (i in 1:nrow(hf)) {#
        #for (i in 1:1147) {#
        ## process a hand#
        tmp.ch      <- unlist(strsplit(as.character(hf[i,]), ""))   ## split hand into individual characters#
        tmp.nch     <- length(tmp.ch)                               ## count number of characters#
        tmp.lp      <- which(tmp.ch %in% c("("))                    ## location of left parentheses#
        tmp.rp      <- which(tmp.ch %in% c(")"))                    ## location of right parentheses#
        tmp.ranks   <- tmp.ch[which(!(tmp.ch %in% c("(",")")))]     ## extract ranks#
        ## get hand shape infp#
        tmp.nums    <- rankToNum(glob.num, glob.rank, tmp.ranks)    ## convert ranks to (sorted) numbers#
        tmp.gaps    <- abs(diff(tmp.nums))                          ## calculate gap sizes#
        tmp.unq     <- length(unique(tmp.nums))                     ## number of unique#
        tmp.tbl     <- table(tmp.ranks)#
        ##------------------------------------------------------------------#
        ## the if/then processes the hand based on the length, and#
        ## for single-suited suited hands it will use the location#
        ## of the right and left parentheses to assign the suits#
        ##------------------------------------------------------------------#
        ##------------------------------------------------------------------#
        ## Deconstruct suits and identify suit shapes#
        ##------------------------------------------------------------------#
        ## double suited#
        if (tmp.nch == 8) {#
            tmp.suits   <- c("x","x","y","y")#
            tmp.color   <- c("ds")#
        ## single suited#
        } else if (tmp.nch == 6) {#
            ## (XY)ZW [1,4]#
            if ((tmp.lp == 1) & (tmp.rp == 4)) {#
                tmp.suits   <- c("x","x","y","z")#
                tmp.color   <- c("ss.2o")#
            ## X(YZ)W [2,5]#
            } else if ((tmp.lp == 2) & (tmp.rp == 5)) {#
                tmp.suits   <- c("x","y","y","z")#
                tmp.color   <- c("ss.2o")#
            ## XY(ZW) [3,6]#
            } else if ((tmp.lp == 3) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","y","z","z")#
                tmp.color   <- c("ss.2o")#
            ## (XYZ)W [1,5]#
            } else if ((tmp.lp == 1) & (tmp.rp == 5)) {#
                tmp.suits   <- c("x","x","x","y")#
                tmp.color   <- c("ss.1o")#
            ## X(YZW) [2,6]#
            } else if ((tmp.lp == 2) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","y","y","y")#
                tmp.color   <- c("ss.1o")#
            ## (XYZW) [1,6]#
            } else if ((tmp.lp == 1) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","x","x","x")#
                tmp.color   <- c("mo")#
            }#
        ## rainbow#
        } else if (tmp.nch == 4) {#
            tmp.suits   <- c("x","y","z","w")#
            tmp.color   <- c("rb")#
        ## error#
        } else {#
            stop("unexpected string lenght\n")#
        }#
        hand.shape[i,1]     <- appendSuits(tmp.ranks, tmp.suits)#
        suit.shape[i,1]     <- tmp.color#
        ##------------------------------------------------------------------#
        ## Create homogeneous suit combos#
        ##------------------------------------------------------------------#
        tmp.combo   <- paste0(tmp.suits, collapse="")#
        if (tmp.combo %in% c("xxxx")) {#
            suit.combo[i,1] <- c("aaaa")#
        } else if (tmp.combo %in% c("xxxy","xyyy")) {#
            suit.combo[i,1] <- c("aaab")#
        } else if (tmp.combo %in% c("xxyy")) {#
            suit.combo[i,1] <- c("aabb")#
        } else if (tmp.combo %in% c("xxyz","xyyz","xyzz")) {#
            suit.combo[i,1] <- c("aabc")#
        } else if (tmp.combo %in% c("xyzw")) {#
            suit.combo[i,1] <- c("abcd")#
        }#
        ##------------------------------------------------------------------#
        ## Identify pair types#
        ##------------------------------------------------------------------#
        if (max(tmp.tbl) == 4) {#
            tmp.count   <- c("4k")#
            tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
            tmp.lopair  <- NA#
        } else if (max(tmp.tbl) == 3) {#
            tmp.count   <- c("3k")#
            tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
            tmp.lopair  <- NA#
        } else if (max(tmp.tbl == 2)) {#
            if (tmp.unq == 2) {#
                tmp.count   <- c("2p")#
                tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
                tmp.lopair  <- glob.rank[max(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
            } else {#
                tmp.count   <- c("1p")#
                tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
                tmp.lopair  <- NA#
            }#
        } else {#
            tmp.count   <- c("0p")#
            tmp.hipair  <- NA#
            tmp.lopair  <- NA#
        }#
        pair.shape[i,1]     <- tmp.count#
        pair.ranks[i,]      <- c(tmp.hipair, tmp.lopair)#
        ##------------------------------------------------------------------#
        ## Identify shape types#
        ##------------------------------------------------------------------#
        if (pair.shape[i,1] == "4k") {#
            ## XaXbXcXd	4K::abcd#
            tmp.shape <- "XaXbXcXd"#
#
        } else if (pair.shape[i,1] == "3k") {#
            ## XaXbXcYa	3K::aabc#
            if (suit.combo[i,1] == "aabc") {#
                tmp.shape   <- "XaXbXcYa"#
            ## XaXbXcYd	3K::abcd#
            } else if (suit.combo[i,1] == "abcd") {#
                tmp.shape   <- "XaXbXcYd"#
            }#
#
        } else if (pair.shape[i,1] == "2p") {#
#
            ## XaXbYaYb	2P::aabb#
            if (suit.combo[i,1] == "aabb") {#
                tmp.shape   <- "XaXbYaYb"            ## XaXbYaYc	2P::aabc#
            } else if (suit.combo[i,1] == "aabc") {#
                tmp.shape   <- "XaXbYaYc"            ## XaXbYcYd	2P::abcd#
            } else if (suit.combo[i,1] == "abcd") {#
                tmp.shape   <- "XaXbYcYd"#
            }#
#
        } else if (pair.shape[i,1] == "1p") {#
#
            ## XaXbYaZa	1P::aaab#
            if (suit.combo[i,1] == "aaab") {#
                tmp.shape   <- "XaXbYaZa"            ## XaXbYaZb	1P::aabb            } else if (suit.combo[i,1] == "aabb") {#
                tmp.shape   <- "XaXbYaZb"#
            ## XaXbYaZc	1P::aabc#
            } else if (suit.combo[i,1] == "aabc") {#
                tmp.shape   <- "XaXbYaZc"            ## XaXbYcZc	1P::aabc#
            #} else if (suit.combo[i,1] == "ss.2o") {#
            #    tmp.shape   <- "XaXbYaZc"            ## XaXbYcZd	1P::abcd#
            } else if (suit.combo[i,1] == "abcd") {#
                tmp.shape   <- "XaXbYcZd"#
            }#
        } else if (pair.shape[i,1] == "0p") {#
#
            ## XaYaZaRa	NP::aaaa#
            if (suit.combo[i,1] == "aaaa") {#
                tmp.shape   <- "XaYaZaRa"            ## XaYaZaRb	NP::aaab#
            } else if (suit.combo[i,1] == "aaab") {#
                tmp.shape   <- "XaYaZaRb"            ## XaYaZbRb	NP::aabb#
            } else if (suit.combo[i,1] == "aabb") {#
                tmp.shape   <- "XaYaZbRb"            ## XaYaZbRc	NP::aabc#
            } else if (suit.combo[i,1] == "aabc") {#
                tmp.shape   <- "XaYaZbRc"            ## XaYbZcRd	NP::abcd#
            } else if (suit.combo[i,1] == "abcd") {#
                tmp.shape   <- "XaYbZcRd"#
            }#
#
        } else {#
            tmp.shape <- "err"#
        }#
        shape.type[i,]  <- tmp.shape#
        ##------------------------------------------------------------------#
        ## Identify high card#
        ##------------------------------------------------------------------#
        high.card[i,]  <- glob.rank[which(glob.num == max(tmp.nums))]#
        ##------------------------------------------------------------------#
        ## Identify high card#
        ##------------------------------------------------------------------#
        ## get suits tied to the high card#
        hi.suits        <- tmp.suits[which(tmp.ranks %in% high.card[i,])]#
        non.hi.suits    <- tmp.suits[which(!(tmp.ranks %in% high.card[i,]))]#
        if (length(which(hi.suits %in% non.hi.suits)) > 0) {#
            high.suited[i,] <- "Y"#
        } else {#
            high.suited[i,] <- "N"#
        }#
        ##------------------------------------------------------------------#
        ## Identify connectedness#
        ##------------------------------------------------------------------#
        ## pure rundown variants#
        if (all(tmp.gaps == 1)) {#
            tmp.conn    <- "rd.0g"#
        } else if ( all(tmp.gaps == 2)) {#
            tmp.conn    <- "rd.1g"#
        } else if (all(tmp.gaps == 3)) {#
            tmp.conn    <- "rd.2g"#
        ## connected 2-pair#
        } else if ( (tmp.gaps[1] == 0) & (tmp.gaps[3] == 0) & (tmp.gaps[2] %in% c(1,2,3)) ) {#
            tmp.conn    <- "2p.conn"#
        ## rundown plus pair#
        } else if ( (sum(tmp.gaps==0)==1) & (sum(tmp.gaps==1)==2) ) {#
            tmp.conn    <- "rd.1p"#
        ## single gap rundown#
        } else if ( (sum(tmp.gaps==2)==1) & (sum(tmp.gaps==1)==2) ) {#
            tmp.conn    <- "rd.1g"#
#
        ## double gap rundown#
        } else if ( (sum(tmp.gaps==3)==1) & (sum(tmp.gaps==1)==2) ) {#
            tmp.conn    <- "rd.2g"#
#
        ## triple gap rundown#
        } else if ( (sum(tmp.gaps==4)==1) & (sum(tmp.gaps==1)==2) ) {#
            tmp.conn    <- "rd.3g"#
#
        ## dangler gap rundown#
        } else if ( (sum(tmp.gaps>4)==1) & (sum(tmp.gaps==1)==2) ) {#
            tmp.conn    <- "rd.dg"#
#
        ## 2x single gap rundown#
        } else if ( (sum(tmp.gaps==1)==1) & (sum(tmp.gaps==2)==2) ) {#
            tmp.conn    <- "rd.2x1g"#
#
        ## 2x double gap rundown#
        } else if ( (sum(tmp.gaps==1)==1) & (sum(tmp.gaps==3)==2) ) {#
            tmp.conn    <- "rd.2x2g"#
        ## connected single-pair#
        } else if ( (sum(tmp.gaps==0)==1) & (sum(tmp.gaps==1)==1) & (sum(tmp.gaps==2)==1) ) {#
            tmp.conn    <- "1p.conn"#
        ## default#
        } else {#
            tmp.conn    <- NA#
        }#
        rank.conn[i,]   <- tmp.conn#
        ##------------------------------------------------------------------#
        ## Consolidate gap data#
        ##------------------------------------------------------------------#
        rank.gaps[i,]   <- paste(tmp.gaps, collapse=":")#
#
    }#
    ## consolidate#
    hand.data   <- data.frame(  hand=hand.shape,#
                                suit=suit.shape,#
                                suitCombo=suit.combo,#
                                shapeType=shape.type,#
                                pair=pair.shape,#
                                ranks=pair.ranks,#
                                highCard=high.card,#
                                highSuited=high.suited,#
                                conn=rank.conn,#
                                gaps=rank.gaps)#
#
    colnames(hand.data) <- c("hand","suit","suitCombo","shapeType","pair","hiPair","loPair","hiCard","hiSuited","conn","gaps")#
    ## return the results#
    return(list(ho=hand.shape, hd=hand.data))#
}#
##------------------------------------------------------------------#
## <main> process hands#
##------------------------------------------------------------------#
#
plo_3max.list   <- processHandFile("ppt_plo_handrankings_03handed.txt")#
save(plo_3max.list, file="ppt_plo_handrankings_03handed.Rdata")#
#
plo_6max.list   <- processHandFile("ppt_plo_handrankings_06handed.txt")#
save(plo_6max.list, file="ppt_plo_handrankings_06handed.Rdata")#
#
plo_10max.list  <- processHandFile("ppt_plo_handrankings_10handed.txt")#
save(plo_10max.list, file="ppt_plo_handrankings_10handed.Rdata")#
#
plo_random.list <- processHandFile("ppt_plo_handrankings_preflop_vs_random.txt")#
save(plo_random.list, file="ppt_plo_handrankings_preflop_vs_random.Rdata")#
##------------------------------------------------------------------#
## Before#
##------------------------------------------------------------------#
## qp:data alexstephens$ head ppt_plo_handrankings_preflop_vs_random.txt#
## (AT)(AT)#
## (AJ)(AJ)#
## (AQ)(AQ)#
##------------------------------------------------------------------#
## After#
##------------------------------------------------------------------#
## qp:data alexstephens$ head ppt_plo_handrankings_preflop_vs_random_genericSyntax.txt#
## "AxTxAyTy"#
## "AxJxAyJy"#
## "AxQxAyQy"
##------------------------------------------------------------------#
## Clear the workspace#
##------------------------------------------------------------------#
rm(list=ls())#
#
##------------------------------------------------------------------#
## Load data#
##------------------------------------------------------------------#
#
## 6max simulation data#
setwd("/Users/alexstephens/Development/poker/omaha_hi/data/simulations")#
load("hotColdEquity_6max_OmahiHi_AllHands.Rdata")#
#
## 6max hand attributes#
setwd("/Users/alexstephens/Development/poker/omaha_hi/data/pptoo/OmahaHi")#
load("ppt_plo_handrankings_06handed.Rdata")#
#
##------------------------------------------------------------------#
## append a cumulative %#
##------------------------------------------------------------------#
hand.mat    <- plo_6max.list[["hd"]]#
#
eqty.mat    <- res.mat#
eqty.mat    <- cbind(   eqty.mat,#
                        cumpct=1:nrow(res.mat)/nrow(res.mat))
head(hand.mat)
table(hand.mat$suit, hand.mat$suitCombo)
head(eqty.mat)
idx <- which(eqty.mat[,"cumpct"] <= 0.10)
a <- hand.mat[idx,]
head(a)
table(a$ds, a$suitCombo)
table(a$suit, a$suitCombo)
table(a$suitCombo)
table(a$suitCombo, a$pair)
table(a$suitCombo, a$hiCard)
table(a$suitCombo, a$gap)
class(a)
str(a)
a <- droplevels(a)
table(a$suitCombo, a$gap)
table(a$gap)
table(a$gap, a$suitCombp)
table(a$gap, a$suitCombo)
##------------------------------------------------------------------#
## The purpose of this script is to parse the Pro Poker Tools (PPT)#
## hand ranking file #
##------------------------------------------------------------------#
#
##------------------------------------------------------------------#
## Clear the workspace#
##------------------------------------------------------------------#
rm(list=ls())#
#
##------------------------------------------------------------------#
## Set the working directory#
##------------------------------------------------------------------#
setwd("/Users/alexstephens/Development/poker/omaha_hi/data/pptoo/OmahaHi")#
#
##------------------------------------------------------------------#
## The PPT hands Omaha hands have the follow structures#
##------------------------------------------------------------------#
## XYZW#
## (XY)ZW#
## X(YZ)W#
## XY(ZW)#
## (XYZ)W#
## X(YZW)#
## (XYZW)#
## (XY)(ZW)#
##------------------------------------------------------------------#
#
##------------------------------------------------------------------#
## The goal is to convert these into the PPT generic syntax format#
##------------------------------------------------------------------#
## E.g., translate (AJ)(AJ) --> AxJxAyJy (double-suited double-pair)#
##------------------------------------------------------------------#
##------------------------------------------------------------------#
## <function> appendSuits#
##------------------------------------------------------------------#
## Takes a hand character vector, e.g., c("A","J","A","J") and#
## appends a suit character vector, e.g., c("x", "x", "y", "y")#
##------------------------------------------------------------------#
appendSuits <- function(h, s) {#
    return(paste(paste(h,s,sep=""), collapse=""))#
}#
#
##------------------------------------------------------------------#
## <function> rankToNum#
##------------------------------------------------------------------#
## Given a hand (e.g., c("A","J","A","J")), translate the ranks into#
## numerical equivalents (e.g., A=13, K=12, ... 3=2, 2=1)#
##------------------------------------------------------------------#
rankToNum <- function(n, r, hr) {#
    n[match(hr, r)]#
    return(sort(n[match(hr, r)], decreasing=TRUE))#
}#
##------------------------------------------------------------------#
## <function> processHandFile#
##------------------------------------------------------------------#
## Takes a PPT Omaha hand file as an input and writes the translated#
## format to a file.  The output filename contains the "_genericSyntax"#
## postfix.#
##------------------------------------------------------------------#
processHandFile <- function(in.file) {#
#
    ## "global" rank/number vectors#
    glob.num     <- seq(13, 1, -1)#
    glob.rank    <- c("A", "K", "Q", "J", "T", "9", "8", "7", "6", "5", "4", "3", "2")#
    ## process the filename#
    tmp.file    <- unlist(strsplit(in.file, "[.]"))#
    out.file    <- paste0(tmp.file[1], "_genericSyntax_DEBUG", ".", tmp.file[2])#
#
    ## read the input file#
    hf          <- read.csv(in.file, header=FALSE)#
    ## create output matrices#
    hand.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    suit.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    suit.combo  <- matrix(,nrow=nrow(hf), ncol=1)#
    pair.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    pair.ranks  <- matrix(,nrow=nrow(hf), ncol=2)#
    high.card   <- matrix(,nrow=nrow(hf), ncol=1)#
    high.suited <- matrix(,nrow=nrow(hf), ncol=1)#
    rank.conn   <- matrix(,nrow=nrow(hf), ncol=1)#
    rank.gaps   <- matrix(,nrow=nrow(hf), ncol=1)#
    shape.type  <- matrix(,nrow=nrow(hf), ncol=1)#
    shape.wgt   <- matrix(,nrow=nrow(hf), ncol=1)#
#
    ## loop over each row in the file and process the ranked hand#
    for (i in 1:nrow(hf)) {#
        #for (i in 1:1147) {#
        ## process a hand#
        tmp.ch      <- unlist(strsplit(as.character(hf[i,]), ""))   ## split hand into individual characters#
        tmp.nch     <- length(tmp.ch)                               ## count number of characters#
        tmp.lp      <- which(tmp.ch %in% c("("))                    ## location of left parentheses#
        tmp.rp      <- which(tmp.ch %in% c(")"))                    ## location of right parentheses#
        tmp.ranks   <- tmp.ch[which(!(tmp.ch %in% c("(",")")))]     ## extract ranks#
        ## get hand shape infp#
        tmp.nums    <- rankToNum(glob.num, glob.rank, tmp.ranks)    ## convert ranks to (sorted) numbers#
        tmp.gaps    <- abs(diff(tmp.nums))                          ## calculate gap sizes#
        tmp.unq     <- length(unique(tmp.nums))                     ## number of unique#
        tmp.tbl     <- table(tmp.ranks)#
        ##------------------------------------------------------------------#
        ## the if/then processes the hand based on the length, and#
        ## for single-suited suited hands it will use the location#
        ## of the right and left parentheses to assign the suits#
        ##------------------------------------------------------------------#
        ##------------------------------------------------------------------#
        ## Deconstruct suits and identify suit shapes#
        ##------------------------------------------------------------------#
        ## double suited#
        if (tmp.nch == 8) {#
            tmp.suits   <- c("x","x","y","y")#
            tmp.color   <- c("ds")#
        ## single suited#
        } else if (tmp.nch == 6) {#
            ## (XY)ZW [1,4]#
            if ((tmp.lp == 1) & (tmp.rp == 4)) {#
                tmp.suits   <- c("x","x","y","z")#
                tmp.color   <- c("ss.2o")#
            ## X(YZ)W [2,5]#
            } else if ((tmp.lp == 2) & (tmp.rp == 5)) {#
                tmp.suits   <- c("x","y","y","z")#
                tmp.color   <- c("ss.2o")#
            ## XY(ZW) [3,6]#
            } else if ((tmp.lp == 3) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","y","z","z")#
                tmp.color   <- c("ss.2o")#
            ## (XYZ)W [1,5]#
            } else if ((tmp.lp == 1) & (tmp.rp == 5)) {#
                tmp.suits   <- c("x","x","x","y")#
                tmp.color   <- c("ss.1o")#
            ## X(YZW) [2,6]#
            } else if ((tmp.lp == 2) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","y","y","y")#
                tmp.color   <- c("ss.1o")#
            ## (XYZW) [1,6]#
            } else if ((tmp.lp == 1) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","x","x","x")#
                tmp.color   <- c("mo")#
            }#
        ## rainbow#
        } else if (tmp.nch == 4) {#
            tmp.suits   <- c("x","y","z","w")#
            tmp.color   <- c("rb")#
        ## error#
        } else {#
            stop("unexpected string lenght\n")#
        }#
        hand.shape[i,1]     <- appendSuits(tmp.ranks, tmp.suits)#
        suit.shape[i,1]     <- tmp.color#
        ##------------------------------------------------------------------#
        ## Create homogeneous suit combos#
        ##------------------------------------------------------------------#
        tmp.combo   <- paste0(tmp.suits, collapse="")#
        if (tmp.combo %in% c("xxxx")) {#
            suit.combo[i,1] <- c("aaaa")#
        } else if (tmp.combo %in% c("xxxy","xyyy")) {#
            suit.combo[i,1] <- c("aaab")#
        } else if (tmp.combo %in% c("xxyy")) {#
            suit.combo[i,1] <- c("aabb")#
        } else if (tmp.combo %in% c("xxyz","xyyz","xyzz")) {#
            suit.combo[i,1] <- c("aabc")#
        } else if (tmp.combo %in% c("xyzw")) {#
            suit.combo[i,1] <- c("abcd")#
        }#
        ##------------------------------------------------------------------#
        ## Identify pair types#
        ##------------------------------------------------------------------#
        if (max(tmp.tbl) == 4) {#
            tmp.count   <- c("4k")#
            tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
            tmp.lopair  <- NA#
        } else if (max(tmp.tbl) == 3) {#
            tmp.count   <- c("3k")#
            tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
            tmp.lopair  <- NA#
        } else if (max(tmp.tbl == 2)) {#
            if (tmp.unq == 2) {#
                tmp.count   <- c("2p")#
                tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
                tmp.lopair  <- glob.rank[max(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
            } else {#
                tmp.count   <- c("1p")#
                tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
                tmp.lopair  <- NA#
            }#
        } else {#
            tmp.count   <- c("0p")#
            tmp.hipair  <- NA#
            tmp.lopair  <- NA#
        }#
        pair.shape[i,1]     <- tmp.count#
        pair.ranks[i,]      <- c(tmp.hipair, tmp.lopair)#
        ##------------------------------------------------------------------#
        ## Identify shape types#
        ##------------------------------------------------------------------#
        if (pair.shape[i,1] == "4k") {#
            ## XaXbXcXd	4K::abcd#
            tmp.shape   <- "XaXbXcXd"#
            tmp.wgt     <- (13/13)#
        } else if (pair.shape[i,1] == "3k") {#
            ## XaXbXcYa	3K::aabc#
            if (suit.combo[i,1] == "aabc") {#
                tmp.shape   <- "XaXbXcYa"#
                tmp.wgt     <- (1872/156)#
            ## XaXbXcYd	3K::abcd#
            } else if (suit.combo[i,1] == "abcd") {#
                tmp.shape   <- "XaXbXcYd"#
                tmp.wgt     <- (624/156)#
            }#
        } else if (pair.shape[i,1] == "2p") {#
            ## XaXbYaYb	2P::aabb#
            if (suit.combo[i,1] == "aabb") {#
                tmp.shape   <- "XaXbYaYb"#
                tmp.wgt     <- (468/78)            ## XaXbYaYc	2P::aabc#
            } else if (suit.combo[i,1] == "aabc") {#
                tmp.shape   <- "XaXbYaYc"#
                tmp.wgt     <- (1872/78)            ## XaXbYcYd	2P::abcd#
            } else if (suit.combo[i,1] == "abcd") {#
                tmp.shape   <- "XaXbYcYd"#
                tmp.wgt     <- (468/78)#
            }#
        } else if (pair.shape[i,1] == "1p") {#
            ## XaXbYaZa	1P::aaab#
            if (suit.combo[i,1] == "aaab") {#
                tmp.shape   <- "XaXbYaZa"#
                tmp.wgt     <- (10296/858)            ## XaXbYaZb	1P::aabb            } else if (suit.combo[i,1] == "aabb") {#
                tmp.shape   <- "XaXbYaZb"#
                tmp.wgt     <- (10296/858)#
            ## XaXbYaZc	1P::aabc#
            } else if (suit.combo[i,1] == "aabc") {#
                tmp.shape   <- "XaXbYaZc"#
                tmp.wgt     <- (41184+10296)/(1716+858)            ## XaXbYcZc	1P::aabc#
            #} else if (suit.combo[i,1] == "ss.2o") {#
            #    tmp.shape   <- "XaXbYaZc"            ## XaXbYcZd	1P::abcd#
            } else if (suit.combo[i,1] == "abcd") {#
                tmp.shape   <- "XaXbYcZd"#
                tmp.wgt     <- (10296/858)#
            }#
        } else if (pair.shape[i,1] == "0p") {#
#
            ## XaYaZaRa	NP::aaaa#
            if (suit.combo[i,1] == "aaaa") {#
                tmp.shape   <- "XaYaZaRa"#
                tmp.wgt     <- (2860/715)            ## XaYaZaRb	NP::aaab#
            } else if (suit.combo[i,1] == "aaab") {#
                tmp.shape   <- "XaYaZaRb"#
                tmp.wgt     <- (34320/2860)            ## XaYaZbRb	NP::aabb#
            } else if (suit.combo[i,1] == "aabb") {#
                tmp.shape   <- "XaYaZbRb"#
                tmp.wgt     <- (25740/2145)            ## XaYaZbRc	NP::aabc#
            } else if (suit.combo[i,1] == "aabc") {#
                tmp.shape   <- "XaYaZbRc"#
                tmp.wgt     <- (102960/4290)            ## XaYbZcRd	NP::abcd#
            } else if (suit.combo[i,1] == "abcd") {#
                tmp.shape   <- "XaYbZcRd"#
                tmp.wgt     <- (17160/715)#
            }#
#
        } else {#
            tmp.shape <- "err"#
        }#
        shape.type[i,]  <- tmp.shape#
        shape.wgt[i,]   <- tmp.wgt#
        ##------------------------------------------------------------------#
        ## Identify high card#
        ##------------------------------------------------------------------#
        high.card[i,]  <- glob.rank[which(glob.num == max(tmp.nums))]#
        ##------------------------------------------------------------------#
        ## Identify high card#
        ##------------------------------------------------------------------#
        ## get suits tied to the high card#
        hi.suits        <- tmp.suits[which(tmp.ranks %in% high.card[i,])]#
        non.hi.suits    <- tmp.suits[which(!(tmp.ranks %in% high.card[i,]))]#
        if (length(which(hi.suits %in% non.hi.suits)) > 0) {#
            high.suited[i,] <- "Y"#
        } else {#
            high.suited[i,] <- "N"#
        }#
        ##------------------------------------------------------------------#
        ## Identify connectedness#
        ##------------------------------------------------------------------#
        ## pure rundown variants#
        if (all(tmp.gaps == 1)) {#
            tmp.conn    <- "rd.0g"#
        } else if ( all(tmp.gaps == 2)) {#
            tmp.conn    <- "rd.1g"#
        } else if (all(tmp.gaps == 3)) {#
            tmp.conn    <- "rd.2g"#
        ## connected 2-pair#
        } else if ( (tmp.gaps[1] == 0) & (tmp.gaps[3] == 0) & (tmp.gaps[2] %in% c(1,2,3)) ) {#
            tmp.conn    <- "2p.conn"#
        ## rundown plus pair#
        } else if ( (sum(tmp.gaps==0)==1) & (sum(tmp.gaps==1)==2) ) {#
            tmp.conn    <- "rd.1p"#
        ## single gap rundown#
        } else if ( (sum(tmp.gaps==2)==1) & (sum(tmp.gaps==1)==2) ) {#
            tmp.conn    <- "rd.1g"#
#
        ## double gap rundown#
        } else if ( (sum(tmp.gaps==3)==1) & (sum(tmp.gaps==1)==2) ) {#
            tmp.conn    <- "rd.2g"#
#
        ## triple gap rundown#
        } else if ( (sum(tmp.gaps==4)==1) & (sum(tmp.gaps==1)==2) ) {#
            tmp.conn    <- "rd.3g"#
#
        ## dangler gap rundown#
        } else if ( (sum(tmp.gaps>4)==1) & (sum(tmp.gaps==1)==2) ) {#
            tmp.conn    <- "rd.dg"#
#
        ## 2x single gap rundown#
        } else if ( (sum(tmp.gaps==1)==1) & (sum(tmp.gaps==2)==2) ) {#
            tmp.conn    <- "rd.2x1g"#
#
        ## 2x double gap rundown#
        } else if ( (sum(tmp.gaps==1)==1) & (sum(tmp.gaps==3)==2) ) {#
            tmp.conn    <- "rd.2x2g"#
        ## connected single-pair#
        } else if ( (sum(tmp.gaps==0)==1) & (sum(tmp.gaps==1)==1) & (sum(tmp.gaps==2)==1) ) {#
            tmp.conn    <- "1p.conn"#
        ## default#
        } else {#
            tmp.conn    <- NA#
        }#
        rank.conn[i,]   <- tmp.conn#
        ##------------------------------------------------------------------#
        ## Consolidate gap data#
        ##------------------------------------------------------------------#
        rank.gaps[i,]   <- paste(tmp.gaps, collapse=":")#
#
    }#
    ## consolidate#
    hand.data   <- data.frame(  hand=hand.shape,#
                                suit=suit.shape,#
                                suitCombo=suit.combo,#
                                shapeType=shape.type,#
                                shapeWgt=shape.wgt,#
                                pair=pair.shape,#
                                ranks=pair.ranks,#
                                highCard=high.card,#
                                highSuited=high.suited,#
                                conn=rank.conn,#
                                gaps=rank.gaps)#
#
    colnames(hand.data) <- c("hand","suit","suitCombo","shapeType","shapeWgt","pair","hiPair","loPair","hiCard","hiSuited","conn","gaps")#
    ## return the results#
    return(list(ho=hand.shape, hd=hand.data))#
}#
##------------------------------------------------------------------#
## <main> process hands#
##------------------------------------------------------------------#
#
plo_3max.list   <- processHandFile("ppt_plo_handrankings_03handed.txt")#
save(plo_3max.list, file="ppt_plo_handrankings_03handed.Rdata")#
#
plo_6max.list   <- processHandFile("ppt_plo_handrankings_06handed.txt")#
save(plo_6max.list, file="ppt_plo_handrankings_06handed.Rdata")#
#
plo_10max.list  <- processHandFile("ppt_plo_handrankings_10handed.txt")#
save(plo_10max.list, file="ppt_plo_handrankings_10handed.Rdata")#
#
plo_random.list <- processHandFile("ppt_plo_handrankings_preflop_vs_random.txt")#
save(plo_random.list, file="ppt_plo_handrankings_preflop_vs_random.Rdata")#
##------------------------------------------------------------------#
## Before#
##------------------------------------------------------------------#
## qp:data alexstephens$ head ppt_plo_handrankings_preflop_vs_random.txt#
## (AT)(AT)#
## (AJ)(AJ)#
## (AQ)(AQ)#
##------------------------------------------------------------------#
## After#
##------------------------------------------------------------------#
## qp:data alexstephens$ head ppt_plo_handrankings_preflop_vs_random_genericSyntax.txt#
## "AxTxAyTy"#
## "AxJxAyJy"#
## "AxQxAyQy"
head(plo_6max.list[["hd"]])
a <- plo_6max.list[["hd"]]
length(a)
sum(a$shapeWgt)
##------------------------------------------------------------------#
## Clear the workspace#
##------------------------------------------------------------------#
rm(list=ls())#
#
##------------------------------------------------------------------#
## Load data#
##------------------------------------------------------------------#
#
## 6max simulation data#
setwd("/Users/alexstephens/Development/poker/omaha_hi/data/simulations")#
load("hotColdEquity_6max_OmahiHi_AllHands.Rdata")#
#
## 6max hand attributes#
setwd("/Users/alexstephens/Development/poker/omaha_hi/data/pptoo/OmahaHi")#
load("ppt_plo_handrankings_06handed.Rdata")#
#
##------------------------------------------------------------------#
## append a cumulative %#
##------------------------------------------------------------------#
hand.mat    <- plo_6max.list[["hd"]]
hand.mat[1234,]
eqty.mat    <- res.mat
eqty.mat[1234,]
rownames(eqt.mat)[1234]
rownames(eqty.mat)[1234]
class(hand.mat)
hand.mat        <- plo_6max.list[["hd"]]#
hand.mat$cumwgt <- hand.mat$shapeWgt / sum(hand.mat$shapeWgt)
head(hand.mat)
join.idx    <- match(rownames(eqty.mat), hand.mat$hand)
head(join.idx)
tail(join.idx)
diff(join.idx)
sum(diff(join.idx))
##------------------------------------------------------------------#
## Clear the workspace#
##------------------------------------------------------------------#
rm(list=ls())#
#
##------------------------------------------------------------------#
## Load data#
##------------------------------------------------------------------#
#
## 6max simulation data#
setwd("/Users/alexstephens/Development/poker/omaha_hi/data/simulations")#
load("hotColdEquity_6max_OmahiHi_AllHands.Rdata")#
#
## 6max hand attributes#
setwd("/Users/alexstephens/Development/poker/omaha_hi/data/pptoo/OmahaHi")#
load("ppt_plo_handrankings_06handed.Rdata")#
#
##------------------------------------------------------------------#
## append a cumulative %#
##------------------------------------------------------------------#
hand.mat        <- plo_6max.list[["hd"]]#
hand.mat$cumwgt <- hand.mat$shapeWgt / sum(hand.mat$shapeWgt)#
#
eqty.mat    <- res.mat#
eqty.mat    <- cbind(   eqty.mat,#
                        cumwgt=,#
                        cumpct=1:nrow(res.mat)/nrow(res.mat))#
#
join.idx    <- match(rownames(eqty.mat), hand.mat$hand)#
#
comb.mat    <- cbind(hand.mat, eqty.mat[join.idx,])
##------------------------------------------------------------------#
## Clear the workspace#
##------------------------------------------------------------------#
rm(list=ls())#
#
##------------------------------------------------------------------#
## Load data#
##------------------------------------------------------------------#
#
## 6max simulation data#
setwd("/Users/alexstephens/Development/poker/omaha_hi/data/simulations")#
load("hotColdEquity_6max_OmahiHi_AllHands.Rdata")#
#
## 6max hand attributes#
setwd("/Users/alexstephens/Development/poker/omaha_hi/data/pptoo/OmahaHi")#
load("ppt_plo_handrankings_06handed.Rdata")#
#
##------------------------------------------------------------------#
## append a cumulative %#
##------------------------------------------------------------------#
hand.mat        <- plo_6max.list[["hd"]]#
hand.mat$cumwgt <- hand.mat$shapeWgt / sum(hand.mat$shapeWgt)#
#
eqty.mat    <- res.mat#
eqty.mat    <- cbind(eqty.mat, cumpct=1:nrow(res.mat)/nrow(res.mat))#
#
join.idx    <- match(rownames(eqty.mat), hand.mat$hand)#
#
comb.mat    <- cbind(hand.mat, eqty.mat[join.idx,])
head(comb.mar)
head(comb.mat)
idx <- which(comb.mat[,c("10%")] <= 0.10)
head(id)
head(idx)
idx <- which(comb.mat[,c("cumpct")] <= 0.10)
head(idx)
tail(idx)
sum(comb.mat[idx, c("cumwgt")])
idx <- which(comb.mat[,c("cumpct")] <= 0.20)
sum(comb.mat[idx, c("cumwgt")])
idx <- which(comb.mat[,c("cumpct")] <= 0.50)
sum(comb.mat[idx, c("cumwgt")])
idx <- which(comb.mat[,c("cumpct")] <= 0.70)
sum(comb.mat[idx, c("cumwgt")])
idx <- which(comb.mat[,c("cumpct")] <= 0.80)
sum(comb.mat[idx, c("cumwgt")])
plot(comb.mat$cumwgt)
plot(cumsum(comb.mat$cumwgt))
head(comb.mat)
table(comb.mat$shapeWgt)
table(comb.mat$shapeWgt, comb.mat$suit)
sum(table(comb.mat$shapeWgt, comb.mat$suit))
xtabs(shapeWgt ~ suitCombo, data=comb.mat)
xtabs(shapeWgt ~ suitCombo + pair, data=comb.mat)
sum(xtabs(shapeWgt ~ suitCombo + pair, data=comb.mat))
xtabs(~ suitCombo + pair, data=comb.mat)
xtabs(~ suitCombo + hiCard, data=comb.mat)
sum(comb.mat$cumwgt)
sum(comb.mat$cumpct)
summary(comb.mat$cumpct)
summary(comb.mat$cumwgt)
##------------------------------------------------------------------#
## Clear the workspace#
##------------------------------------------------------------------#
rm(list=ls())#
#
##------------------------------------------------------------------#
## Load data#
##------------------------------------------------------------------#
#
## 6max simulation data#
setwd("/Users/alexstephens/Development/poker/omaha_hi/data/simulations")#
load("hotColdEquity_6max_OmahiHi_AllHands.Rdata")#
#
## 6max hand attributes#
setwd("/Users/alexstephens/Development/poker/omaha_hi/data/pptoo/OmahaHi")#
load("ppt_plo_handrankings_06handed.Rdata")#
#
##------------------------------------------------------------------#
## append a cumulative %#
##------------------------------------------------------------------#
hand.mat        <- plo_6max.list[["hd"]]#
hand.mat$wgt    <- hand.mat$shapeWgt / sum(hand.mat$shapeWgt)#
hand.mat$cumwgt <- cumsum(hand.mat$shapeWgt / sum(hand.mat$shapeWgt))#
#
eqty.mat        <- cbind(res.mat, pct=1/nrow(res.mat), cumpct=cumsum(1/nrow(res.mat)))#
#
join.idx        <- match(rownames(eqty.mat), hand.mat$hand)#
#
comb.mat        <- cbind(hand.mat, eqty.mat[join.idx,])
head(comb.mat)
tail(comb.mat)
##------------------------------------------------------------------#
## Clear the workspace#
##------------------------------------------------------------------#
rm(list=ls())#
#
##------------------------------------------------------------------#
## Load data#
##------------------------------------------------------------------#
#
## 6max simulation data#
setwd("/Users/alexstephens/Development/poker/omaha_hi/data/simulations")#
load("hotColdEquity_6max_OmahiHi_AllHands.Rdata")#
#
## 6max hand attributes#
setwd("/Users/alexstephens/Development/poker/omaha_hi/data/pptoo/OmahaHi")#
load("ppt_plo_handrankings_06handed.Rdata")#
#
##------------------------------------------------------------------#
## append a cumulative %#
##------------------------------------------------------------------#
hand.mat        <- plo_6max.list[["hd"]]#
hand.mat$wgt    <- hand.mat$shapeWgt / sum(hand.mat$shapeWgt)#
hand.mat$cumwgt <- cumsum(hand.mat$shapeWgt / sum(hand.mat$shapeWgt))#
#
eqty.mat        <- cbind(res.mat, pct=1/nrow(res.mat), cumpct=cumsum((1:nrow(res.mat))/nrow(res.mat)))#
#
join.idx        <- match(rownames(eqty.mat), hand.mat$hand)#
#
comb.mat        <- cbind(hand.mat, eqty.mat[join.idx,])
head(comb.mat)
tail(comb.mat)
nrow(res.mat)
##------------------------------------------------------------------#
## Clear the workspace#
##------------------------------------------------------------------#
rm(list=ls())#
#
##------------------------------------------------------------------#
## Load data#
##------------------------------------------------------------------#
#
## 6max simulation data#
setwd("/Users/alexstephens/Development/poker/omaha_hi/data/simulations")#
load("hotColdEquity_6max_OmahiHi_AllHands.Rdata")#
#
## 6max hand attributes#
setwd("/Users/alexstephens/Development/poker/omaha_hi/data/pptoo/OmahaHi")#
load("ppt_plo_handrankings_06handed.Rdata")#
#
##------------------------------------------------------------------#
## append a cumulative %#
##------------------------------------------------------------------#
hand.mat        <- plo_6max.list[["hd"]]#
hand.mat$wgt    <- hand.mat$shapeWgt / sum(hand.mat$shapeWgt)#
hand.mat$cumwgt <- cumsum(hand.mat$shapeWgt / sum(hand.mat$shapeWgt))#
#
eqty.mat        <- cbind(res.mat, pct=1/nrow(res.mat), cumpct=(1:nrow(res.mat))/nrow(res.mat))#
#
join.idx        <- match(rownames(eqty.mat), hand.mat$hand)#
#
comb.mat        <- cbind(hand.mat, eqty.mat[join.idx,])#
''
head(comb.mat)
tail(comb.mat)
plot(comb.mat$cumpct, comb.mat$cumwgt)
hist(comb.mat$shapeWgt)
table(comb.mat$shapeWgt)
xtabs(shapeWgt ~ suitCombo, data=comb.mat)
idx <- which(comb.mat$cumwgt <= 0.10)
length(idx)
a <- comb.mat[idx,]
xtabs(~ suitCombo + pair)
xtabs(~ suitCombo + pair, data=a)
xtabs(~ hiCard, data=a)
xtabs(~ hiCard + hiSuited, data=a)
xtabs(~ hiCard + hiSuited + pair, data=a)
xtabs(~ hiCard + hiSuited + conn, data=a)
xtabs(~ hiCard, data=a)
xtabs(~ hiSuited, data=a)
xtabs(~ suit + hiSuited, data=a)
xtabs(~ suit + suitCombo, data=a)
xtabs(~ suit + , data=a)
xtabs(~ suit + hiCard, data=a)
a[which(suit == "mo"),]
a[which(a$suit == "mo"),]
idx <- which(comb.mat[,c("10%")] >= 0.50)
idx
plot(comb.mat$'5%')
plot(comb.mat$'5%')
abline(h=0.5, col="red")
a <- comb.mat[idx,]
table(a$suit)
table(a$suitCombo)
table(a$suitCombo, a$pair)
table(a$suitCombo, a$hiCard)
head(a)
sum(a$wgt)
sum(a$pct)
table(a$hiPair, a$hiCard)
table(a$hiPair, a$loPair, useNA="always")
xtabs(shapeWgt ~ hiPair + loPair, data=a)
xtabs(shapeWgt ~ hiPair + loPair, data=a)
combin(4,2)
combn(2,4)
combn(4,2)
?combn
choose(4,2)
choose(4,2)*choose(4,2)
a
a[which(a$hiCard == "K"), ]
table(a$hiCard)
table(a$hiCard, a$hiSuited)
table(a$hiCard)/sum(table(a$hiCard))
idx <- which(comb.mat[,c("50%")] >= 0.50)
table(a$hiCard)/sum(table(a$hiCard))
a <- comb.mat[idx,]
table(a$hiCard)/sum(table(a$hiCard))
table(a$hiCard)/sum(table(a$hiCard))*100
idx <- which(comb.mat[,c("75%")] >= 0.50)
a <- comb.mat[idx,]
table(a$hiCard)/sum(table(a$hiCard))*100
b <- a[which(a$hiCard == "9"), ]
b
idx <- which(comb.mat[,c("30%")] >= 0.50)
a <- comb.mat[idx,]
b <- a[which(a$conn == "rd"),]
b
table(a$conn)
b <- a[which(a$conn == "rd.0g"),]
b
q()
