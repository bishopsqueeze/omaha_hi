library(caret)
library(tcltk)
library(caret)
q()
library(caret)
q()
##------------------------------------------------------------------#
## The purpose of this script is to parse the Pro Poker Tools (PPT)#
## hand ranking file #
##------------------------------------------------------------------#
#
##------------------------------------------------------------------#
## Clear the workspace#
##------------------------------------------------------------------#
rm(list=ls())#
#
##------------------------------------------------------------------#
## Set the working directory#
##------------------------------------------------------------------#
setwd("/Users/alexstephens/Development/poker/omaha_hi/data/pptoo/OmahaHi")#
#
##------------------------------------------------------------------#
## The PPT hands Omaha hands have the follow structures#
##------------------------------------------------------------------#
## XYZW#
## (XY)ZW#
## X(YZ)W#
## XY(ZW)#
## (XYZ)W#
## X(YZW)#
## (XYZW)#
## (XY)(ZW)#
##------------------------------------------------------------------#
#
##------------------------------------------------------------------#
## The goal is to convert these into the PPT generic syntax format#
##------------------------------------------------------------------#
## E.g., translate (AJ)(AJ) --> AxJxAyJy (double-suited double-pair)#
##------------------------------------------------------------------#
##------------------------------------------------------------------#
## <function> appendSuits#
##------------------------------------------------------------------#
## Takes a hand character vector, e.g., c("A","J","A","J") and#
## appends a suit character vector, e.g., c("x", "x", "y", "y")#
##------------------------------------------------------------------#
appendSuits <- function(h, s) {#
    return(paste(paste(h,s,sep=""), collapse=""))#
}#
#
##------------------------------------------------------------------#
## <function> rankToNum#
##------------------------------------------------------------------#
## Given a hand (e.g., c("A","J","A","J")), translate the ranks into#
## numerical equivalents (e.g., A=13, K=12, ... 3=2, 2=1)#
##------------------------------------------------------------------#
rankToNum <- function(n, r, hr) {#
    n[match(hr, r)]#
    return(sort(n[match(hr, r)], decreasing=TRUE))#
}
in.file <- "ppt_plo_handrankings_06handed.txt"
## "global" rank/number vectors#
    glob.num     <- seq(13, 1, -1)#
    glob.rank    <- c("A", "K", "Q", "J", "T", "9", "8", "7", "6", "5", "4", "3", "2")#
    ## process the filename#
    tmp.file    <- unlist(strsplit(in.file, "[.]"))#
    out.file    <- paste0(tmp.file[1], "_genericSyntax_DEBUG", ".", tmp.file[2])#
#
    ## read the input file and create an identically-sized output matrix#
    hf          <- read.csv(in.file, header=FALSE)#
    ho          <- matrix(,nrow=nrow(hf), ncol=1)#
    hs          <- matrix(,nrow=nrow(hf), ncol=2)#
    hg          <- matrix(,nrow=nrow(hf), ncol=1)
i <- 1149
## process a hand#
        tmp.ch      <- unlist(strsplit(as.character(hf[i,]), ""))   ## split hand into individual characters#
        tmp.nch     <- length(tmp.ch)                               ## count number of characters#
        tmp.lp      <- which(tmp.ch %in% c("("))                    ## location of left parentheses#
        tmp.rp      <- which(tmp.ch %in% c(")"))                    ## location of right parentheses#
        tmp.ranks   <- tmp.ch[which(!(tmp.ch %in% c("(",")")))]     ## extract ranks#
        ## get hand shape infp#
        tmp.nums    <- rankToNum(glob.num, glob.rank, tmp.ranks)    ## convert ranks to (sorted) numbers#
        tmp.gaps    <- abs(diff(tmp.nums))                          ## calculate gap sizes#
        tmp.unq     <- length(unique(tmp.nums))                     ## number of unique#
        tmp.tbl     <- table(tmp.ranks)#
        ##------------------------------------------------------------------#
        ## the if/then processes the hand based on the length, and#
        ## for single-suited suited hands it will use the location#
        ## of the right and left parentheses to assign the suits#
        ##------------------------------------------------------------------#
        ##------------------------------------------------------------------#
        ## Identity suitedness#
        ##------------------------------------------------------------------#
        ## double suited#
        if (tmp.nch == 8) {#
            tmp.suits   <- c("x","x","y","y")#
            tmp.color   <- c("ds")#
        ## single suited#
        } else if (tmp.nch == 6) {#
            ## (XY)ZW [1,4]#
            if ((tmp.lp == 1) & (tmp.rp == 4)) {#
                tmp.suits   <- c("x","x","y","z")#
                tmp.color   <- c("ss.2o")#
            ## X(YZ)W [2,5]#
            } else if ((tmp.lp == 2) & (tmp.rp == 5)) {#
                tmp.suits   <- c("x","y","y","z")#
                tmp.color   <- c("ss.2o")#
            ## XY(ZW) [3,6]#
            } else if ((tmp.lp == 3) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","y","z","z")#
                tmp.color   <- c("ss.2o")#
            ## (XYZ)W [1,5]#
            } else if ((tmp.lp == 1) & (tmp.rp == 5)) {#
                tmp.suits   <- c("x","x","x","y")#
                tmp.color   <- c("ss.1o")#
            ## X(YZW) [2,6]#
            } else if ((tmp.lp == 2) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","y","y","y")#
                tmp.color   <- c("ss.1o")#
            ## (XYZW) [1,6]#
            } else if ((tmp.lp == 1) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","x","x","x")#
                tmp.color   <- c("mo")#
            }#
        ## rainbow#
        } else if (tmp.nch == 4) {#
            tmp.suits   <- c("x","y","z","w")#
            tmp.color   <- c("rb")#
        ## error#
        } else {#
            stop("unexpected string lenght\n")#
        }
rmp.suits
tmp.suits
tmp.ranks
i
tmp.nums
tmp.gaps
## "global" rank/number vectors#
    glob.num     <- seq(13, 1, -1)#
    glob.rank    <- c("A", "K", "Q", "J", "T", "9", "8", "7", "6", "5", "4", "3", "2")#
    ## process the filename#
    tmp.file    <- unlist(strsplit(in.file, "[.]"))#
    out.file    <- paste0(tmp.file[1], "_genericSyntax_DEBUG", ".", tmp.file[2])#
#
    ## read the input file#
    hf          <- read.csv(in.file, header=FALSE)#
    ## create output matrices#
    ho          <- matrix(,nrow=nrow(hf), ncol=1)#
    hs          <- matrix(,nrow=nrow(hf), ncol=2)#
    hg          <- matrix(,nrow=nrow(hf), ncol=1)#
#
    ## loop over each row in the file and process the ranked hand#
    for (i in 1:nrow(hf)) {#
        ## process a hand#
        tmp.ch      <- unlist(strsplit(as.character(hf[i,]), ""))   ## split hand into individual characters#
        tmp.nch     <- length(tmp.ch)                               ## count number of characters#
        tmp.lp      <- which(tmp.ch %in% c("("))                    ## location of left parentheses#
        tmp.rp      <- which(tmp.ch %in% c(")"))                    ## location of right parentheses#
        tmp.ranks   <- tmp.ch[which(!(tmp.ch %in% c("(",")")))]     ## extract ranks#
        ## get hand shape infp#
        tmp.nums    <- rankToNum(glob.num, glob.rank, tmp.ranks)    ## convert ranks to (sorted) numbers#
        tmp.gaps    <- abs(diff(tmp.nums))                          ## calculate gap sizes#
        tmp.unq     <- length(unique(tmp.nums))                     ## number of unique#
        tmp.tbl     <- table(tmp.ranks)#
        ##------------------------------------------------------------------#
        ## the if/then processes the hand based on the length, and#
        ## for single-suited suited hands it will use the location#
        ## of the right and left parentheses to assign the suits#
        ##------------------------------------------------------------------#
        ##------------------------------------------------------------------#
        ## Identity suitedness#
        ##------------------------------------------------------------------#
        ## double suited#
        if (tmp.nch == 8) {#
            tmp.suits   <- c("x","x","y","y")#
            tmp.color   <- c("ds")#
        ## single suited#
        } else if (tmp.nch == 6) {#
            ## (XY)ZW [1,4]#
            if ((tmp.lp == 1) & (tmp.rp == 4)) {#
                tmp.suits   <- c("x","x","y","z")#
                tmp.color   <- c("ss.2o")#
            ## X(YZ)W [2,5]#
            } else if ((tmp.lp == 2) & (tmp.rp == 5)) {#
                tmp.suits   <- c("x","y","y","z")#
                tmp.color   <- c("ss.2o")#
            ## XY(ZW) [3,6]#
            } else if ((tmp.lp == 3) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","y","z","z")#
                tmp.color   <- c("ss.2o")#
            ## (XYZ)W [1,5]#
            } else if ((tmp.lp == 1) & (tmp.rp == 5)) {#
                tmp.suits   <- c("x","x","x","y")#
                tmp.color   <- c("ss.1o")#
            ## X(YZW) [2,6]#
            } else if ((tmp.lp == 2) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","y","y","y")#
                tmp.color   <- c("ss.1o")#
            ## (XYZW) [1,6]#
            } else if ((tmp.lp == 1) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","x","x","x")#
                tmp.color   <- c("mo")#
            }#
        ## rainbow#
        } else if (tmp.nch == 4) {#
            tmp.suits   <- c("x","y","z","w")#
            tmp.color   <- c("rb")#
        ## error#
        } else {#
            stop("unexpected string lenght\n")#
        }#
    ## insert the hand translated into generic syntax to a matrix#
    ho[i,1]     <- appendSuits(tmp.ranks, tmp.suits)#
    #hs[i,]      <- c(tmp.color, tmp.count)#
    hs[i,]      <- c(tmp.color)#
    #hg[i,1]     <- paste0(tmp.gaps, collapse=":")#
    }#
#
    ## save the output as a file#
    #write.table(ho, file=out.file, row.names=FALSE, col.names=FALSE)#
    #return(list(hf=hf, ho=ho, hs=hs, hg=hg))
head(ho)
head(hs)
table(hs[,1])
## "global" rank/number vectors#
    glob.num     <- seq(13, 1, -1)#
    glob.rank    <- c("A", "K", "Q", "J", "T", "9", "8", "7", "6", "5", "4", "3", "2")#
    ## process the filename#
    tmp.file    <- unlist(strsplit(in.file, "[.]"))#
    out.file    <- paste0(tmp.file[1], "_genericSyntax_DEBUG", ".", tmp.file[2])#
#
    ## read the input file#
    hf          <- read.csv(in.file, header=FALSE)#
    ## create output matrices#
    hand.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    suit.shape  <- matrix(,nrow=nrow(hf), ncol=2)#
    hg          <- matrix(,nrow=nrow(hf), ncol=1)#
#
    ## loop over each row in the file and process the ranked hand#
    for (i in 1:nrow(hf)) {#
        ## process a hand#
        tmp.ch      <- unlist(strsplit(as.character(hf[i,]), ""))   ## split hand into individual characters#
        tmp.nch     <- length(tmp.ch)                               ## count number of characters#
        tmp.lp      <- which(tmp.ch %in% c("("))                    ## location of left parentheses#
        tmp.rp      <- which(tmp.ch %in% c(")"))                    ## location of right parentheses#
        tmp.ranks   <- tmp.ch[which(!(tmp.ch %in% c("(",")")))]     ## extract ranks#
        ## get hand shape infp#
        tmp.nums    <- rankToNum(glob.num, glob.rank, tmp.ranks)    ## convert ranks to (sorted) numbers#
        tmp.gaps    <- abs(diff(tmp.nums))                          ## calculate gap sizes#
        tmp.unq     <- length(unique(tmp.nums))                     ## number of unique#
        tmp.tbl     <- table(tmp.ranks)#
        ##------------------------------------------------------------------#
        ## the if/then processes the hand based on the length, and#
        ## for single-suited suited hands it will use the location#
        ## of the right and left parentheses to assign the suits#
        ##------------------------------------------------------------------#
        ##------------------------------------------------------------------#
        ## Identity suitedness#
        ##------------------------------------------------------------------#
        ## double suited#
        if (tmp.nch == 8) {#
            tmp.suits   <- c("x","x","y","y")#
            tmp.color   <- c("ds")#
        ## single suited#
        } else if (tmp.nch == 6) {#
            ## (XY)ZW [1,4]#
            if ((tmp.lp == 1) & (tmp.rp == 4)) {#
                tmp.suits   <- c("x","x","y","z")#
                tmp.color   <- c("ss.2o")#
            ## X(YZ)W [2,5]#
            } else if ((tmp.lp == 2) & (tmp.rp == 5)) {#
                tmp.suits   <- c("x","y","y","z")#
                tmp.color   <- c("ss.2o")#
            ## XY(ZW) [3,6]#
            } else if ((tmp.lp == 3) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","y","z","z")#
                tmp.color   <- c("ss.2o")#
            ## (XYZ)W [1,5]#
            } else if ((tmp.lp == 1) & (tmp.rp == 5)) {#
                tmp.suits   <- c("x","x","x","y")#
                tmp.color   <- c("ss.1o")#
            ## X(YZW) [2,6]#
            } else if ((tmp.lp == 2) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","y","y","y")#
                tmp.color   <- c("ss.1o")#
            ## (XYZW) [1,6]#
            } else if ((tmp.lp == 1) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","x","x","x")#
                tmp.color   <- c("mo")#
            }#
        ## rainbow#
        } else if (tmp.nch == 4) {#
            tmp.suits   <- c("x","y","z","w")#
            tmp.color   <- c("rb")#
        ## error#
        } else {#
            stop("unexpected string lenght\n")#
        }#
    ## insert the hand translated into generic syntax to a matrix#
    hand.shape[i,1]     <- appendSuits(tmp.ranks, tmp.suits)#
    suit.shape[i,1]     <- c(tmp.color)#
    #hs[i,]      <- c(tmp.color, tmp.count)#
    #hg[i,1]     <- paste0(tmp.gaps, collapse=":")#
    }#
#
    ## save the output as a file#
    #write.table(ho, file=out.file, row.names=FALSE, col.names=FALSE)#
    #return(list(hf=hf, ho=ho, hs=hs, hg=hg))
table(hand.shape)
table(suit.shape)
## "global" rank/number vectors#
    glob.num     <- seq(13, 1, -1)#
    glob.rank    <- c("A", "K", "Q", "J", "T", "9", "8", "7", "6", "5", "4", "3", "2")#
    ## process the filename#
    tmp.file    <- unlist(strsplit(in.file, "[.]"))#
    out.file    <- paste0(tmp.file[1], "_genericSyntax_DEBUG", ".", tmp.file[2])#
#
    ## read the input file#
    hf          <- read.csv(in.file, header=FALSE)#
    ## create output matrices#
    hand.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    suit.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    pair.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
#
    ## loop over each row in the file and process the ranked hand#
    for (i in 1:nrow(hf)) {#
        ## process a hand#
        tmp.ch      <- unlist(strsplit(as.character(hf[i,]), ""))   ## split hand into individual characters#
        tmp.nch     <- length(tmp.ch)                               ## count number of characters#
        tmp.lp      <- which(tmp.ch %in% c("("))                    ## location of left parentheses#
        tmp.rp      <- which(tmp.ch %in% c(")"))                    ## location of right parentheses#
        tmp.ranks   <- tmp.ch[which(!(tmp.ch %in% c("(",")")))]     ## extract ranks#
        ## get hand shape infp#
        tmp.nums    <- rankToNum(glob.num, glob.rank, tmp.ranks)    ## convert ranks to (sorted) numbers#
        tmp.gaps    <- abs(diff(tmp.nums))                          ## calculate gap sizes#
        tmp.unq     <- length(unique(tmp.nums))                     ## number of unique#
        tmp.tbl     <- table(tmp.ranks)#
        ##------------------------------------------------------------------#
        ## the if/then processes the hand based on the length, and#
        ## for single-suited suited hands it will use the location#
        ## of the right and left parentheses to assign the suits#
        ##------------------------------------------------------------------#
        ##------------------------------------------------------------------#
        ## Deconstruct suits and identify suit shapes#
        ##------------------------------------------------------------------#
        ## double suited#
        if (tmp.nch == 8) {#
            tmp.suits   <- c("x","x","y","y")#
            tmp.color   <- c("ds")#
        ## single suited#
        } else if (tmp.nch == 6) {#
            ## (XY)ZW [1,4]#
            if ((tmp.lp == 1) & (tmp.rp == 4)) {#
                tmp.suits   <- c("x","x","y","z")#
                tmp.color   <- c("ss.2o")#
            ## X(YZ)W [2,5]#
            } else if ((tmp.lp == 2) & (tmp.rp == 5)) {#
                tmp.suits   <- c("x","y","y","z")#
                tmp.color   <- c("ss.2o")#
            ## XY(ZW) [3,6]#
            } else if ((tmp.lp == 3) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","y","z","z")#
                tmp.color   <- c("ss.2o")#
            ## (XYZ)W [1,5]#
            } else if ((tmp.lp == 1) & (tmp.rp == 5)) {#
                tmp.suits   <- c("x","x","x","y")#
                tmp.color   <- c("ss.1o")#
            ## X(YZW) [2,6]#
            } else if ((tmp.lp == 2) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","y","y","y")#
                tmp.color   <- c("ss.1o")#
            ## (XYZW) [1,6]#
            } else if ((tmp.lp == 1) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","x","x","x")#
                tmp.color   <- c("mo")#
            }#
        ## rainbow#
        } else if (tmp.nch == 4) {#
            tmp.suits   <- c("x","y","z","w")#
            tmp.color   <- c("rb")#
        ## error#
        } else {#
            stop("unexpected string lenght\n")#
        }#
        ##------------------------------------------------------------------#
        ## Identify pair types#
        ##------------------------------------------------------------------#
        if (max(tmp.tbl) == 4) {#
            tmp.count   <- c("4k")#
        } else if (max(tmp.tbl) == 3) {#
            tmp.count   <- c("3k")#
        } else if (max(tmp.tbl == 2)) {#
            if (tmp.unq == 2) {#
                tmp.count   <- c("2p")#
            } else {#
                tmp.count   <- c("1p")#
            }#
        } else {#
            tmp.count   <- c("0p")#
        }#
    ## insert the hand translated into generic syntax to a matrix#
    hand.shape[i,1]     <- appendSuits(tmp.ranks, tmp.suits)#
    suit.shape[i,1]     <- tmp.color#
    pair.shape[i,1]     <- tmp.count#
    #hs[i,]      <- c(tmp.color, tmp.count)#
    #hg[i,1]     <- paste0(tmp.gaps, collapse=":")#
    }#
#
    ## save the output as a file#
    #write.table(ho, file=out.file, row.names=FALSE, col.names=FALSE)#
    #return(list(hf=hf, ho=ho, hs=hs, hg=hg))
table(pair.shape)
table(pair.shape, suit.shape)
ls()
tmp.ranks
max(tmp.ranks)
glob.rank
glob.num
i <- 1
## process a hand#
        tmp.ch      <- unlist(strsplit(as.character(hf[i,]), ""))   ## split hand into individual characters#
        tmp.nch     <- length(tmp.ch)                               ## count number of characters#
        tmp.lp      <- which(tmp.ch %in% c("("))                    ## location of left parentheses#
        tmp.rp      <- which(tmp.ch %in% c(")"))                    ## location of right parentheses#
        tmp.ranks   <- tmp.ch[which(!(tmp.ch %in% c("(",")")))]     ## extract ranks#
        ## get hand shape infp#
        tmp.nums    <- rankToNum(glob.num, glob.rank, tmp.ranks)    ## convert ranks to (sorted) numbers#
        tmp.gaps    <- abs(diff(tmp.nums))                          ## calculate gap sizes#
        tmp.unq     <- length(unique(tmp.nums))                     ## number of unique#
        tmp.tbl     <- table(tmp.ranks)
tmp.ranks
tmp.nums
max(tmp.nums)
which(glob.num == max(tmp.nums))
glob.rank[which(glob.num == max(tmp.nums))]
##------------------------------------------------------------------#
        ## Deconstruct suits and identify suit shapes#
        ##------------------------------------------------------------------#
        ## double suited#
        if (tmp.nch == 8) {#
            tmp.suits   <- c("x","x","y","y")#
            tmp.color   <- c("ds")#
        ## single suited#
        } else if (tmp.nch == 6) {#
            ## (XY)ZW [1,4]#
            if ((tmp.lp == 1) & (tmp.rp == 4)) {#
                tmp.suits   <- c("x","x","y","z")#
                tmp.color   <- c("ss.2o")#
            ## X(YZ)W [2,5]#
            } else if ((tmp.lp == 2) & (tmp.rp == 5)) {#
                tmp.suits   <- c("x","y","y","z")#
                tmp.color   <- c("ss.2o")#
            ## XY(ZW) [3,6]#
            } else if ((tmp.lp == 3) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","y","z","z")#
                tmp.color   <- c("ss.2o")#
            ## (XYZ)W [1,5]#
            } else if ((tmp.lp == 1) & (tmp.rp == 5)) {#
                tmp.suits   <- c("x","x","x","y")#
                tmp.color   <- c("ss.1o")#
            ## X(YZW) [2,6]#
            } else if ((tmp.lp == 2) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","y","y","y")#
                tmp.color   <- c("ss.1o")#
            ## (XYZW) [1,6]#
            } else if ((tmp.lp == 1) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","x","x","x")#
                tmp.color   <- c("mo")#
            }#
        ## rainbow#
        } else if (tmp.nch == 4) {#
            tmp.suits   <- c("x","y","z","w")#
            tmp.color   <- c("rb")#
        ## error#
        } else {#
            stop("unexpected string lenght\n")#
        }
tmp.suits
tmp.color
appendSuits(tmp.ranks, tmp.suits)
tmp.ch
tmp.ranks
tmp.high
tmp.high    <- glob.rank[which(glob.num == max(tmp.nums))]
tmp.hist
tmp.high
which(tmp.high %in% tmp.ranks)
which(tmp.ranks %in% tmp.high)
which(tmp.ranks %in% tmp.high)
tmp.suits[which(tmp.ranks %in% tmp.high)]
hi.suits        <- tmp.suits[which(tmp.ranks %in% tmp.high)]#
        non.hi.suits    <- tmp.suits[which(!(tmp.ranks %in% tmp.high))]
hi.suits
non.hi.suits
which(hi.suits %in% non.hi.suits)
length(which(hi.suits %in% non.hi.suits))
##------------------------------------------------------------------#
        ## Identify high card#
        ##------------------------------------------------------------------#
        tmp.hi  <- glob.rank[which(glob.num == max(tmp.nums))]#
        ##------------------------------------------------------------------#
        ## Identify high card#
        ##------------------------------------------------------------------#
        ## get suits tied to the high card#
        hi.suits        <- tmp.suits[which(tmp.ranks %in% tmp.high)]#
        non.hi.suits    <- tmp.suits[which(!(tmp.ranks %in% tmp.high))]#
        if (length(which(hi.suits %in% non.hi.suits)) > 0) {#
            tmp.hi.suited   <- "Y"#
        } else {#
            tmp.hi.suited   <- "N"#
        }
tmp.hi.suited
tmp.hi
tmp.ch
## process a hand#
        tmp.ch      <- unlist(strsplit(as.character(hf[i,]), ""))   ## split hand into individual characters#
        tmp.nch     <- length(tmp.ch)                               ## count number of characters#
        tmp.lp      <- which(tmp.ch %in% c("("))                    ## location of left parentheses#
        tmp.rp      <- which(tmp.ch %in% c(")"))                    ## location of right parentheses#
        tmp.ranks   <- tmp.ch[which(!(tmp.ch %in% c("(",")")))]     ## extract ranks#
        ## get hand shape infp#
        tmp.nums    <- rankToNum(glob.num, glob.rank, tmp.ranks)    ## convert ranks to (sorted) numbers#
        tmp.gaps    <- abs(diff(tmp.nums))                          ## calculate gap sizes#
        tmp.unq     <- length(unique(tmp.nums))                     ## number of unique#
        tmp.tbl     <- table(tmp.ranks)#
        ##------------------------------------------------------------------#
        ## the if/then processes the hand based on the length, and#
        ## for single-suited suited hands it will use the location#
        ## of the right and left parentheses to assign the suits#
        ##------------------------------------------------------------------#
        ##------------------------------------------------------------------#
        ## Deconstruct suits and identify suit shapes#
        ##------------------------------------------------------------------#
        ## double suited#
        if (tmp.nch == 8) {#
            tmp.suits   <- c("x","x","y","y")#
            tmp.color   <- c("ds")#
        ## single suited#
        } else if (tmp.nch == 6) {#
            ## (XY)ZW [1,4]#
            if ((tmp.lp == 1) & (tmp.rp == 4)) {#
                tmp.suits   <- c("x","x","y","z")#
                tmp.color   <- c("ss.2o")#
            ## X(YZ)W [2,5]#
            } else if ((tmp.lp == 2) & (tmp.rp == 5)) {#
                tmp.suits   <- c("x","y","y","z")#
                tmp.color   <- c("ss.2o")#
            ## XY(ZW) [3,6]#
            } else if ((tmp.lp == 3) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","y","z","z")#
                tmp.color   <- c("ss.2o")#
            ## (XYZ)W [1,5]#
            } else if ((tmp.lp == 1) & (tmp.rp == 5)) {#
                tmp.suits   <- c("x","x","x","y")#
                tmp.color   <- c("ss.1o")#
            ## X(YZW) [2,6]#
            } else if ((tmp.lp == 2) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","y","y","y")#
                tmp.color   <- c("ss.1o")#
            ## (XYZW) [1,6]#
            } else if ((tmp.lp == 1) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","x","x","x")#
                tmp.color   <- c("mo")#
            }#
        ## rainbow#
        } else if (tmp.nch == 4) {#
            tmp.suits   <- c("x","y","z","w")#
            tmp.color   <- c("rb")#
        ## error#
        } else {#
            stop("unexpected string lenght\n")#
        }#
        hand.shape[i,1]     <- appendSuits(tmp.ranks, tmp.suits)#
        suit.shape[i,1]     <- tmp.color#
        ##------------------------------------------------------------------#
        ## Identify pair types#
        ##------------------------------------------------------------------#
        if (max(tmp.tbl) == 4) {#
            tmp.count   <- c("4k")#
        } else if (max(tmp.tbl) == 3) {#
            tmp.count   <- c("3k")#
        } else if (max(tmp.tbl == 2)) {#
            if (tmp.unq == 2) {#
                tmp.count   <- c("2p")#
            } else {#
                tmp.count   <- c("1p")#
            }#
        } else {#
            tmp.count   <- c("0p")#
        }#
        pair.shape[i,1]     <- tmp.count#
        ##------------------------------------------------------------------#
        ## Identify high card#
        ##------------------------------------------------------------------#
        high.card[i,]  <- glob.rank[which(glob.num == max(tmp.nums))]#
        ##------------------------------------------------------------------#
        ## Identify high card#
        ##------------------------------------------------------------------#
        ## get suits tied to the high card#
        hi.suits        <- tmp.suits[which(tmp.ranks %in% tmp.high)]#
        non.hi.suits    <- tmp.suits[which(!(tmp.ranks %in% tmp.high))]#
        if (length(which(hi.suits %in% non.hi.suits)) > 0) {#
            high.suited[i,] <- "Y"#
        } else {#
            high.suited[i,] <- "N"#
        }
## "global" rank/number vectors#
    glob.num     <- seq(13, 1, -1)#
    glob.rank    <- c("A", "K", "Q", "J", "T", "9", "8", "7", "6", "5", "4", "3", "2")#
    ## process the filename#
    tmp.file    <- unlist(strsplit(in.file, "[.]"))#
    out.file    <- paste0(tmp.file[1], "_genericSyntax_DEBUG", ".", tmp.file[2])#
#
    ## read the input file#
    hf          <- read.csv(in.file, header=FALSE)#
    ## create output matrices#
    hand.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    suit.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    pair.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    high.card   <- matrix(,nrow=nrow(hf), ncol=1)#
    high.suited <- matrix(,nrow=nrow(hf), ncol=1)
## "global" rank/number vectors#
    glob.num     <- seq(13, 1, -1)#
    glob.rank    <- c("A", "K", "Q", "J", "T", "9", "8", "7", "6", "5", "4", "3", "2")#
    ## process the filename#
    tmp.file    <- unlist(strsplit(in.file, "[.]"))#
    out.file    <- paste0(tmp.file[1], "_genericSyntax_DEBUG", ".", tmp.file[2])#
#
    ## read the input file#
    hf          <- read.csv(in.file, header=FALSE)#
    ## create output matrices#
    hand.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    suit.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    pair.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    high.card   <- matrix(,nrow=nrow(hf), ncol=1)#
    high.suited <- matrix(,nrow=nrow(hf), ncol=1)#
#
    ## loop over each row in the file and process the ranked hand#
    for (i in 1:nrow(hf)) {#
        ## process a hand#
        tmp.ch      <- unlist(strsplit(as.character(hf[i,]), ""))   ## split hand into individual characters#
        tmp.nch     <- length(tmp.ch)                               ## count number of characters#
        tmp.lp      <- which(tmp.ch %in% c("("))                    ## location of left parentheses#
        tmp.rp      <- which(tmp.ch %in% c(")"))                    ## location of right parentheses#
        tmp.ranks   <- tmp.ch[which(!(tmp.ch %in% c("(",")")))]     ## extract ranks#
        ## get hand shape infp#
        tmp.nums    <- rankToNum(glob.num, glob.rank, tmp.ranks)    ## convert ranks to (sorted) numbers#
        tmp.gaps    <- abs(diff(tmp.nums))                          ## calculate gap sizes#
        tmp.unq     <- length(unique(tmp.nums))                     ## number of unique#
        tmp.tbl     <- table(tmp.ranks)#
        ##------------------------------------------------------------------#
        ## the if/then processes the hand based on the length, and#
        ## for single-suited suited hands it will use the location#
        ## of the right and left parentheses to assign the suits#
        ##------------------------------------------------------------------#
        ##------------------------------------------------------------------#
        ## Deconstruct suits and identify suit shapes#
        ##------------------------------------------------------------------#
        ## double suited#
        if (tmp.nch == 8) {#
            tmp.suits   <- c("x","x","y","y")#
            tmp.color   <- c("ds")#
        ## single suited#
        } else if (tmp.nch == 6) {#
            ## (XY)ZW [1,4]#
            if ((tmp.lp == 1) & (tmp.rp == 4)) {#
                tmp.suits   <- c("x","x","y","z")#
                tmp.color   <- c("ss.2o")#
            ## X(YZ)W [2,5]#
            } else if ((tmp.lp == 2) & (tmp.rp == 5)) {#
                tmp.suits   <- c("x","y","y","z")#
                tmp.color   <- c("ss.2o")#
            ## XY(ZW) [3,6]#
            } else if ((tmp.lp == 3) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","y","z","z")#
                tmp.color   <- c("ss.2o")#
            ## (XYZ)W [1,5]#
            } else if ((tmp.lp == 1) & (tmp.rp == 5)) {#
                tmp.suits   <- c("x","x","x","y")#
                tmp.color   <- c("ss.1o")#
            ## X(YZW) [2,6]#
            } else if ((tmp.lp == 2) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","y","y","y")#
                tmp.color   <- c("ss.1o")#
            ## (XYZW) [1,6]#
            } else if ((tmp.lp == 1) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","x","x","x")#
                tmp.color   <- c("mo")#
            }#
        ## rainbow#
        } else if (tmp.nch == 4) {#
            tmp.suits   <- c("x","y","z","w")#
            tmp.color   <- c("rb")#
        ## error#
        } else {#
            stop("unexpected string lenght\n")#
        }#
        hand.shape[i,1]     <- appendSuits(tmp.ranks, tmp.suits)#
        suit.shape[i,1]     <- tmp.color#
        ##------------------------------------------------------------------#
        ## Identify pair types#
        ##------------------------------------------------------------------#
        if (max(tmp.tbl) == 4) {#
            tmp.count   <- c("4k")#
        } else if (max(tmp.tbl) == 3) {#
            tmp.count   <- c("3k")#
        } else if (max(tmp.tbl == 2)) {#
            if (tmp.unq == 2) {#
                tmp.count   <- c("2p")#
            } else {#
                tmp.count   <- c("1p")#
            }#
        } else {#
            tmp.count   <- c("0p")#
        }#
        pair.shape[i,1]     <- tmp.count#
        ##------------------------------------------------------------------#
        ## Identify high card#
        ##------------------------------------------------------------------#
        high.card[i,]  <- glob.rank[which(glob.num == max(tmp.nums))]#
        ##------------------------------------------------------------------#
        ## Identify high card#
        ##------------------------------------------------------------------#
        ## get suits tied to the high card#
        hi.suits        <- tmp.suits[which(tmp.ranks %in% tmp.high)]#
        non.hi.suits    <- tmp.suits[which(!(tmp.ranks %in% tmp.high))]#
        if (length(which(hi.suits %in% non.hi.suits)) > 0) {#
            high.suited[i,] <- "Y"#
        } else {#
            high.suited[i,] <- "N"#
        }#
    }
table(high.suited)
table(high.card)
table(high.card, high.suited)
sum(table(high.card, high.suited))
table(high.suited)
table(high.suited, suit.shape)
ho[1140:1150,]
cbind(ho[1140:1150,], high.suited[1140:1150,])
cbind(ho[1140:1150,], high.suited[1140:1150,], high.card[1140:1150,])
cbind(ho[1147:1150,], high.suited[1147:1150,], high.card[1147:1150,])
i <- 1147
## process a hand#
        tmp.ch      <- unlist(strsplit(as.character(hf[i,]), ""))   ## split hand into individual characters#
        tmp.nch     <- length(tmp.ch)                               ## count number of characters#
        tmp.lp      <- which(tmp.ch %in% c("("))                    ## location of left parentheses#
        tmp.rp      <- which(tmp.ch %in% c(")"))                    ## location of right parentheses#
        tmp.ranks   <- tmp.ch[which(!(tmp.ch %in% c("(",")")))]     ## extract ranks#
        ## get hand shape infp#
        tmp.nums    <- rankToNum(glob.num, glob.rank, tmp.ranks)    ## convert ranks to (sorted) numbers#
        tmp.gaps    <- abs(diff(tmp.nums))                          ## calculate gap sizes#
        tmp.unq     <- length(unique(tmp.nums))                     ## number of unique#
        tmp.tbl     <- table(tmp.ranks)#
        ##------------------------------------------------------------------#
        ## the if/then processes the hand based on the length, and#
        ## for single-suited suited hands it will use the location#
        ## of the right and left parentheses to assign the suits#
        ##------------------------------------------------------------------#
        ##------------------------------------------------------------------#
        ## Deconstruct suits and identify suit shapes#
        ##------------------------------------------------------------------#
        ## double suited#
        if (tmp.nch == 8) {#
            tmp.suits   <- c("x","x","y","y")#
            tmp.color   <- c("ds")#
        ## single suited#
        } else if (tmp.nch == 6) {#
            ## (XY)ZW [1,4]#
            if ((tmp.lp == 1) & (tmp.rp == 4)) {#
                tmp.suits   <- c("x","x","y","z")#
                tmp.color   <- c("ss.2o")#
            ## X(YZ)W [2,5]#
            } else if ((tmp.lp == 2) & (tmp.rp == 5)) {#
                tmp.suits   <- c("x","y","y","z")#
                tmp.color   <- c("ss.2o")#
            ## XY(ZW) [3,6]#
            } else if ((tmp.lp == 3) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","y","z","z")#
                tmp.color   <- c("ss.2o")#
            ## (XYZ)W [1,5]#
            } else if ((tmp.lp == 1) & (tmp.rp == 5)) {#
                tmp.suits   <- c("x","x","x","y")#
                tmp.color   <- c("ss.1o")#
            ## X(YZW) [2,6]#
            } else if ((tmp.lp == 2) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","y","y","y")#
                tmp.color   <- c("ss.1o")#
            ## (XYZW) [1,6]#
            } else if ((tmp.lp == 1) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","x","x","x")#
                tmp.color   <- c("mo")#
            }#
        ## rainbow#
        } else if (tmp.nch == 4) {#
            tmp.suits   <- c("x","y","z","w")#
            tmp.color   <- c("rb")#
        ## error#
        } else {#
            stop("unexpected string lenght\n")#
        }#
        hand.shape[i,1]     <- appendSuits(tmp.ranks, tmp.suits)#
        suit.shape[i,1]     <- tmp.color#
        ##------------------------------------------------------------------#
        ## Identify pair types#
        ##------------------------------------------------------------------#
        if (max(tmp.tbl) == 4) {#
            tmp.count   <- c("4k")#
        } else if (max(tmp.tbl) == 3) {#
            tmp.count   <- c("3k")#
        } else if (max(tmp.tbl == 2)) {#
            if (tmp.unq == 2) {#
                tmp.count   <- c("2p")#
            } else {#
                tmp.count   <- c("1p")#
            }#
        } else {#
            tmp.count   <- c("0p")#
        }#
        pair.shape[i,1]     <- tmp.count#
        ##------------------------------------------------------------------#
        ## Identify high card#
        ##------------------------------------------------------------------#
        high.card[i,]  <- glob.rank[which(glob.num == max(tmp.nums))]#
        ##------------------------------------------------------------------#
        ## Identify high card#
        ##------------------------------------------------------------------#
        ## get suits tied to the high card#
        hi.suits        <- tmp.suits[which(tmp.ranks %in% tmp.high)]#
        non.hi.suits    <- tmp.suits[which(!(tmp.ranks %in% tmp.high))]#
        if (length(which(hi.suits %in% non.hi.suits)) > 0) {#
            high.suited[i,] <- "Y"#
        } else {#
            high.suited[i,] <- "N"#
        }
high.card
## "global" rank/number vectors#
    glob.num     <- seq(13, 1, -1)#
    glob.rank    <- c("A", "K", "Q", "J", "T", "9", "8", "7", "6", "5", "4", "3", "2")#
    ## process the filename#
    tmp.file    <- unlist(strsplit(in.file, "[.]"))#
    out.file    <- paste0(tmp.file[1], "_genericSyntax_DEBUG", ".", tmp.file[2])#
#
    ## read the input file#
    hf          <- read.csv(in.file, header=FALSE)#
    ## create output matrices#
    hand.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    suit.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    pair.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    high.card   <- matrix(,nrow=nrow(hf), ncol=1)#
    high.suited <- matrix(,nrow=nrow(hf), ncol=1)#
#
    ## loop over each row in the file and process the ranked hand#
    #for (i in 1:nrow(hf)) {#
    for (i in 1:1147) {#
        ## process a hand#
        tmp.ch      <- unlist(strsplit(as.character(hf[i,]), ""))   ## split hand into individual characters#
        tmp.nch     <- length(tmp.ch)                               ## count number of characters#
        tmp.lp      <- which(tmp.ch %in% c("("))                    ## location of left parentheses#
        tmp.rp      <- which(tmp.ch %in% c(")"))                    ## location of right parentheses#
        tmp.ranks   <- tmp.ch[which(!(tmp.ch %in% c("(",")")))]     ## extract ranks#
        ## get hand shape infp#
        tmp.nums    <- rankToNum(glob.num, glob.rank, tmp.ranks)    ## convert ranks to (sorted) numbers#
        tmp.gaps    <- abs(diff(tmp.nums))                          ## calculate gap sizes#
        tmp.unq     <- length(unique(tmp.nums))                     ## number of unique#
        tmp.tbl     <- table(tmp.ranks)#
        ##------------------------------------------------------------------#
        ## the if/then processes the hand based on the length, and#
        ## for single-suited suited hands it will use the location#
        ## of the right and left parentheses to assign the suits#
        ##------------------------------------------------------------------#
        ##------------------------------------------------------------------#
        ## Deconstruct suits and identify suit shapes#
        ##------------------------------------------------------------------#
        ## double suited#
        if (tmp.nch == 8) {#
            tmp.suits   <- c("x","x","y","y")#
            tmp.color   <- c("ds")#
        ## single suited#
        } else if (tmp.nch == 6) {#
            ## (XY)ZW [1,4]#
            if ((tmp.lp == 1) & (tmp.rp == 4)) {#
                tmp.suits   <- c("x","x","y","z")#
                tmp.color   <- c("ss.2o")#
            ## X(YZ)W [2,5]#
            } else if ((tmp.lp == 2) & (tmp.rp == 5)) {#
                tmp.suits   <- c("x","y","y","z")#
                tmp.color   <- c("ss.2o")#
            ## XY(ZW) [3,6]#
            } else if ((tmp.lp == 3) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","y","z","z")#
                tmp.color   <- c("ss.2o")#
            ## (XYZ)W [1,5]#
            } else if ((tmp.lp == 1) & (tmp.rp == 5)) {#
                tmp.suits   <- c("x","x","x","y")#
                tmp.color   <- c("ss.1o")#
            ## X(YZW) [2,6]#
            } else if ((tmp.lp == 2) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","y","y","y")#
                tmp.color   <- c("ss.1o")#
            ## (XYZW) [1,6]#
            } else if ((tmp.lp == 1) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","x","x","x")#
                tmp.color   <- c("mo")#
            }#
        ## rainbow#
        } else if (tmp.nch == 4) {#
            tmp.suits   <- c("x","y","z","w")#
            tmp.color   <- c("rb")#
        ## error#
        } else {#
            stop("unexpected string lenght\n")#
        }#
        hand.shape[i,1]     <- appendSuits(tmp.ranks, tmp.suits)#
        suit.shape[i,1]     <- tmp.color#
        ##------------------------------------------------------------------#
        ## Identify pair types#
        ##------------------------------------------------------------------#
        if (max(tmp.tbl) == 4) {#
            tmp.count   <- c("4k")#
        } else if (max(tmp.tbl) == 3) {#
            tmp.count   <- c("3k")#
        } else if (max(tmp.tbl == 2)) {#
            if (tmp.unq == 2) {#
                tmp.count   <- c("2p")#
            } else {#
                tmp.count   <- c("1p")#
            }#
        } else {#
            tmp.count   <- c("0p")#
        }#
        pair.shape[i,1]     <- tmp.count#
        ##------------------------------------------------------------------#
        ## Identify high card#
        ##------------------------------------------------------------------#
        high.card[i,]  <- glob.rank[which(glob.num == max(tmp.nums))]#
        ##------------------------------------------------------------------#
        ## Identify high card#
        ##------------------------------------------------------------------#
        ## get suits tied to the high card#
        hi.suits        <- tmp.suits[which(tmp.ranks %in% tmp.high)]#
        non.hi.suits    <- tmp.suits[which(!(tmp.ranks %in% tmp.high))]#
        if (length(which(hi.suits %in% non.hi.suits)) > 0) {#
            high.suited[i,] <- "Y"#
        } else {#
            high.suited[i,] <- "N"#
        }#
    }
high.card
high.card[1147,]
high.suited[1147,]
high.suits
hi.suits
tmp.ranks
tmp.high
## "global" rank/number vectors#
    glob.num     <- seq(13, 1, -1)#
    glob.rank    <- c("A", "K", "Q", "J", "T", "9", "8", "7", "6", "5", "4", "3", "2")#
    ## process the filename#
    tmp.file    <- unlist(strsplit(in.file, "[.]"))#
    out.file    <- paste0(tmp.file[1], "_genericSyntax_DEBUG", ".", tmp.file[2])#
#
    ## read the input file#
    hf          <- read.csv(in.file, header=FALSE)#
    ## create output matrices#
    hand.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    suit.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    pair.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    high.card   <- matrix(,nrow=nrow(hf), ncol=1)#
    high.suited <- matrix(,nrow=nrow(hf), ncol=1)#
#
    ## loop over each row in the file and process the ranked hand#
    for (i in 1:nrow(hf)) {#
        #for (i in 1:1147) {#
        ## process a hand#
        tmp.ch      <- unlist(strsplit(as.character(hf[i,]), ""))   ## split hand into individual characters#
        tmp.nch     <- length(tmp.ch)                               ## count number of characters#
        tmp.lp      <- which(tmp.ch %in% c("("))                    ## location of left parentheses#
        tmp.rp      <- which(tmp.ch %in% c(")"))                    ## location of right parentheses#
        tmp.ranks   <- tmp.ch[which(!(tmp.ch %in% c("(",")")))]     ## extract ranks#
        ## get hand shape infp#
        tmp.nums    <- rankToNum(glob.num, glob.rank, tmp.ranks)    ## convert ranks to (sorted) numbers#
        tmp.gaps    <- abs(diff(tmp.nums))                          ## calculate gap sizes#
        tmp.unq     <- length(unique(tmp.nums))                     ## number of unique#
        tmp.tbl     <- table(tmp.ranks)#
        ##------------------------------------------------------------------#
        ## the if/then processes the hand based on the length, and#
        ## for single-suited suited hands it will use the location#
        ## of the right and left parentheses to assign the suits#
        ##------------------------------------------------------------------#
        ##------------------------------------------------------------------#
        ## Deconstruct suits and identify suit shapes#
        ##------------------------------------------------------------------#
        ## double suited#
        if (tmp.nch == 8) {#
            tmp.suits   <- c("x","x","y","y")#
            tmp.color   <- c("ds")#
        ## single suited#
        } else if (tmp.nch == 6) {#
            ## (XY)ZW [1,4]#
            if ((tmp.lp == 1) & (tmp.rp == 4)) {#
                tmp.suits   <- c("x","x","y","z")#
                tmp.color   <- c("ss.2o")#
            ## X(YZ)W [2,5]#
            } else if ((tmp.lp == 2) & (tmp.rp == 5)) {#
                tmp.suits   <- c("x","y","y","z")#
                tmp.color   <- c("ss.2o")#
            ## XY(ZW) [3,6]#
            } else if ((tmp.lp == 3) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","y","z","z")#
                tmp.color   <- c("ss.2o")#
            ## (XYZ)W [1,5]#
            } else if ((tmp.lp == 1) & (tmp.rp == 5)) {#
                tmp.suits   <- c("x","x","x","y")#
                tmp.color   <- c("ss.1o")#
            ## X(YZW) [2,6]#
            } else if ((tmp.lp == 2) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","y","y","y")#
                tmp.color   <- c("ss.1o")#
            ## (XYZW) [1,6]#
            } else if ((tmp.lp == 1) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","x","x","x")#
                tmp.color   <- c("mo")#
            }#
        ## rainbow#
        } else if (tmp.nch == 4) {#
            tmp.suits   <- c("x","y","z","w")#
            tmp.color   <- c("rb")#
        ## error#
        } else {#
            stop("unexpected string lenght\n")#
        }#
        hand.shape[i,1]     <- appendSuits(tmp.ranks, tmp.suits)#
        suit.shape[i,1]     <- tmp.color#
        ##------------------------------------------------------------------#
        ## Identify pair types#
        ##------------------------------------------------------------------#
        if (max(tmp.tbl) == 4) {#
            tmp.count   <- c("4k")#
        } else if (max(tmp.tbl) == 3) {#
            tmp.count   <- c("3k")#
        } else if (max(tmp.tbl == 2)) {#
            if (tmp.unq == 2) {#
                tmp.count   <- c("2p")#
            } else {#
                tmp.count   <- c("1p")#
            }#
        } else {#
            tmp.count   <- c("0p")#
        }#
        pair.shape[i,1]     <- tmp.count#
        ##------------------------------------------------------------------#
        ## Identify high card#
        ##------------------------------------------------------------------#
        high.card[i,]  <- glob.rank[which(glob.num == max(tmp.nums))]#
        ##------------------------------------------------------------------#
        ## Identify high card#
        ##------------------------------------------------------------------#
        ## get suits tied to the high card#
        hi.suits        <- tmp.suits[which(tmp.ranks %in% high.card[i,])]#
        non.hi.suits    <- tmp.suits[which(!(tmp.ranks %in% high.card[i,]))]#
        if (length(which(hi.suits %in% non.hi.suits)) > 0) {#
            high.suited[i,] <- "Y"#
        } else {#
            high.suited[i,] <- "N"#
        }#
    }#
    ## save the output as a file#
    #write.table(ho, file=out.file, row.names=FALSE, col.names=FALSE)
table(high.card, high.suited)
cbind(ho[1147:1150,], high.suited[1147:1150,], high.card[1147:1150,])
ho[which(high.card=="3")]
table(pair.shape)
table(high.card, pair.shape)
tmp.tbl
names(tmp.ranks)
names(tmp.tbl)
which(names(tmp.tbl) %in% glob.rank)
glob.rank
whci(glob.rank %in% names(tmp.tbl))
which(glob.rank %in% names(tmp.tbl))
tmp.tbl
names(tmp.tbl)
which(glob.rank %in% names(tmp.tbl))
which(glob.rank %in% names(tmp.tbl))
max(which(glob.rank %in% names(tmp.tbl)))
tmp.tbl
tmp.tbl > 2
tmp.tbl >= 2
i <- 1149
## "global" rank/number vectors#
    glob.num     <- seq(13, 1, -1)#
    glob.rank    <- c("A", "K", "Q", "J", "T", "9", "8", "7", "6", "5", "4", "3", "2")#
    ## process the filename#
    tmp.file    <- unlist(strsplit(in.file, "[.]"))#
    out.file    <- paste0(tmp.file[1], "_genericSyntax_DEBUG", ".", tmp.file[2])#
#
    ## read the input file#
    hf          <- read.csv(in.file, header=FALSE)#
    ## create output matrices#
    hand.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    suit.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    pair.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    high.card   <- matrix(,nrow=nrow(hf), ncol=1)#
    high.suited <- matrix(,nrow=nrow(hf), ncol=1)
## process a hand#
        tmp.ch      <- unlist(strsplit(as.character(hf[i,]), ""))   ## split hand into individual characters#
        tmp.nch     <- length(tmp.ch)                               ## count number of characters#
        tmp.lp      <- which(tmp.ch %in% c("("))                    ## location of left parentheses#
        tmp.rp      <- which(tmp.ch %in% c(")"))                    ## location of right parentheses#
        tmp.ranks   <- tmp.ch[which(!(tmp.ch %in% c("(",")")))]     ## extract ranks#
        ## get hand shape infp#
        tmp.nums    <- rankToNum(glob.num, glob.rank, tmp.ranks)    ## convert ranks to (sorted) numbers#
        tmp.gaps    <- abs(diff(tmp.nums))                          ## calculate gap sizes#
        tmp.unq     <- length(unique(tmp.nums))                     ## number of unique#
        tmp.tbl     <- table(tmp.ranks)
tmp.tbl
tmp.tbl > 2
tmp.tbl >= 2
names(tmp.tbl >= 2)
tmp.tbl[tmp.tbl >= 2]
names(tmp.tbl[tmp.tbl >= 2])
##------------------------------------------------------------------#
        ## Identify pair types#
        ##------------------------------------------------------------------#
        if (max(tmp.tbl) == 4) {#
            tmp.count   <- c("4k")#
            tmp.hipair  <- glob.rank[max(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
        } else if (max(tmp.tbl) == 3) {#
            tmp.count   <- c("3k")#
            tmp.hipair  <- glob.rank[max(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
        } else if (max(tmp.tbl == 2)) {#
            if (tmp.unq == 2) {#
                tmp.count   <- c("2p")#
                tmp.hipair  <- glob.rank[max(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
            } else {#
                tmp.count   <- c("1p")#
                tmp.hipair  <- glob.rank[max(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
            }#
        } else {#
            tmp.count   <- c("0p")#
            tmp.hipair  <- NA#
        }
tmp.count
tmp.hipair
## "global" rank/number vectors#
    glob.num     <- seq(13, 1, -1)#
    glob.rank    <- c("A", "K", "Q", "J", "T", "9", "8", "7", "6", "5", "4", "3", "2")#
    ## process the filename#
    tmp.file    <- unlist(strsplit(in.file, "[.]"))#
    out.file    <- paste0(tmp.file[1], "_genericSyntax_DEBUG", ".", tmp.file[2])#
#
    ## read the input file#
    hf          <- read.csv(in.file, header=FALSE)#
    ## create output matrices#
    hand.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    suit.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    pair.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    pair.ranks  <- matrix(,nrow=nrow(hf), ncol=2)#
    high.card   <- matrix(,nrow=nrow(hf), ncol=1)#
    high.suited <- matrix(,nrow=nrow(hf), ncol=1)#
#
    ## loop over each row in the file and process the ranked hand#
    for (i in 1:nrow(hf)) {#
        #for (i in 1:1147) {#
        ## process a hand#
        tmp.ch      <- unlist(strsplit(as.character(hf[i,]), ""))   ## split hand into individual characters#
        tmp.nch     <- length(tmp.ch)                               ## count number of characters#
        tmp.lp      <- which(tmp.ch %in% c("("))                    ## location of left parentheses#
        tmp.rp      <- which(tmp.ch %in% c(")"))                    ## location of right parentheses#
        tmp.ranks   <- tmp.ch[which(!(tmp.ch %in% c("(",")")))]     ## extract ranks#
        ## get hand shape infp#
        tmp.nums    <- rankToNum(glob.num, glob.rank, tmp.ranks)    ## convert ranks to (sorted) numbers#
        tmp.gaps    <- abs(diff(tmp.nums))                          ## calculate gap sizes#
        tmp.unq     <- length(unique(tmp.nums))                     ## number of unique#
        tmp.tbl     <- table(tmp.ranks)#
        ##------------------------------------------------------------------#
        ## the if/then processes the hand based on the length, and#
        ## for single-suited suited hands it will use the location#
        ## of the right and left parentheses to assign the suits#
        ##------------------------------------------------------------------#
        ##------------------------------------------------------------------#
        ## Deconstruct suits and identify suit shapes#
        ##------------------------------------------------------------------#
        ## double suited#
        if (tmp.nch == 8) {#
            tmp.suits   <- c("x","x","y","y")#
            tmp.color   <- c("ds")#
        ## single suited#
        } else if (tmp.nch == 6) {#
            ## (XY)ZW [1,4]#
            if ((tmp.lp == 1) & (tmp.rp == 4)) {#
                tmp.suits   <- c("x","x","y","z")#
                tmp.color   <- c("ss.2o")#
            ## X(YZ)W [2,5]#
            } else if ((tmp.lp == 2) & (tmp.rp == 5)) {#
                tmp.suits   <- c("x","y","y","z")#
                tmp.color   <- c("ss.2o")#
            ## XY(ZW) [3,6]#
            } else if ((tmp.lp == 3) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","y","z","z")#
                tmp.color   <- c("ss.2o")#
            ## (XYZ)W [1,5]#
            } else if ((tmp.lp == 1) & (tmp.rp == 5)) {#
                tmp.suits   <- c("x","x","x","y")#
                tmp.color   <- c("ss.1o")#
            ## X(YZW) [2,6]#
            } else if ((tmp.lp == 2) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","y","y","y")#
                tmp.color   <- c("ss.1o")#
            ## (XYZW) [1,6]#
            } else if ((tmp.lp == 1) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","x","x","x")#
                tmp.color   <- c("mo")#
            }#
        ## rainbow#
        } else if (tmp.nch == 4) {#
            tmp.suits   <- c("x","y","z","w")#
            tmp.color   <- c("rb")#
        ## error#
        } else {#
            stop("unexpected string lenght\n")#
        }#
        hand.shape[i,1]     <- appendSuits(tmp.ranks, tmp.suits)#
        suit.shape[i,1]     <- tmp.color#
        ##------------------------------------------------------------------#
        ## Identify pair types#
        ##------------------------------------------------------------------#
        if (max(tmp.tbl) == 4) {#
            tmp.count   <- c("4k")#
            tmp.hipair  <- glob.rank[max(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
            tmp.lopair  <- NA#
        } else if (max(tmp.tbl) == 3) {#
            tmp.count   <- c("3k")#
            tmp.hipair  <- glob.rank[max(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
            tmp.lopair  <- NA#
        } else if (max(tmp.tbl == 2)) {#
            if (tmp.unq == 2) {#
                tmp.count   <- c("2p")#
                tmp.hipair  <- glob.rank[max(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
                tmp.lopair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
            } else {#
                tmp.count   <- c("1p")#
                tmp.hipair  <- glob.rank[max(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
                tmp.lopair  <- NA#
            }#
        } else {#
            tmp.count   <- c("0p")#
            tmp.hipair  <- NA#
        }#
        pair.shape[i,1]     <- tmp.count#
        pair.ranks[i,]      <- c(tmp.hipair, tmp.lopair)#
        ##------------------------------------------------------------------#
        ## Identify high card#
        ##------------------------------------------------------------------#
        high.card[i,]  <- glob.rank[which(glob.num == max(tmp.nums))]#
        ##------------------------------------------------------------------#
        ## Identify high card#
        ##------------------------------------------------------------------#
        ## get suits tied to the high card#
        hi.suits        <- tmp.suits[which(tmp.ranks %in% high.card[i,])]#
        non.hi.suits    <- tmp.suits[which(!(tmp.ranks %in% high.card[i,]))]#
        if (length(which(hi.suits %in% non.hi.suits)) > 0) {#
            high.suited[i,] <- "Y"#
        } else {#
            high.suited[i,] <- "N"#
        }#
    }
table(pair.shape)
table(pair.shape, pair.ranks)
table(pair.shape, pair.ranks[,1])
table(pair.shape, pair.ranks[,2])
table(pair.shape, pair.ranks[,2], useNA="always")
table(pair.shape, useNA="always")
## "global" rank/number vectors#
    glob.num     <- seq(13, 1, -1)#
    glob.rank    <- c("A", "K", "Q", "J", "T", "9", "8", "7", "6", "5", "4", "3", "2")#
    ## process the filename#
    tmp.file    <- unlist(strsplit(in.file, "[.]"))#
    out.file    <- paste0(tmp.file[1], "_genericSyntax_DEBUG", ".", tmp.file[2])#
#
    ## read the input file#
    hf          <- read.csv(in.file, header=FALSE)#
    ## create output matrices#
    hand.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    suit.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    pair.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    pair.ranks  <- matrix(,nrow=nrow(hf), ncol=2)#
    high.card   <- matrix(,nrow=nrow(hf), ncol=1)#
    high.suited <- matrix(,nrow=nrow(hf), ncol=1)#
#
    ## loop over each row in the file and process the ranked hand#
    for (i in 1:nrow(hf)) {#
        #for (i in 1:1147) {#
        ## process a hand#
        tmp.ch      <- unlist(strsplit(as.character(hf[i,]), ""))   ## split hand into individual characters#
        tmp.nch     <- length(tmp.ch)                               ## count number of characters#
        tmp.lp      <- which(tmp.ch %in% c("("))                    ## location of left parentheses#
        tmp.rp      <- which(tmp.ch %in% c(")"))                    ## location of right parentheses#
        tmp.ranks   <- tmp.ch[which(!(tmp.ch %in% c("(",")")))]     ## extract ranks#
        ## get hand shape infp#
        tmp.nums    <- rankToNum(glob.num, glob.rank, tmp.ranks)    ## convert ranks to (sorted) numbers#
        tmp.gaps    <- abs(diff(tmp.nums))                          ## calculate gap sizes#
        tmp.unq     <- length(unique(tmp.nums))                     ## number of unique#
        tmp.tbl     <- table(tmp.ranks)#
        ##------------------------------------------------------------------#
        ## the if/then processes the hand based on the length, and#
        ## for single-suited suited hands it will use the location#
        ## of the right and left parentheses to assign the suits#
        ##------------------------------------------------------------------#
        ##------------------------------------------------------------------#
        ## Deconstruct suits and identify suit shapes#
        ##------------------------------------------------------------------#
        ## double suited#
        if (tmp.nch == 8) {#
            tmp.suits   <- c("x","x","y","y")#
            tmp.color   <- c("ds")#
        ## single suited#
        } else if (tmp.nch == 6) {#
            ## (XY)ZW [1,4]#
            if ((tmp.lp == 1) & (tmp.rp == 4)) {#
                tmp.suits   <- c("x","x","y","z")#
                tmp.color   <- c("ss.2o")#
            ## X(YZ)W [2,5]#
            } else if ((tmp.lp == 2) & (tmp.rp == 5)) {#
                tmp.suits   <- c("x","y","y","z")#
                tmp.color   <- c("ss.2o")#
            ## XY(ZW) [3,6]#
            } else if ((tmp.lp == 3) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","y","z","z")#
                tmp.color   <- c("ss.2o")#
            ## (XYZ)W [1,5]#
            } else if ((tmp.lp == 1) & (tmp.rp == 5)) {#
                tmp.suits   <- c("x","x","x","y")#
                tmp.color   <- c("ss.1o")#
            ## X(YZW) [2,6]#
            } else if ((tmp.lp == 2) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","y","y","y")#
                tmp.color   <- c("ss.1o")#
            ## (XYZW) [1,6]#
            } else if ((tmp.lp == 1) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","x","x","x")#
                tmp.color   <- c("mo")#
            }#
        ## rainbow#
        } else if (tmp.nch == 4) {#
            tmp.suits   <- c("x","y","z","w")#
            tmp.color   <- c("rb")#
        ## error#
        } else {#
            stop("unexpected string lenght\n")#
        }#
        hand.shape[i,1]     <- appendSuits(tmp.ranks, tmp.suits)#
        suit.shape[i,1]     <- tmp.color#
        ##------------------------------------------------------------------#
        ## Identify pair types#
        ##------------------------------------------------------------------#
        if (max(tmp.tbl) == 4) {#
            tmp.count   <- c("4k")#
            tmp.hipair  <- glob.rank[max(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
            tmp.lopair  <- NA#
        } else if (max(tmp.tbl) == 3) {#
            tmp.count   <- c("3k")#
            tmp.hipair  <- glob.rank[max(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
            tmp.lopair  <- NA#
        } else if (max(tmp.tbl == 2)) {#
            if (tmp.unq == 2) {#
                tmp.count   <- c("2p")#
                tmp.hipair  <- glob.rank[max(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
                tmp.lopair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
            } else {#
                tmp.count   <- c("1p")#
                tmp.hipair  <- glob.rank[max(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
                tmp.lopair  <- NA#
            }#
        } else {#
            tmp.count   <- c("0p")#
            tmp.hipair  <- NA#
            tmp.lopair  <- NA#
        }#
        pair.shape[i,1]     <- tmp.count#
        pair.ranks[i,]      <- c(tmp.hipair, tmp.lopair)#
        ##------------------------------------------------------------------#
        ## Identify high card#
        ##------------------------------------------------------------------#
        high.card[i,]  <- glob.rank[which(glob.num == max(tmp.nums))]#
        ##------------------------------------------------------------------#
        ## Identify high card#
        ##------------------------------------------------------------------#
        ## get suits tied to the high card#
        hi.suits        <- tmp.suits[which(tmp.ranks %in% high.card[i,])]#
        non.hi.suits    <- tmp.suits[which(!(tmp.ranks %in% high.card[i,]))]#
        if (length(which(hi.suits %in% non.hi.suits)) > 0) {#
            high.suited[i,] <- "Y"#
        } else {#
            high.suited[i,] <- "N"#
        }#
    }
table(pair.shape, useNA="always")
table(pair.ranks[,2], pair.shape, useNA="always")
table(pair.ranks[,1], pair.shape, useNA="always")
cbind(ho[1140:1150,])
cbind(ho[140:150,])
cbind(ho[140:150,], pair.ranks[140:150,])
cbind(ho[140:150,], pair.shape[140:150,], pair.ranks[140:150,])
cbind(ho[1400:1500,], pair.shape[1400:1500,], pair.ranks[1400:1500,])
## "global" rank/number vectors#
    glob.num     <- seq(13, 1, -1)#
    glob.rank    <- c("A", "K", "Q", "J", "T", "9", "8", "7", "6", "5", "4", "3", "2")#
    ## process the filename#
    tmp.file    <- unlist(strsplit(in.file, "[.]"))#
    out.file    <- paste0(tmp.file[1], "_genericSyntax_DEBUG", ".", tmp.file[2])#
#
    ## read the input file#
    hf          <- read.csv(in.file, header=FALSE)#
    ## create output matrices#
    hand.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    suit.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    pair.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    pair.ranks  <- matrix(,nrow=nrow(hf), ncol=2)#
    high.card   <- matrix(,nrow=nrow(hf), ncol=1)#
    high.suited <- matrix(,nrow=nrow(hf), ncol=1)#
#
    ## loop over each row in the file and process the ranked hand#
    for (i in 1:nrow(hf)) {#
        #for (i in 1:1147) {#
        ## process a hand#
        tmp.ch      <- unlist(strsplit(as.character(hf[i,]), ""))   ## split hand into individual characters#
        tmp.nch     <- length(tmp.ch)                               ## count number of characters#
        tmp.lp      <- which(tmp.ch %in% c("("))                    ## location of left parentheses#
        tmp.rp      <- which(tmp.ch %in% c(")"))                    ## location of right parentheses#
        tmp.ranks   <- tmp.ch[which(!(tmp.ch %in% c("(",")")))]     ## extract ranks#
        ## get hand shape infp#
        tmp.nums    <- rankToNum(glob.num, glob.rank, tmp.ranks)    ## convert ranks to (sorted) numbers#
        tmp.gaps    <- abs(diff(tmp.nums))                          ## calculate gap sizes#
        tmp.unq     <- length(unique(tmp.nums))                     ## number of unique#
        tmp.tbl     <- table(tmp.ranks)#
        ##------------------------------------------------------------------#
        ## the if/then processes the hand based on the length, and#
        ## for single-suited suited hands it will use the location#
        ## of the right and left parentheses to assign the suits#
        ##------------------------------------------------------------------#
        ##------------------------------------------------------------------#
        ## Deconstruct suits and identify suit shapes#
        ##------------------------------------------------------------------#
        ## double suited#
        if (tmp.nch == 8) {#
            tmp.suits   <- c("x","x","y","y")#
            tmp.color   <- c("ds")#
        ## single suited#
        } else if (tmp.nch == 6) {#
            ## (XY)ZW [1,4]#
            if ((tmp.lp == 1) & (tmp.rp == 4)) {#
                tmp.suits   <- c("x","x","y","z")#
                tmp.color   <- c("ss.2o")#
            ## X(YZ)W [2,5]#
            } else if ((tmp.lp == 2) & (tmp.rp == 5)) {#
                tmp.suits   <- c("x","y","y","z")#
                tmp.color   <- c("ss.2o")#
            ## XY(ZW) [3,6]#
            } else if ((tmp.lp == 3) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","y","z","z")#
                tmp.color   <- c("ss.2o")#
            ## (XYZ)W [1,5]#
            } else if ((tmp.lp == 1) & (tmp.rp == 5)) {#
                tmp.suits   <- c("x","x","x","y")#
                tmp.color   <- c("ss.1o")#
            ## X(YZW) [2,6]#
            } else if ((tmp.lp == 2) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","y","y","y")#
                tmp.color   <- c("ss.1o")#
            ## (XYZW) [1,6]#
            } else if ((tmp.lp == 1) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","x","x","x")#
                tmp.color   <- c("mo")#
            }#
        ## rainbow#
        } else if (tmp.nch == 4) {#
            tmp.suits   <- c("x","y","z","w")#
            tmp.color   <- c("rb")#
        ## error#
        } else {#
            stop("unexpected string lenght\n")#
        }#
        hand.shape[i,1]     <- appendSuits(tmp.ranks, tmp.suits)#
        suit.shape[i,1]     <- tmp.color#
        ##------------------------------------------------------------------#
        ## Identify pair types#
        ##------------------------------------------------------------------#
        if (max(tmp.tbl) == 4) {#
            tmp.count   <- c("4k")#
            tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
            tmp.lopair  <- NA#
        } else if (max(tmp.tbl) == 3) {#
            tmp.count   <- c("3k")#
            tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
            tmp.lopair  <- NA#
        } else if (max(tmp.tbl == 2)) {#
            if (tmp.unq == 2) {#
                tmp.count   <- c("2p")#
                tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
                tmp.lopair  <- glob.rank[max(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
            } else {#
                tmp.count   <- c("1p")#
                tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
                tmp.lopair  <- NA#
            }#
        } else {#
            tmp.count   <- c("0p")#
            tmp.hipair  <- NA#
            tmp.lopair  <- NA#
        }#
        pair.shape[i,1]     <- tmp.count#
        pair.ranks[i,]      <- c(tmp.hipair, tmp.lopair)#
        ##------------------------------------------------------------------#
        ## Identify high card#
        ##------------------------------------------------------------------#
        high.card[i,]  <- glob.rank[which(glob.num == max(tmp.nums))]#
        ##------------------------------------------------------------------#
        ## Identify high card#
        ##------------------------------------------------------------------#
        ## get suits tied to the high card#
        hi.suits        <- tmp.suits[which(tmp.ranks %in% high.card[i,])]#
        non.hi.suits    <- tmp.suits[which(!(tmp.ranks %in% high.card[i,]))]#
        if (length(which(hi.suits %in% non.hi.suits)) > 0) {#
            high.suited[i,] <- "Y"#
        } else {#
            high.suited[i,] <- "N"#
        }#
    }
cbind(ho[1400:1500,], pair.shape[1400:1500,], pair.ranks[1400:1500,])
table(high.card)
table(pair.shape)
table(pair.shape, pair.ranks[,1])
table(pair.shape, pair.ranks[,2])
table(pair.shape, pair.ranks[,2], useNA="always")
which(pair.ranks[,2]=="K")
ho[which(pair.ranks[,2]=="K"),]
high.suited[which(pair.ranks[,2]=="K")]
tmp.gaps
tmp.gaps %in% c(c(0,0,0))
tmp.gaps %in% c(0,0,0)
tmp.gaps == c(0,0,0)
tmp.gaps
class(tmp.gaps)
tmp.gaps
tmp.gaps %in% c(1,2)
tmp.gaps %in% c(0,1)
## "global" rank/number vectors#
    glob.num     <- seq(13, 1, -1)#
    glob.rank    <- c("A", "K", "Q", "J", "T", "9", "8", "7", "6", "5", "4", "3", "2")#
    ## process the filename#
    tmp.file    <- unlist(strsplit(in.file, "[.]"))#
    out.file    <- paste0(tmp.file[1], "_genericSyntax_DEBUG", ".", tmp.file[2])#
#
    ## read the input file#
    hf          <- read.csv(in.file, header=FALSE)#
    ## create output matrices#
    hand.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    suit.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    pair.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    pair.ranks  <- matrix(,nrow=nrow(hf), ncol=2)#
    high.card   <- matrix(,nrow=nrow(hf), ncol=1)#
    high.suited <- matrix(,nrow=nrow(hf), ncol=1)#
    rank.conn   <- matrix(,nrow=nrow(hf), ncol=1)#
#
    ## loop over each row in the file and process the ranked hand#
    for (i in 1:nrow(hf)) {#
        #for (i in 1:1147) {#
        ## process a hand#
        tmp.ch      <- unlist(strsplit(as.character(hf[i,]), ""))   ## split hand into individual characters#
        tmp.nch     <- length(tmp.ch)                               ## count number of characters#
        tmp.lp      <- which(tmp.ch %in% c("("))                    ## location of left parentheses#
        tmp.rp      <- which(tmp.ch %in% c(")"))                    ## location of right parentheses#
        tmp.ranks   <- tmp.ch[which(!(tmp.ch %in% c("(",")")))]     ## extract ranks#
        ## get hand shape infp#
        tmp.nums    <- rankToNum(glob.num, glob.rank, tmp.ranks)    ## convert ranks to (sorted) numbers#
        tmp.gaps    <- abs(diff(tmp.nums))                          ## calculate gap sizes#
        tmp.unq     <- length(unique(tmp.nums))                     ## number of unique#
        tmp.tbl     <- table(tmp.ranks)#
        ##------------------------------------------------------------------#
        ## the if/then processes the hand based on the length, and#
        ## for single-suited suited hands it will use the location#
        ## of the right and left parentheses to assign the suits#
        ##------------------------------------------------------------------#
        ##------------------------------------------------------------------#
        ## Deconstruct suits and identify suit shapes#
        ##------------------------------------------------------------------#
        ## double suited#
        if (tmp.nch == 8) {#
            tmp.suits   <- c("x","x","y","y")#
            tmp.color   <- c("ds")#
        ## single suited#
        } else if (tmp.nch == 6) {#
            ## (XY)ZW [1,4]#
            if ((tmp.lp == 1) & (tmp.rp == 4)) {#
                tmp.suits   <- c("x","x","y","z")#
                tmp.color   <- c("ss.2o")#
            ## X(YZ)W [2,5]#
            } else if ((tmp.lp == 2) & (tmp.rp == 5)) {#
                tmp.suits   <- c("x","y","y","z")#
                tmp.color   <- c("ss.2o")#
            ## XY(ZW) [3,6]#
            } else if ((tmp.lp == 3) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","y","z","z")#
                tmp.color   <- c("ss.2o")#
            ## (XYZ)W [1,5]#
            } else if ((tmp.lp == 1) & (tmp.rp == 5)) {#
                tmp.suits   <- c("x","x","x","y")#
                tmp.color   <- c("ss.1o")#
            ## X(YZW) [2,6]#
            } else if ((tmp.lp == 2) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","y","y","y")#
                tmp.color   <- c("ss.1o")#
            ## (XYZW) [1,6]#
            } else if ((tmp.lp == 1) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","x","x","x")#
                tmp.color   <- c("mo")#
            }#
        ## rainbow#
        } else if (tmp.nch == 4) {#
            tmp.suits   <- c("x","y","z","w")#
            tmp.color   <- c("rb")#
        ## error#
        } else {#
            stop("unexpected string lenght\n")#
        }#
        hand.shape[i,1]     <- appendSuits(tmp.ranks, tmp.suits)#
        suit.shape[i,1]     <- tmp.color#
        ##------------------------------------------------------------------#
        ## Identify pair types#
        ##------------------------------------------------------------------#
        if (max(tmp.tbl) == 4) {#
            tmp.count   <- c("4k")#
            tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
            tmp.lopair  <- NA#
        } else if (max(tmp.tbl) == 3) {#
            tmp.count   <- c("3k")#
            tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
            tmp.lopair  <- NA#
        } else if (max(tmp.tbl == 2)) {#
            if (tmp.unq == 2) {#
                tmp.count   <- c("2p")#
                tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
                tmp.lopair  <- glob.rank[max(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
            } else {#
                tmp.count   <- c("1p")#
                tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
                tmp.lopair  <- NA#
            }#
        } else {#
            tmp.count   <- c("0p")#
            tmp.hipair  <- NA#
            tmp.lopair  <- NA#
        }#
        pair.shape[i,1]     <- tmp.count#
        pair.ranks[i,]      <- c(tmp.hipair, tmp.lopair)#
        ##------------------------------------------------------------------#
        ## Identify high card#
        ##------------------------------------------------------------------#
        high.card[i,]  <- glob.rank[which(glob.num == max(tmp.nums))]#
        ##------------------------------------------------------------------#
        ## Identify high card#
        ##------------------------------------------------------------------#
        ## get suits tied to the high card#
        hi.suits        <- tmp.suits[which(tmp.ranks %in% high.card[i,])]#
        non.hi.suits    <- tmp.suits[which(!(tmp.ranks %in% high.card[i,]))]#
        if (length(which(hi.suits %in% non.hi.suits)) > 0) {#
            high.suited[i,] <- "Y"#
        } else {#
            high.suited[i,] <- "N"#
        }#
        ##------------------------------------------------------------------#
        ## Identify connectedness#
        ##------------------------------------------------------------------#
        if (all(tmp.gaps) == 1) {#
            tmp.conn    <- "rd.0g"#
        } else if (all(tmp.gaps == 2)) {#
            tmp.conn    <- "rd.1g"#
        } else if (all(tmp.gaps == 3)) {#
            tmp.conn    <- "rd.2g"#
        ## connected 2-pair#
        } else if ( (sum(tmp.gaps == 0) == 2) &  (sum(tmp.gaps <= 4) == 3) ) {#
            tmp.conn    <- "2p.conn"#
        }#
        } else {#
            tmp.conn    <- NA#
        }#
        rank.conn[i,]   <- tmp.conn#
    }
## "global" rank/number vectors#
    glob.num     <- seq(13, 1, -1)#
    glob.rank    <- c("A", "K", "Q", "J", "T", "9", "8", "7", "6", "5", "4", "3", "2")#
    ## process the filename#
    tmp.file    <- unlist(strsplit(in.file, "[.]"))#
    out.file    <- paste0(tmp.file[1], "_genericSyntax_DEBUG", ".", tmp.file[2])#
#
    ## read the input file#
    hf          <- read.csv(in.file, header=FALSE)#
    ## create output matrices#
    hand.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    suit.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    pair.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    pair.ranks  <- matrix(,nrow=nrow(hf), ncol=2)#
    high.card   <- matrix(,nrow=nrow(hf), ncol=1)#
    high.suited <- matrix(,nrow=nrow(hf), ncol=1)#
    rank.conn   <- matrix(,nrow=nrow(hf), ncol=1)#
#
    ## loop over each row in the file and process the ranked hand#
    for (i in 1:nrow(hf)) {#
        #for (i in 1:1147) {#
        ## process a hand#
        tmp.ch      <- unlist(strsplit(as.character(hf[i,]), ""))   ## split hand into individual characters#
        tmp.nch     <- length(tmp.ch)                               ## count number of characters#
        tmp.lp      <- which(tmp.ch %in% c("("))                    ## location of left parentheses#
        tmp.rp      <- which(tmp.ch %in% c(")"))                    ## location of right parentheses#
        tmp.ranks   <- tmp.ch[which(!(tmp.ch %in% c("(",")")))]     ## extract ranks#
        ## get hand shape infp#
        tmp.nums    <- rankToNum(glob.num, glob.rank, tmp.ranks)    ## convert ranks to (sorted) numbers#
        tmp.gaps    <- abs(diff(tmp.nums))                          ## calculate gap sizes#
        tmp.unq     <- length(unique(tmp.nums))                     ## number of unique#
        tmp.tbl     <- table(tmp.ranks)#
        ##------------------------------------------------------------------#
        ## the if/then processes the hand based on the length, and#
        ## for single-suited suited hands it will use the location#
        ## of the right and left parentheses to assign the suits#
        ##------------------------------------------------------------------#
        ##------------------------------------------------------------------#
        ## Deconstruct suits and identify suit shapes#
        ##------------------------------------------------------------------#
        ## double suited#
        if (tmp.nch == 8) {#
            tmp.suits   <- c("x","x","y","y")#
            tmp.color   <- c("ds")#
        ## single suited#
        } else if (tmp.nch == 6) {#
            ## (XY)ZW [1,4]#
            if ((tmp.lp == 1) & (tmp.rp == 4)) {#
                tmp.suits   <- c("x","x","y","z")#
                tmp.color   <- c("ss.2o")#
            ## X(YZ)W [2,5]#
            } else if ((tmp.lp == 2) & (tmp.rp == 5)) {#
                tmp.suits   <- c("x","y","y","z")#
                tmp.color   <- c("ss.2o")#
            ## XY(ZW) [3,6]#
            } else if ((tmp.lp == 3) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","y","z","z")#
                tmp.color   <- c("ss.2o")#
            ## (XYZ)W [1,5]#
            } else if ((tmp.lp == 1) & (tmp.rp == 5)) {#
                tmp.suits   <- c("x","x","x","y")#
                tmp.color   <- c("ss.1o")#
            ## X(YZW) [2,6]#
            } else if ((tmp.lp == 2) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","y","y","y")#
                tmp.color   <- c("ss.1o")#
            ## (XYZW) [1,6]#
            } else if ((tmp.lp == 1) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","x","x","x")#
                tmp.color   <- c("mo")#
            }#
        ## rainbow#
        } else if (tmp.nch == 4) {#
            tmp.suits   <- c("x","y","z","w")#
            tmp.color   <- c("rb")#
        ## error#
        } else {#
            stop("unexpected string lenght\n")#
        }#
        hand.shape[i,1]     <- appendSuits(tmp.ranks, tmp.suits)#
        suit.shape[i,1]     <- tmp.color#
        ##------------------------------------------------------------------#
        ## Identify pair types#
        ##------------------------------------------------------------------#
        if (max(tmp.tbl) == 4) {#
            tmp.count   <- c("4k")#
            tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
            tmp.lopair  <- NA#
        } else if (max(tmp.tbl) == 3) {#
            tmp.count   <- c("3k")#
            tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
            tmp.lopair  <- NA#
        } else if (max(tmp.tbl == 2)) {#
            if (tmp.unq == 2) {#
                tmp.count   <- c("2p")#
                tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
                tmp.lopair  <- glob.rank[max(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
            } else {#
                tmp.count   <- c("1p")#
                tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
                tmp.lopair  <- NA#
            }#
        } else {#
            tmp.count   <- c("0p")#
            tmp.hipair  <- NA#
            tmp.lopair  <- NA#
        }#
        pair.shape[i,1]     <- tmp.count#
        pair.ranks[i,]      <- c(tmp.hipair, tmp.lopair)#
        ##------------------------------------------------------------------#
        ## Identify high card#
        ##------------------------------------------------------------------#
        high.card[i,]  <- glob.rank[which(glob.num == max(tmp.nums))]#
        ##------------------------------------------------------------------#
        ## Identify high card#
        ##------------------------------------------------------------------#
        ## get suits tied to the high card#
        hi.suits        <- tmp.suits[which(tmp.ranks %in% high.card[i,])]#
        non.hi.suits    <- tmp.suits[which(!(tmp.ranks %in% high.card[i,]))]#
        if (length(which(hi.suits %in% non.hi.suits)) > 0) {#
            high.suited[i,] <- "Y"#
        } else {#
            high.suited[i,] <- "N"#
        }#
        ##------------------------------------------------------------------#
        ## Identify connectedness#
        ##------------------------------------------------------------------#
        if (all(tmp.gaps) == 1) {#
            tmp.conn    <- "rd.0g"#
        } else if (all(tmp.gaps == 2)) {#
            tmp.conn    <- "rd.1g"#
        } else if (all(tmp.gaps == 3)) {#
            tmp.conn    <- "rd.2g"#
        ## connected 2-pair#
        } else if ( (sum(tmp.gaps == 0) == 2) &  (sum(tmp.gaps <= 4) == 3) ) {#
            tmp.conn    <- "2p.conn"#
        } else {#
            tmp.conn    <- NA#
        }#
        rank.conn[i,]   <- tmp.conn#
    }
warnings()
tmp.gaps <= 4
all(all(tmp.gaps == 3)
all(tmp.gaps == 3
)
tmp.gaps
all(tmp.gaps == 30)
all(tmp.gaps == 0)
table(rank.conn)
## "global" rank/number vectors#
    glob.num     <- seq(13, 1, -1)#
    glob.rank    <- c("A", "K", "Q", "J", "T", "9", "8", "7", "6", "5", "4", "3", "2")#
    ## process the filename#
    tmp.file    <- unlist(strsplit(in.file, "[.]"))#
    out.file    <- paste0(tmp.file[1], "_genericSyntax_DEBUG", ".", tmp.file[2])#
#
    ## read the input file#
    hf          <- read.csv(in.file, header=FALSE)#
    ## create output matrices#
    hand.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    suit.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    pair.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    pair.ranks  <- matrix(,nrow=nrow(hf), ncol=2)#
    high.card   <- matrix(,nrow=nrow(hf), ncol=1)#
    high.suited <- matrix(,nrow=nrow(hf), ncol=1)#
    rank.conn   <- matrix(,nrow=nrow(hf), ncol=1)#
#
    ## loop over each row in the file and process the ranked hand#
    for (i in 1:nrow(hf)) {#
        #for (i in 1:1147) {#
        ## process a hand#
        tmp.ch      <- unlist(strsplit(as.character(hf[i,]), ""))   ## split hand into individual characters#
        tmp.nch     <- length(tmp.ch)                               ## count number of characters#
        tmp.lp      <- which(tmp.ch %in% c("("))                    ## location of left parentheses#
        tmp.rp      <- which(tmp.ch %in% c(")"))                    ## location of right parentheses#
        tmp.ranks   <- tmp.ch[which(!(tmp.ch %in% c("(",")")))]     ## extract ranks#
        ## get hand shape infp#
        tmp.nums    <- rankToNum(glob.num, glob.rank, tmp.ranks)    ## convert ranks to (sorted) numbers#
        tmp.gaps    <- abs(diff(tmp.nums))                          ## calculate gap sizes#
        tmp.unq     <- length(unique(tmp.nums))                     ## number of unique#
        tmp.tbl     <- table(tmp.ranks)#
        ##------------------------------------------------------------------#
        ## the if/then processes the hand based on the length, and#
        ## for single-suited suited hands it will use the location#
        ## of the right and left parentheses to assign the suits#
        ##------------------------------------------------------------------#
        ##------------------------------------------------------------------#
        ## Deconstruct suits and identify suit shapes#
        ##------------------------------------------------------------------#
        ## double suited#
        if (tmp.nch == 8) {#
            tmp.suits   <- c("x","x","y","y")#
            tmp.color   <- c("ds")#
        ## single suited#
        } else if (tmp.nch == 6) {#
            ## (XY)ZW [1,4]#
            if ((tmp.lp == 1) & (tmp.rp == 4)) {#
                tmp.suits   <- c("x","x","y","z")#
                tmp.color   <- c("ss.2o")#
            ## X(YZ)W [2,5]#
            } else if ((tmp.lp == 2) & (tmp.rp == 5)) {#
                tmp.suits   <- c("x","y","y","z")#
                tmp.color   <- c("ss.2o")#
            ## XY(ZW) [3,6]#
            } else if ((tmp.lp == 3) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","y","z","z")#
                tmp.color   <- c("ss.2o")#
            ## (XYZ)W [1,5]#
            } else if ((tmp.lp == 1) & (tmp.rp == 5)) {#
                tmp.suits   <- c("x","x","x","y")#
                tmp.color   <- c("ss.1o")#
            ## X(YZW) [2,6]#
            } else if ((tmp.lp == 2) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","y","y","y")#
                tmp.color   <- c("ss.1o")#
            ## (XYZW) [1,6]#
            } else if ((tmp.lp == 1) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","x","x","x")#
                tmp.color   <- c("mo")#
            }#
        ## rainbow#
        } else if (tmp.nch == 4) {#
            tmp.suits   <- c("x","y","z","w")#
            tmp.color   <- c("rb")#
        ## error#
        } else {#
            stop("unexpected string lenght\n")#
        }#
        hand.shape[i,1]     <- appendSuits(tmp.ranks, tmp.suits)#
        suit.shape[i,1]     <- tmp.color#
        ##------------------------------------------------------------------#
        ## Identify pair types#
        ##------------------------------------------------------------------#
        if (max(tmp.tbl) == 4) {#
            tmp.count   <- c("4k")#
            tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
            tmp.lopair  <- NA#
        } else if (max(tmp.tbl) == 3) {#
            tmp.count   <- c("3k")#
            tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
            tmp.lopair  <- NA#
        } else if (max(tmp.tbl == 2)) {#
            if (tmp.unq == 2) {#
                tmp.count   <- c("2p")#
                tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
                tmp.lopair  <- glob.rank[max(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
            } else {#
                tmp.count   <- c("1p")#
                tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
                tmp.lopair  <- NA#
            }#
        } else {#
            tmp.count   <- c("0p")#
            tmp.hipair  <- NA#
            tmp.lopair  <- NA#
        }#
        pair.shape[i,1]     <- tmp.count#
        pair.ranks[i,]      <- c(tmp.hipair, tmp.lopair)#
        ##------------------------------------------------------------------#
        ## Identify high card#
        ##------------------------------------------------------------------#
        high.card[i,]  <- glob.rank[which(glob.num == max(tmp.nums))]#
        ##------------------------------------------------------------------#
        ## Identify high card#
        ##------------------------------------------------------------------#
        ## get suits tied to the high card#
        hi.suits        <- tmp.suits[which(tmp.ranks %in% high.card[i,])]#
        non.hi.suits    <- tmp.suits[which(!(tmp.ranks %in% high.card[i,]))]#
        if (length(which(hi.suits %in% non.hi.suits)) > 0) {#
            high.suited[i,] <- "Y"#
        } else {#
            high.suited[i,] <- "N"#
        }#
        ##------------------------------------------------------------------#
        ## Identify connectedness#
        ##------------------------------------------------------------------#
        if (all(tmp.gaps) == 1) {#
            tmp.conn    <- "rd.0g"#
        } else if (all(tmp.gaps) == 2) {#
            tmp.conn    <- "rd.1g"#
        } else if (all(tmp.gaps) == 3) {#
            tmp.conn    <- "rd.2g"#
        ## connected 2-pair#
        } else if ( (sum(tmp.gaps == 0) == 2) & (sum(tmp.gaps <= 4) == 3) ) {#
            tmp.conn    <- "2p.conn"#
        } else {#
            tmp.conn    <- NA#
        }#
        rank.conn[i,]   <- tmp.conn#
    }
warnings()
table(rank.conn)
## "global" rank/number vectors#
    glob.num     <- seq(13, 1, -1)#
    glob.rank    <- c("A", "K", "Q", "J", "T", "9", "8", "7", "6", "5", "4", "3", "2")#
    ## process the filename#
    tmp.file    <- unlist(strsplit(in.file, "[.]"))#
    out.file    <- paste0(tmp.file[1], "_genericSyntax_DEBUG", ".", tmp.file[2])#
#
    ## read the input file#
    hf          <- read.csv(in.file, header=FALSE)#
    ## create output matrices#
    hand.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    suit.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    pair.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    pair.ranks  <- matrix(,nrow=nrow(hf), ncol=2)#
    high.card   <- matrix(,nrow=nrow(hf), ncol=1)#
    high.suited <- matrix(,nrow=nrow(hf), ncol=1)#
    rank.conn   <- matrix(,nrow=nrow(hf), ncol=1)#
#
    ## loop over each row in the file and process the ranked hand#
    for (i in 1:nrow(hf)) {#
        #for (i in 1:1147) {#
        ## process a hand#
        tmp.ch      <- unlist(strsplit(as.character(hf[i,]), ""))   ## split hand into individual characters#
        tmp.nch     <- length(tmp.ch)                               ## count number of characters#
        tmp.lp      <- which(tmp.ch %in% c("("))                    ## location of left parentheses#
        tmp.rp      <- which(tmp.ch %in% c(")"))                    ## location of right parentheses#
        tmp.ranks   <- tmp.ch[which(!(tmp.ch %in% c("(",")")))]     ## extract ranks#
        ## get hand shape infp#
        tmp.nums    <- rankToNum(glob.num, glob.rank, tmp.ranks)    ## convert ranks to (sorted) numbers#
        tmp.gaps    <- abs(diff(tmp.nums))                          ## calculate gap sizes#
        tmp.unq     <- length(unique(tmp.nums))                     ## number of unique#
        tmp.tbl     <- table(tmp.ranks)#
        ##------------------------------------------------------------------#
        ## the if/then processes the hand based on the length, and#
        ## for single-suited suited hands it will use the location#
        ## of the right and left parentheses to assign the suits#
        ##------------------------------------------------------------------#
        ##------------------------------------------------------------------#
        ## Deconstruct suits and identify suit shapes#
        ##------------------------------------------------------------------#
        ## double suited#
        if (tmp.nch == 8) {#
            tmp.suits   <- c("x","x","y","y")#
            tmp.color   <- c("ds")#
        ## single suited#
        } else if (tmp.nch == 6) {#
            ## (XY)ZW [1,4]#
            if ((tmp.lp == 1) & (tmp.rp == 4)) {#
                tmp.suits   <- c("x","x","y","z")#
                tmp.color   <- c("ss.2o")#
            ## X(YZ)W [2,5]#
            } else if ((tmp.lp == 2) & (tmp.rp == 5)) {#
                tmp.suits   <- c("x","y","y","z")#
                tmp.color   <- c("ss.2o")#
            ## XY(ZW) [3,6]#
            } else if ((tmp.lp == 3) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","y","z","z")#
                tmp.color   <- c("ss.2o")#
            ## (XYZ)W [1,5]#
            } else if ((tmp.lp == 1) & (tmp.rp == 5)) {#
                tmp.suits   <- c("x","x","x","y")#
                tmp.color   <- c("ss.1o")#
            ## X(YZW) [2,6]#
            } else if ((tmp.lp == 2) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","y","y","y")#
                tmp.color   <- c("ss.1o")#
            ## (XYZW) [1,6]#
            } else if ((tmp.lp == 1) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","x","x","x")#
                tmp.color   <- c("mo")#
            }#
        ## rainbow#
        } else if (tmp.nch == 4) {#
            tmp.suits   <- c("x","y","z","w")#
            tmp.color   <- c("rb")#
        ## error#
        } else {#
            stop("unexpected string lenght\n")#
        }#
        hand.shape[i,1]     <- appendSuits(tmp.ranks, tmp.suits)#
        suit.shape[i,1]     <- tmp.color#
        ##------------------------------------------------------------------#
        ## Identify pair types#
        ##------------------------------------------------------------------#
        if (max(tmp.tbl) == 4) {#
            tmp.count   <- c("4k")#
            tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
            tmp.lopair  <- NA#
        } else if (max(tmp.tbl) == 3) {#
            tmp.count   <- c("3k")#
            tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
            tmp.lopair  <- NA#
        } else if (max(tmp.tbl == 2)) {#
            if (tmp.unq == 2) {#
                tmp.count   <- c("2p")#
                tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
                tmp.lopair  <- glob.rank[max(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
            } else {#
                tmp.count   <- c("1p")#
                tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
                tmp.lopair  <- NA#
            }#
        } else {#
            tmp.count   <- c("0p")#
            tmp.hipair  <- NA#
            tmp.lopair  <- NA#
        }#
        pair.shape[i,1]     <- tmp.count#
        pair.ranks[i,]      <- c(tmp.hipair, tmp.lopair)#
        ##------------------------------------------------------------------#
        ## Identify high card#
        ##------------------------------------------------------------------#
        high.card[i,]  <- glob.rank[which(glob.num == max(tmp.nums))]#
        ##------------------------------------------------------------------#
        ## Identify high card#
        ##------------------------------------------------------------------#
        ## get suits tied to the high card#
        hi.suits        <- tmp.suits[which(tmp.ranks %in% high.card[i,])]#
        non.hi.suits    <- tmp.suits[which(!(tmp.ranks %in% high.card[i,]))]#
        if (length(which(hi.suits %in% non.hi.suits)) > 0) {#
            high.suited[i,] <- "Y"#
        } else {#
            high.suited[i,] <- "N"#
        }#
        ##------------------------------------------------------------------#
        ## Identify connectedness#
        ##------------------------------------------------------------------#
        if (all(tmp.gaps == 1)) {#
            tmp.conn    <- "rd.0g"#
        } else if ( all(tmp.gaps == 2)) {#
            tmp.conn    <- "rd.1g"#
        } else if (all(tmp.gaps == 3)) {#
            tmp.conn    <- "rd.2g"#
        ## connected 2-pair#
        } else if ( (sum(tmp.gaps == 0) == 2) & (sum(tmp.gaps <= 4) == 3) ) {#
            tmp.conn    <- "2p.conn"#
        } else {#
            tmp.conn    <- NA#
        }#
        rank.conn[i,]   <- tmp.conn#
    }
table(rank.conn)
table(pair.shape, rank.conn)
which(rank.conn == "2p.conn")
ho[which(rank.conn == "2p.conn"),]
## "global" rank/number vectors#
    glob.num     <- seq(13, 1, -1)#
    glob.rank    <- c("A", "K", "Q", "J", "T", "9", "8", "7", "6", "5", "4", "3", "2")#
    ## process the filename#
    tmp.file    <- unlist(strsplit(in.file, "[.]"))#
    out.file    <- paste0(tmp.file[1], "_genericSyntax_DEBUG", ".", tmp.file[2])#
#
    ## read the input file#
    hf          <- read.csv(in.file, header=FALSE)#
    ## create output matrices#
    hand.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    suit.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    pair.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    pair.ranks  <- matrix(,nrow=nrow(hf), ncol=2)#
    high.card   <- matrix(,nrow=nrow(hf), ncol=1)#
    high.suited <- matrix(,nrow=nrow(hf), ncol=1)#
    rank.conn   <- matrix(,nrow=nrow(hf), ncol=1)#
#
    ## loop over each row in the file and process the ranked hand#
    for (i in 1:nrow(hf)) {#
        #for (i in 1:1147) {#
        ## process a hand#
        tmp.ch      <- unlist(strsplit(as.character(hf[i,]), ""))   ## split hand into individual characters#
        tmp.nch     <- length(tmp.ch)                               ## count number of characters#
        tmp.lp      <- which(tmp.ch %in% c("("))                    ## location of left parentheses#
        tmp.rp      <- which(tmp.ch %in% c(")"))                    ## location of right parentheses#
        tmp.ranks   <- tmp.ch[which(!(tmp.ch %in% c("(",")")))]     ## extract ranks#
        ## get hand shape infp#
        tmp.nums    <- rankToNum(glob.num, glob.rank, tmp.ranks)    ## convert ranks to (sorted) numbers#
        tmp.gaps    <- abs(diff(tmp.nums))                          ## calculate gap sizes#
        tmp.unq     <- length(unique(tmp.nums))                     ## number of unique#
        tmp.tbl     <- table(tmp.ranks)#
        ##------------------------------------------------------------------#
        ## the if/then processes the hand based on the length, and#
        ## for single-suited suited hands it will use the location#
        ## of the right and left parentheses to assign the suits#
        ##------------------------------------------------------------------#
        ##------------------------------------------------------------------#
        ## Deconstruct suits and identify suit shapes#
        ##------------------------------------------------------------------#
        ## double suited#
        if (tmp.nch == 8) {#
            tmp.suits   <- c("x","x","y","y")#
            tmp.color   <- c("ds")#
        ## single suited#
        } else if (tmp.nch == 6) {#
            ## (XY)ZW [1,4]#
            if ((tmp.lp == 1) & (tmp.rp == 4)) {#
                tmp.suits   <- c("x","x","y","z")#
                tmp.color   <- c("ss.2o")#
            ## X(YZ)W [2,5]#
            } else if ((tmp.lp == 2) & (tmp.rp == 5)) {#
                tmp.suits   <- c("x","y","y","z")#
                tmp.color   <- c("ss.2o")#
            ## XY(ZW) [3,6]#
            } else if ((tmp.lp == 3) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","y","z","z")#
                tmp.color   <- c("ss.2o")#
            ## (XYZ)W [1,5]#
            } else if ((tmp.lp == 1) & (tmp.rp == 5)) {#
                tmp.suits   <- c("x","x","x","y")#
                tmp.color   <- c("ss.1o")#
            ## X(YZW) [2,6]#
            } else if ((tmp.lp == 2) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","y","y","y")#
                tmp.color   <- c("ss.1o")#
            ## (XYZW) [1,6]#
            } else if ((tmp.lp == 1) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","x","x","x")#
                tmp.color   <- c("mo")#
            }#
        ## rainbow#
        } else if (tmp.nch == 4) {#
            tmp.suits   <- c("x","y","z","w")#
            tmp.color   <- c("rb")#
        ## error#
        } else {#
            stop("unexpected string lenght\n")#
        }#
        hand.shape[i,1]     <- appendSuits(tmp.ranks, tmp.suits)#
        suit.shape[i,1]     <- tmp.color#
        ##------------------------------------------------------------------#
        ## Identify pair types#
        ##------------------------------------------------------------------#
        if (max(tmp.tbl) == 4) {#
            tmp.count   <- c("4k")#
            tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
            tmp.lopair  <- NA#
        } else if (max(tmp.tbl) == 3) {#
            tmp.count   <- c("3k")#
            tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
            tmp.lopair  <- NA#
        } else if (max(tmp.tbl == 2)) {#
            if (tmp.unq == 2) {#
                tmp.count   <- c("2p")#
                tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
                tmp.lopair  <- glob.rank[max(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
            } else {#
                tmp.count   <- c("1p")#
                tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
                tmp.lopair  <- NA#
            }#
        } else {#
            tmp.count   <- c("0p")#
            tmp.hipair  <- NA#
            tmp.lopair  <- NA#
        }#
        pair.shape[i,1]     <- tmp.count#
        pair.ranks[i,]      <- c(tmp.hipair, tmp.lopair)#
        ##------------------------------------------------------------------#
        ## Identify high card#
        ##------------------------------------------------------------------#
        high.card[i,]  <- glob.rank[which(glob.num == max(tmp.nums))]#
        ##------------------------------------------------------------------#
        ## Identify high card#
        ##------------------------------------------------------------------#
        ## get suits tied to the high card#
        hi.suits        <- tmp.suits[which(tmp.ranks %in% high.card[i,])]#
        non.hi.suits    <- tmp.suits[which(!(tmp.ranks %in% high.card[i,]))]#
        if (length(which(hi.suits %in% non.hi.suits)) > 0) {#
            high.suited[i,] <- "Y"#
        } else {#
            high.suited[i,] <- "N"#
        }#
        ##------------------------------------------------------------------#
        ## Identify connectedness#
        ##------------------------------------------------------------------#
        if (all(tmp.gaps == 1)) {#
            tmp.conn    <- "rd.0g"#
        } else if ( all(tmp.gaps == 2)) {#
            tmp.conn    <- "rd.1g"#
        } else if (all(tmp.gaps == 3)) {#
            tmp.conn    <- "rd.2g"#
        ## connected 2-pair#
        } else if ( (tmp.gaps[1] == 0) & (tmp.gaps[3] == 0) & (tmp.gaps[2] <= 4) ) {#
            tmp.conn    <- "2p.conn"#
        } else {#
            tmp.conn    <- NA#
        }#
        rank.conn[i,]   <- tmp.conn#
    }
ho[which(rank.conn == "2p.conn"),]
## "global" rank/number vectors#
    glob.num     <- seq(13, 1, -1)#
    glob.rank    <- c("A", "K", "Q", "J", "T", "9", "8", "7", "6", "5", "4", "3", "2")#
    ## process the filename#
    tmp.file    <- unlist(strsplit(in.file, "[.]"))#
    out.file    <- paste0(tmp.file[1], "_genericSyntax_DEBUG", ".", tmp.file[2])#
#
    ## read the input file#
    hf          <- read.csv(in.file, header=FALSE)#
    ## create output matrices#
    hand.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    suit.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    pair.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    pair.ranks  <- matrix(,nrow=nrow(hf), ncol=2)#
    high.card   <- matrix(,nrow=nrow(hf), ncol=1)#
    high.suited <- matrix(,nrow=nrow(hf), ncol=1)#
    rank.conn   <- matrix(,nrow=nrow(hf), ncol=1)#
#
    ## loop over each row in the file and process the ranked hand#
    for (i in 1:nrow(hf)) {#
        #for (i in 1:1147) {#
        ## process a hand#
        tmp.ch      <- unlist(strsplit(as.character(hf[i,]), ""))   ## split hand into individual characters#
        tmp.nch     <- length(tmp.ch)                               ## count number of characters#
        tmp.lp      <- which(tmp.ch %in% c("("))                    ## location of left parentheses#
        tmp.rp      <- which(tmp.ch %in% c(")"))                    ## location of right parentheses#
        tmp.ranks   <- tmp.ch[which(!(tmp.ch %in% c("(",")")))]     ## extract ranks#
        ## get hand shape infp#
        tmp.nums    <- rankToNum(glob.num, glob.rank, tmp.ranks)    ## convert ranks to (sorted) numbers#
        tmp.gaps    <- abs(diff(tmp.nums))                          ## calculate gap sizes#
        tmp.unq     <- length(unique(tmp.nums))                     ## number of unique#
        tmp.tbl     <- table(tmp.ranks)#
        ##------------------------------------------------------------------#
        ## the if/then processes the hand based on the length, and#
        ## for single-suited suited hands it will use the location#
        ## of the right and left parentheses to assign the suits#
        ##------------------------------------------------------------------#
        ##------------------------------------------------------------------#
        ## Deconstruct suits and identify suit shapes#
        ##------------------------------------------------------------------#
        ## double suited#
        if (tmp.nch == 8) {#
            tmp.suits   <- c("x","x","y","y")#
            tmp.color   <- c("ds")#
        ## single suited#
        } else if (tmp.nch == 6) {#
            ## (XY)ZW [1,4]#
            if ((tmp.lp == 1) & (tmp.rp == 4)) {#
                tmp.suits   <- c("x","x","y","z")#
                tmp.color   <- c("ss.2o")#
            ## X(YZ)W [2,5]#
            } else if ((tmp.lp == 2) & (tmp.rp == 5)) {#
                tmp.suits   <- c("x","y","y","z")#
                tmp.color   <- c("ss.2o")#
            ## XY(ZW) [3,6]#
            } else if ((tmp.lp == 3) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","y","z","z")#
                tmp.color   <- c("ss.2o")#
            ## (XYZ)W [1,5]#
            } else if ((tmp.lp == 1) & (tmp.rp == 5)) {#
                tmp.suits   <- c("x","x","x","y")#
                tmp.color   <- c("ss.1o")#
            ## X(YZW) [2,6]#
            } else if ((tmp.lp == 2) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","y","y","y")#
                tmp.color   <- c("ss.1o")#
            ## (XYZW) [1,6]#
            } else if ((tmp.lp == 1) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","x","x","x")#
                tmp.color   <- c("mo")#
            }#
        ## rainbow#
        } else if (tmp.nch == 4) {#
            tmp.suits   <- c("x","y","z","w")#
            tmp.color   <- c("rb")#
        ## error#
        } else {#
            stop("unexpected string lenght\n")#
        }#
        hand.shape[i,1]     <- appendSuits(tmp.ranks, tmp.suits)#
        suit.shape[i,1]     <- tmp.color#
        ##------------------------------------------------------------------#
        ## Identify pair types#
        ##------------------------------------------------------------------#
        if (max(tmp.tbl) == 4) {#
            tmp.count   <- c("4k")#
            tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
            tmp.lopair  <- NA#
        } else if (max(tmp.tbl) == 3) {#
            tmp.count   <- c("3k")#
            tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
            tmp.lopair  <- NA#
        } else if (max(tmp.tbl == 2)) {#
            if (tmp.unq == 2) {#
                tmp.count   <- c("2p")#
                tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
                tmp.lopair  <- glob.rank[max(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
            } else {#
                tmp.count   <- c("1p")#
                tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
                tmp.lopair  <- NA#
            }#
        } else {#
            tmp.count   <- c("0p")#
            tmp.hipair  <- NA#
            tmp.lopair  <- NA#
        }#
        pair.shape[i,1]     <- tmp.count#
        pair.ranks[i,]      <- c(tmp.hipair, tmp.lopair)#
        ##------------------------------------------------------------------#
        ## Identify high card#
        ##------------------------------------------------------------------#
        high.card[i,]  <- glob.rank[which(glob.num == max(tmp.nums))]#
        ##------------------------------------------------------------------#
        ## Identify high card#
        ##------------------------------------------------------------------#
        ## get suits tied to the high card#
        hi.suits        <- tmp.suits[which(tmp.ranks %in% high.card[i,])]#
        non.hi.suits    <- tmp.suits[which(!(tmp.ranks %in% high.card[i,]))]#
        if (length(which(hi.suits %in% non.hi.suits)) > 0) {#
            high.suited[i,] <- "Y"#
        } else {#
            high.suited[i,] <- "N"#
        }#
        ##------------------------------------------------------------------#
        ## Identify connectedness#
        ##------------------------------------------------------------------#
        ## pure rundown variants#
        if (all(tmp.gaps == 1)) {#
            tmp.conn    <- "rd.0g"#
        } else if ( all(tmp.gaps == 2)) {#
            tmp.conn    <- "rd.1g"#
        } else if (all(tmp.gaps == 3)) {#
            tmp.conn    <- "rd.2g"#
        ## connected 2-pair#
        } else if ( (tmp.gaps[1] == 0) & (tmp.gaps[3] == 0) & (tmp.gaps[2] %in% c(1,2,3)) ) {#
            tmp.conn    <- "2p.conn"#
        ## rundown plus pair#
        } else if ( (sum(tmp.gaps==0)==1) & (sum(tmp.gap==1)==2) ) {#
            tmp.conn    <- "rd.1p"#
        ## single gap rundown#
        } else if ( (sum(tmp.gaps==2)==1) & (sum(tmp.gap==1)==2) ) {#
            tmp.conn    <- "rd.1g"#
#
        ## double gap rundown#
        } else if ( (sum(tmp.gaps==3)==1) & (sum(tmp.gap==1)==2) ) {#
            tmp.conn    <- "rd.2g"#
#
        ## triple gap rundown#
        } else if ( (sum(tmp.gaps==4)==1) & (sum(tmp.gap==1)==2) ) {#
            tmp.conn    <- "rd.3g"#
#
        } else {#
            tmp.conn    <- NA#
        }#
        rank.conn[i,]   <- tmp.conn#
    }
## "global" rank/number vectors#
    glob.num     <- seq(13, 1, -1)#
    glob.rank    <- c("A", "K", "Q", "J", "T", "9", "8", "7", "6", "5", "4", "3", "2")#
    ## process the filename#
    tmp.file    <- unlist(strsplit(in.file, "[.]"))#
    out.file    <- paste0(tmp.file[1], "_genericSyntax_DEBUG", ".", tmp.file[2])#
#
    ## read the input file#
    hf          <- read.csv(in.file, header=FALSE)#
    ## create output matrices#
    hand.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    suit.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    pair.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    pair.ranks  <- matrix(,nrow=nrow(hf), ncol=2)#
    high.card   <- matrix(,nrow=nrow(hf), ncol=1)#
    high.suited <- matrix(,nrow=nrow(hf), ncol=1)#
    rank.conn   <- matrix(,nrow=nrow(hf), ncol=1)#
#
    ## loop over each row in the file and process the ranked hand#
    for (i in 1:nrow(hf)) {#
        #for (i in 1:1147) {#
        ## process a hand#
        tmp.ch      <- unlist(strsplit(as.character(hf[i,]), ""))   ## split hand into individual characters#
        tmp.nch     <- length(tmp.ch)                               ## count number of characters#
        tmp.lp      <- which(tmp.ch %in% c("("))                    ## location of left parentheses#
        tmp.rp      <- which(tmp.ch %in% c(")"))                    ## location of right parentheses#
        tmp.ranks   <- tmp.ch[which(!(tmp.ch %in% c("(",")")))]     ## extract ranks#
        ## get hand shape infp#
        tmp.nums    <- rankToNum(glob.num, glob.rank, tmp.ranks)    ## convert ranks to (sorted) numbers#
        tmp.gaps    <- abs(diff(tmp.nums))                          ## calculate gap sizes#
        tmp.unq     <- length(unique(tmp.nums))                     ## number of unique#
        tmp.tbl     <- table(tmp.ranks)#
        ##------------------------------------------------------------------#
        ## the if/then processes the hand based on the length, and#
        ## for single-suited suited hands it will use the location#
        ## of the right and left parentheses to assign the suits#
        ##------------------------------------------------------------------#
        ##------------------------------------------------------------------#
        ## Deconstruct suits and identify suit shapes#
        ##------------------------------------------------------------------#
        ## double suited#
        if (tmp.nch == 8) {#
            tmp.suits   <- c("x","x","y","y")#
            tmp.color   <- c("ds")#
        ## single suited#
        } else if (tmp.nch == 6) {#
            ## (XY)ZW [1,4]#
            if ((tmp.lp == 1) & (tmp.rp == 4)) {#
                tmp.suits   <- c("x","x","y","z")#
                tmp.color   <- c("ss.2o")#
            ## X(YZ)W [2,5]#
            } else if ((tmp.lp == 2) & (tmp.rp == 5)) {#
                tmp.suits   <- c("x","y","y","z")#
                tmp.color   <- c("ss.2o")#
            ## XY(ZW) [3,6]#
            } else if ((tmp.lp == 3) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","y","z","z")#
                tmp.color   <- c("ss.2o")#
            ## (XYZ)W [1,5]#
            } else if ((tmp.lp == 1) & (tmp.rp == 5)) {#
                tmp.suits   <- c("x","x","x","y")#
                tmp.color   <- c("ss.1o")#
            ## X(YZW) [2,6]#
            } else if ((tmp.lp == 2) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","y","y","y")#
                tmp.color   <- c("ss.1o")#
            ## (XYZW) [1,6]#
            } else if ((tmp.lp == 1) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","x","x","x")#
                tmp.color   <- c("mo")#
            }#
        ## rainbow#
        } else if (tmp.nch == 4) {#
            tmp.suits   <- c("x","y","z","w")#
            tmp.color   <- c("rb")#
        ## error#
        } else {#
            stop("unexpected string lenght\n")#
        }#
        hand.shape[i,1]     <- appendSuits(tmp.ranks, tmp.suits)#
        suit.shape[i,1]     <- tmp.color#
        ##------------------------------------------------------------------#
        ## Identify pair types#
        ##------------------------------------------------------------------#
        if (max(tmp.tbl) == 4) {#
            tmp.count   <- c("4k")#
            tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
            tmp.lopair  <- NA#
        } else if (max(tmp.tbl) == 3) {#
            tmp.count   <- c("3k")#
            tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
            tmp.lopair  <- NA#
        } else if (max(tmp.tbl == 2)) {#
            if (tmp.unq == 2) {#
                tmp.count   <- c("2p")#
                tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
                tmp.lopair  <- glob.rank[max(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
            } else {#
                tmp.count   <- c("1p")#
                tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
                tmp.lopair  <- NA#
            }#
        } else {#
            tmp.count   <- c("0p")#
            tmp.hipair  <- NA#
            tmp.lopair  <- NA#
        }#
        pair.shape[i,1]     <- tmp.count#
        pair.ranks[i,]      <- c(tmp.hipair, tmp.lopair)#
        ##------------------------------------------------------------------#
        ## Identify high card#
        ##------------------------------------------------------------------#
        high.card[i,]  <- glob.rank[which(glob.num == max(tmp.nums))]#
        ##------------------------------------------------------------------#
        ## Identify high card#
        ##------------------------------------------------------------------#
        ## get suits tied to the high card#
        hi.suits        <- tmp.suits[which(tmp.ranks %in% high.card[i,])]#
        non.hi.suits    <- tmp.suits[which(!(tmp.ranks %in% high.card[i,]))]#
        if (length(which(hi.suits %in% non.hi.suits)) > 0) {#
            high.suited[i,] <- "Y"#
        } else {#
            high.suited[i,] <- "N"#
        }#
        ##------------------------------------------------------------------#
        ## Identify connectedness#
        ##------------------------------------------------------------------#
        ## pure rundown variants#
        if (all(tmp.gaps == 1)) {#
            tmp.conn    <- "rd.0g"#
        } else if ( all(tmp.gaps == 2)) {#
            tmp.conn    <- "rd.1g"#
        } else if (all(tmp.gaps == 3)) {#
            tmp.conn    <- "rd.2g"#
        ## connected 2-pair#
        } else if ( (tmp.gaps[1] == 0) & (tmp.gaps[3] == 0) & (tmp.gaps[2] %in% c(1,2,3)) ) {#
            tmp.conn    <- "2p.conn"#
        ## rundown plus pair#
        } else if ( (sum(tmp.gaps==0)==1) & (sum(tmp.gaps==1)==2) ) {#
            tmp.conn    <- "rd.1p"#
        ## single gap rundown#
        } else if ( (sum(tmp.gaps==2)==1) & (sum(tmp.gaps==1)==2) ) {#
            tmp.conn    <- "rd.1g"#
#
        ## double gap rundown#
        } else if ( (sum(tmp.gaps==3)==1) & (sum(tmp.gaps==1)==2) ) {#
            tmp.conn    <- "rd.2g"#
#
        ## triple gap rundown#
        } else if ( (sum(tmp.gaps==4)==1) & (sum(tmp.gaps==1)==2) ) {#
            tmp.conn    <- "rd.3g"#
#
        } else {#
            tmp.conn    <- NA#
        }#
        rank.conn[i,]   <- tmp.conn#
    }
table(rank.conn)
table(pair.shape, rank.conn)
ho[which(rank.conn=="rd.0g"),]
ho[which(rank.conn=="rd.1g"),]
## "global" rank/number vectors#
    glob.num     <- seq(13, 1, -1)#
    glob.rank    <- c("A", "K", "Q", "J", "T", "9", "8", "7", "6", "5", "4", "3", "2")#
    ## process the filename#
    tmp.file    <- unlist(strsplit(in.file, "[.]"))#
    out.file    <- paste0(tmp.file[1], "_genericSyntax_DEBUG", ".", tmp.file[2])#
#
    ## read the input file#
    hf          <- read.csv(in.file, header=FALSE)#
    ## create output matrices#
    hand.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    suit.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    pair.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    pair.ranks  <- matrix(,nrow=nrow(hf), ncol=2)#
    high.card   <- matrix(,nrow=nrow(hf), ncol=1)#
    high.suited <- matrix(,nrow=nrow(hf), ncol=1)#
    rank.conn   <- matrix(,nrow=nrow(hf), ncol=1)#
#
    ## loop over each row in the file and process the ranked hand#
    for (i in 1:nrow(hf)) {#
        #for (i in 1:1147) {#
        ## process a hand#
        tmp.ch      <- unlist(strsplit(as.character(hf[i,]), ""))   ## split hand into individual characters#
        tmp.nch     <- length(tmp.ch)                               ## count number of characters#
        tmp.lp      <- which(tmp.ch %in% c("("))                    ## location of left parentheses#
        tmp.rp      <- which(tmp.ch %in% c(")"))                    ## location of right parentheses#
        tmp.ranks   <- tmp.ch[which(!(tmp.ch %in% c("(",")")))]     ## extract ranks#
        ## get hand shape infp#
        tmp.nums    <- rankToNum(glob.num, glob.rank, tmp.ranks)    ## convert ranks to (sorted) numbers#
        tmp.gaps    <- abs(diff(tmp.nums))                          ## calculate gap sizes#
        tmp.unq     <- length(unique(tmp.nums))                     ## number of unique#
        tmp.tbl     <- table(tmp.ranks)#
        ##------------------------------------------------------------------#
        ## the if/then processes the hand based on the length, and#
        ## for single-suited suited hands it will use the location#
        ## of the right and left parentheses to assign the suits#
        ##------------------------------------------------------------------#
        ##------------------------------------------------------------------#
        ## Deconstruct suits and identify suit shapes#
        ##------------------------------------------------------------------#
        ## double suited#
        if (tmp.nch == 8) {#
            tmp.suits   <- c("x","x","y","y")#
            tmp.color   <- c("ds")#
        ## single suited#
        } else if (tmp.nch == 6) {#
            ## (XY)ZW [1,4]#
            if ((tmp.lp == 1) & (tmp.rp == 4)) {#
                tmp.suits   <- c("x","x","y","z")#
                tmp.color   <- c("ss.2o")#
            ## X(YZ)W [2,5]#
            } else if ((tmp.lp == 2) & (tmp.rp == 5)) {#
                tmp.suits   <- c("x","y","y","z")#
                tmp.color   <- c("ss.2o")#
            ## XY(ZW) [3,6]#
            } else if ((tmp.lp == 3) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","y","z","z")#
                tmp.color   <- c("ss.2o")#
            ## (XYZ)W [1,5]#
            } else if ((tmp.lp == 1) & (tmp.rp == 5)) {#
                tmp.suits   <- c("x","x","x","y")#
                tmp.color   <- c("ss.1o")#
            ## X(YZW) [2,6]#
            } else if ((tmp.lp == 2) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","y","y","y")#
                tmp.color   <- c("ss.1o")#
            ## (XYZW) [1,6]#
            } else if ((tmp.lp == 1) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","x","x","x")#
                tmp.color   <- c("mo")#
            }#
        ## rainbow#
        } else if (tmp.nch == 4) {#
            tmp.suits   <- c("x","y","z","w")#
            tmp.color   <- c("rb")#
        ## error#
        } else {#
            stop("unexpected string lenght\n")#
        }#
        hand.shape[i,1]     <- appendSuits(tmp.ranks, tmp.suits)#
        suit.shape[i,1]     <- tmp.color#
        ##------------------------------------------------------------------#
        ## Identify pair types#
        ##------------------------------------------------------------------#
        if (max(tmp.tbl) == 4) {#
            tmp.count   <- c("4k")#
            tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
            tmp.lopair  <- NA#
        } else if (max(tmp.tbl) == 3) {#
            tmp.count   <- c("3k")#
            tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
            tmp.lopair  <- NA#
        } else if (max(tmp.tbl == 2)) {#
            if (tmp.unq == 2) {#
                tmp.count   <- c("2p")#
                tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
                tmp.lopair  <- glob.rank[max(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
            } else {#
                tmp.count   <- c("1p")#
                tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
                tmp.lopair  <- NA#
            }#
        } else {#
            tmp.count   <- c("0p")#
            tmp.hipair  <- NA#
            tmp.lopair  <- NA#
        }#
        pair.shape[i,1]     <- tmp.count#
        pair.ranks[i,]      <- c(tmp.hipair, tmp.lopair)#
        ##------------------------------------------------------------------#
        ## Identify high card#
        ##------------------------------------------------------------------#
        high.card[i,]  <- glob.rank[which(glob.num == max(tmp.nums))]#
        ##------------------------------------------------------------------#
        ## Identify high card#
        ##------------------------------------------------------------------#
        ## get suits tied to the high card#
        hi.suits        <- tmp.suits[which(tmp.ranks %in% high.card[i,])]#
        non.hi.suits    <- tmp.suits[which(!(tmp.ranks %in% high.card[i,]))]#
        if (length(which(hi.suits %in% non.hi.suits)) > 0) {#
            high.suited[i,] <- "Y"#
        } else {#
            high.suited[i,] <- "N"#
        }#
        ##------------------------------------------------------------------#
        ## Identify connectedness#
        ##------------------------------------------------------------------#
        ## pure rundown variants#
        if (all(tmp.gaps == 1)) {#
            tmp.conn    <- "rd.0g"#
        } else if ( all(tmp.gaps == 2)) {#
            tmp.conn    <- "rd.1g"#
        } else if (all(tmp.gaps == 3)) {#
            tmp.conn    <- "rd.2g"#
        ## connected 2-pair#
        } else if ( (tmp.gaps[1] == 0) & (tmp.gaps[3] == 0) & (tmp.gaps[2] %in% c(1,2,3)) ) {#
            tmp.conn    <- "2p.conn"#
        ## rundown plus pair#
        } else if ( (sum(tmp.gaps==0)==1) & (sum(tmp.gaps==1)==2) ) {#
            tmp.conn    <- "rd.1p"#
        ## single gap rundown#
        } else if ( (sum(tmp.gaps==2)==1) & (sum(tmp.gaps==1)==2) ) {#
            tmp.conn    <- "rd.1g"#
#
        ## double gap rundown#
        } else if ( (sum(tmp.gaps==3)==1) & (sum(tmp.gaps==1)==2) ) {#
            tmp.conn    <- "rd.2g"#
#
        ## triple gap rundown#
        } else if ( (sum(tmp.gaps==4)==1) & (sum(tmp.gaps==1)==2) ) {#
            tmp.conn    <- "rd.3g"#
#
        ## dangler gap rundown#
        } else if ( (sum(tmp.gaps>4)==1) & (sum(tmp.gaps==1)==2) ) {#
            tmp.conn    <- "rd.dg"#
#
        ## 2x single gap rundown#
        } else if ( (sum(tmp.gaps==1)==1) & (sum(tmp.gaps==2)==2) ) {#
            tmp.conn    <- "rd.2x1g"#
#
        ## 2x double gap rundown#
        } else if ( (sum(tmp.gaps==1)==1) & (sum(tmp.gaps==3)==2) ) {#
            tmp.conn    <- "rd.2x2g"#
        } else {#
            tmp.conn    <- NA#
        }#
        rank.conn[i,]   <- tmp.conn#
    }
table(ran.conn)
table(rank.conn)
table(pair.shape, rank.conn)
pair.shape[1:10]
ho[which(rank.conn == "rd.dg"),]
## "global" rank/number vectors#
    glob.num     <- seq(13, 1, -1)#
    glob.rank    <- c("A", "K", "Q", "J", "T", "9", "8", "7", "6", "5", "4", "3", "2")#
    ## process the filename#
    tmp.file    <- unlist(strsplit(in.file, "[.]"))#
    out.file    <- paste0(tmp.file[1], "_genericSyntax_DEBUG", ".", tmp.file[2])#
#
    ## read the input file#
    hf          <- read.csv(in.file, header=FALSE)#
    ## create output matrices#
    hand.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    suit.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    pair.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    pair.ranks  <- matrix(,nrow=nrow(hf), ncol=2)#
    high.card   <- matrix(,nrow=nrow(hf), ncol=1)#
    high.suited <- matrix(,nrow=nrow(hf), ncol=1)#
    rank.conn   <- matrix(,nrow=nrow(hf), ncol=1)#
#
    ## loop over each row in the file and process the ranked hand#
    for (i in 1:nrow(hf)) {#
        #for (i in 1:1147) {#
        ## process a hand#
        tmp.ch      <- unlist(strsplit(as.character(hf[i,]), ""))   ## split hand into individual characters#
        tmp.nch     <- length(tmp.ch)                               ## count number of characters#
        tmp.lp      <- which(tmp.ch %in% c("("))                    ## location of left parentheses#
        tmp.rp      <- which(tmp.ch %in% c(")"))                    ## location of right parentheses#
        tmp.ranks   <- tmp.ch[which(!(tmp.ch %in% c("(",")")))]     ## extract ranks#
        ## get hand shape infp#
        tmp.nums    <- rankToNum(glob.num, glob.rank, tmp.ranks)    ## convert ranks to (sorted) numbers#
        tmp.gaps    <- abs(diff(tmp.nums))                          ## calculate gap sizes#
        tmp.unq     <- length(unique(tmp.nums))                     ## number of unique#
        tmp.tbl     <- table(tmp.ranks)#
        ##------------------------------------------------------------------#
        ## the if/then processes the hand based on the length, and#
        ## for single-suited suited hands it will use the location#
        ## of the right and left parentheses to assign the suits#
        ##------------------------------------------------------------------#
        ##------------------------------------------------------------------#
        ## Deconstruct suits and identify suit shapes#
        ##------------------------------------------------------------------#
        ## double suited#
        if (tmp.nch == 8) {#
            tmp.suits   <- c("x","x","y","y")#
            tmp.color   <- c("ds")#
        ## single suited#
        } else if (tmp.nch == 6) {#
            ## (XY)ZW [1,4]#
            if ((tmp.lp == 1) & (tmp.rp == 4)) {#
                tmp.suits   <- c("x","x","y","z")#
                tmp.color   <- c("ss.2o")#
            ## X(YZ)W [2,5]#
            } else if ((tmp.lp == 2) & (tmp.rp == 5)) {#
                tmp.suits   <- c("x","y","y","z")#
                tmp.color   <- c("ss.2o")#
            ## XY(ZW) [3,6]#
            } else if ((tmp.lp == 3) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","y","z","z")#
                tmp.color   <- c("ss.2o")#
            ## (XYZ)W [1,5]#
            } else if ((tmp.lp == 1) & (tmp.rp == 5)) {#
                tmp.suits   <- c("x","x","x","y")#
                tmp.color   <- c("ss.1o")#
            ## X(YZW) [2,6]#
            } else if ((tmp.lp == 2) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","y","y","y")#
                tmp.color   <- c("ss.1o")#
            ## (XYZW) [1,6]#
            } else if ((tmp.lp == 1) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","x","x","x")#
                tmp.color   <- c("mo")#
            }#
        ## rainbow#
        } else if (tmp.nch == 4) {#
            tmp.suits   <- c("x","y","z","w")#
            tmp.color   <- c("rb")#
        ## error#
        } else {#
            stop("unexpected string lenght\n")#
        }#
        hand.shape[i,1]     <- appendSuits(tmp.ranks, tmp.suits)#
        suit.shape[i,1]     <- tmp.color#
        ##------------------------------------------------------------------#
        ## Identify pair types#
        ##------------------------------------------------------------------#
        if (max(tmp.tbl) == 4) {#
            tmp.count   <- c("4k")#
            tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
            tmp.lopair  <- NA#
        } else if (max(tmp.tbl) == 3) {#
            tmp.count   <- c("3k")#
            tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
            tmp.lopair  <- NA#
        } else if (max(tmp.tbl == 2)) {#
            if (tmp.unq == 2) {#
                tmp.count   <- c("2p")#
                tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
                tmp.lopair  <- glob.rank[max(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
            } else {#
                tmp.count   <- c("1p")#
                tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
                tmp.lopair  <- NA#
            }#
        } else {#
            tmp.count   <- c("0p")#
            tmp.hipair  <- NA#
            tmp.lopair  <- NA#
        }#
        pair.shape[i,1]     <- tmp.count#
        pair.ranks[i,]      <- c(tmp.hipair, tmp.lopair)#
        ##------------------------------------------------------------------#
        ## Identify high card#
        ##------------------------------------------------------------------#
        high.card[i,]  <- glob.rank[which(glob.num == max(tmp.nums))]#
        ##------------------------------------------------------------------#
        ## Identify high card#
        ##------------------------------------------------------------------#
        ## get suits tied to the high card#
        hi.suits        <- tmp.suits[which(tmp.ranks %in% high.card[i,])]#
        non.hi.suits    <- tmp.suits[which(!(tmp.ranks %in% high.card[i,]))]#
        if (length(which(hi.suits %in% non.hi.suits)) > 0) {#
            high.suited[i,] <- "Y"#
        } else {#
            high.suited[i,] <- "N"#
        }#
        ##------------------------------------------------------------------#
        ## Identify connectedness#
        ##------------------------------------------------------------------#
        ## pure rundown variants#
        if (all(tmp.gaps == 1)) {#
            tmp.conn    <- "rd.0g"#
        } else if ( all(tmp.gaps == 2)) {#
            tmp.conn    <- "rd.1g"#
        } else if (all(tmp.gaps == 3)) {#
            tmp.conn    <- "rd.2g"#
        ## connected 2-pair#
        } else if ( (tmp.gaps[1] == 0) & (tmp.gaps[3] == 0) & (tmp.gaps[2] %in% c(1,2,3)) ) {#
            tmp.conn    <- "2p.conn"#
        ## rundown plus pair#
        } else if ( (sum(tmp.gaps==0)==1) & (sum(tmp.gaps==1)==2) ) {#
            tmp.conn    <- "rd.1p"#
        ## single gap rundown#
        } else if ( (sum(tmp.gaps==2)==1) & (sum(tmp.gaps==1)==2) ) {#
            tmp.conn    <- "rd.1g"#
#
        ## double gap rundown#
        } else if ( (sum(tmp.gaps==3)==1) & (sum(tmp.gaps==1)==2) ) {#
            tmp.conn    <- "rd.2g"#
#
        ## triple gap rundown#
        } else if ( (sum(tmp.gaps==4)==1) & (sum(tmp.gaps==1)==2) ) {#
            tmp.conn    <- "rd.3g"#
#
        ## dangler gap rundown#
        } else if ( (sum(tmp.gaps>4)==1) & (sum(tmp.gaps==1)==2) ) {#
            tmp.conn    <- "rd.dg"#
#
        ## 2x single gap rundown#
        } else if ( (sum(tmp.gaps==1)==1) & (sum(tmp.gaps==2)==2) ) {#
            tmp.conn    <- "rd.2x1g"#
#
        ## 2x double gap rundown#
        } else if ( (sum(tmp.gaps==1)==1) & (sum(tmp.gaps==3)==2) ) {#
            tmp.conn    <- "rd.2x2g"#
        ## default#
        } else {#
            tmp.conn    <- NA#
        }#
        rank.conn[i,]   <- tmp.conn#
#
    }
## consolidate#
    hand.data   <- data.frame(  hand=hand.shape,#
                                suit=suit.shape,#
                                pair=pair.shape,#
                                ranks=pair.ranks,#
                                highCard=high.card,#
                                highSuited=high.suited,#
                                conn=rank.conn)
head(hand.data)
## consolidate#
    hand.data   <- data.frame(  hand=hand.shape,#
                                suit=suit.shape,#
                                pair=pair.shape,#
                                ranks=pair.ranks,#
                                highCard=high.card,#
                                highSuited=high.suited,#
                                conn=rank.conn)#
#
    colnames(hand.data) <- c("hand","suit","pair","hiPair","loPair","hiCard","hiSuited","conn")
head(hand.data)
hand.data[1400:1440,]
tmp.gaps
paste(tmp.gaps, collapse=":")
## "global" rank/number vectors#
    glob.num     <- seq(13, 1, -1)#
    glob.rank    <- c("A", "K", "Q", "J", "T", "9", "8", "7", "6", "5", "4", "3", "2")#
    ## process the filename#
    tmp.file    <- unlist(strsplit(in.file, "[.]"))#
    out.file    <- paste0(tmp.file[1], "_genericSyntax_DEBUG", ".", tmp.file[2])#
#
    ## read the input file#
    hf          <- read.csv(in.file, header=FALSE)#
    ## create output matrices#
    hand.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    suit.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    pair.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    pair.ranks  <- matrix(,nrow=nrow(hf), ncol=2)#
    high.card   <- matrix(,nrow=nrow(hf), ncol=1)#
    high.suited <- matrix(,nrow=nrow(hf), ncol=1)#
    rank.conn   <- matrix(,nrow=nrow(hf), ncol=1)#
    rank.gaps   <- matrix(,nrow=nrow(hf), ncol=1)#
#
    ## loop over each row in the file and process the ranked hand#
    for (i in 1:nrow(hf)) {#
        #for (i in 1:1147) {#
        ## process a hand#
        tmp.ch      <- unlist(strsplit(as.character(hf[i,]), ""))   ## split hand into individual characters#
        tmp.nch     <- length(tmp.ch)                               ## count number of characters#
        tmp.lp      <- which(tmp.ch %in% c("("))                    ## location of left parentheses#
        tmp.rp      <- which(tmp.ch %in% c(")"))                    ## location of right parentheses#
        tmp.ranks   <- tmp.ch[which(!(tmp.ch %in% c("(",")")))]     ## extract ranks#
        ## get hand shape infp#
        tmp.nums    <- rankToNum(glob.num, glob.rank, tmp.ranks)    ## convert ranks to (sorted) numbers#
        tmp.gaps    <- abs(diff(tmp.nums))                          ## calculate gap sizes#
        tmp.unq     <- length(unique(tmp.nums))                     ## number of unique#
        tmp.tbl     <- table(tmp.ranks)#
        ##------------------------------------------------------------------#
        ## the if/then processes the hand based on the length, and#
        ## for single-suited suited hands it will use the location#
        ## of the right and left parentheses to assign the suits#
        ##------------------------------------------------------------------#
        ##------------------------------------------------------------------#
        ## Deconstruct suits and identify suit shapes#
        ##------------------------------------------------------------------#
        ## double suited#
        if (tmp.nch == 8) {#
            tmp.suits   <- c("x","x","y","y")#
            tmp.color   <- c("ds")#
        ## single suited#
        } else if (tmp.nch == 6) {#
            ## (XY)ZW [1,4]#
            if ((tmp.lp == 1) & (tmp.rp == 4)) {#
                tmp.suits   <- c("x","x","y","z")#
                tmp.color   <- c("ss.2o")#
            ## X(YZ)W [2,5]#
            } else if ((tmp.lp == 2) & (tmp.rp == 5)) {#
                tmp.suits   <- c("x","y","y","z")#
                tmp.color   <- c("ss.2o")#
            ## XY(ZW) [3,6]#
            } else if ((tmp.lp == 3) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","y","z","z")#
                tmp.color   <- c("ss.2o")#
            ## (XYZ)W [1,5]#
            } else if ((tmp.lp == 1) & (tmp.rp == 5)) {#
                tmp.suits   <- c("x","x","x","y")#
                tmp.color   <- c("ss.1o")#
            ## X(YZW) [2,6]#
            } else if ((tmp.lp == 2) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","y","y","y")#
                tmp.color   <- c("ss.1o")#
            ## (XYZW) [1,6]#
            } else if ((tmp.lp == 1) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","x","x","x")#
                tmp.color   <- c("mo")#
            }#
        ## rainbow#
        } else if (tmp.nch == 4) {#
            tmp.suits   <- c("x","y","z","w")#
            tmp.color   <- c("rb")#
        ## error#
        } else {#
            stop("unexpected string lenght\n")#
        }#
        hand.shape[i,1]     <- appendSuits(tmp.ranks, tmp.suits)#
        suit.shape[i,1]     <- tmp.color#
        ##------------------------------------------------------------------#
        ## Identify pair types#
        ##------------------------------------------------------------------#
        if (max(tmp.tbl) == 4) {#
            tmp.count   <- c("4k")#
            tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
            tmp.lopair  <- NA#
        } else if (max(tmp.tbl) == 3) {#
            tmp.count   <- c("3k")#
            tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
            tmp.lopair  <- NA#
        } else if (max(tmp.tbl == 2)) {#
            if (tmp.unq == 2) {#
                tmp.count   <- c("2p")#
                tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
                tmp.lopair  <- glob.rank[max(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
            } else {#
                tmp.count   <- c("1p")#
                tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
                tmp.lopair  <- NA#
            }#
        } else {#
            tmp.count   <- c("0p")#
            tmp.hipair  <- NA#
            tmp.lopair  <- NA#
        }#
        pair.shape[i,1]     <- tmp.count#
        pair.ranks[i,]      <- c(tmp.hipair, tmp.lopair)#
        ##------------------------------------------------------------------#
        ## Identify high card#
        ##------------------------------------------------------------------#
        high.card[i,]  <- glob.rank[which(glob.num == max(tmp.nums))]#
        ##------------------------------------------------------------------#
        ## Identify high card#
        ##------------------------------------------------------------------#
        ## get suits tied to the high card#
        hi.suits        <- tmp.suits[which(tmp.ranks %in% high.card[i,])]#
        non.hi.suits    <- tmp.suits[which(!(tmp.ranks %in% high.card[i,]))]#
        if (length(which(hi.suits %in% non.hi.suits)) > 0) {#
            high.suited[i,] <- "Y"#
        } else {#
            high.suited[i,] <- "N"#
        }#
        ##------------------------------------------------------------------#
        ## Identify connectedness#
        ##------------------------------------------------------------------#
        ## pure rundown variants#
        if (all(tmp.gaps == 1)) {#
            tmp.conn    <- "rd.0g"#
        } else if ( all(tmp.gaps == 2)) {#
            tmp.conn    <- "rd.1g"#
        } else if (all(tmp.gaps == 3)) {#
            tmp.conn    <- "rd.2g"#
        ## connected 2-pair#
        } else if ( (tmp.gaps[1] == 0) & (tmp.gaps[3] == 0) & (tmp.gaps[2] %in% c(1,2,3)) ) {#
            tmp.conn    <- "2p.conn"#
        ## rundown plus pair#
        } else if ( (sum(tmp.gaps==0)==1) & (sum(tmp.gaps==1)==2) ) {#
            tmp.conn    <- "rd.1p"#
        ## single gap rundown#
        } else if ( (sum(tmp.gaps==2)==1) & (sum(tmp.gaps==1)==2) ) {#
            tmp.conn    <- "rd.1g"#
#
        ## double gap rundown#
        } else if ( (sum(tmp.gaps==3)==1) & (sum(tmp.gaps==1)==2) ) {#
            tmp.conn    <- "rd.2g"#
#
        ## triple gap rundown#
        } else if ( (sum(tmp.gaps==4)==1) & (sum(tmp.gaps==1)==2) ) {#
            tmp.conn    <- "rd.3g"#
#
        ## dangler gap rundown#
        } else if ( (sum(tmp.gaps>4)==1) & (sum(tmp.gaps==1)==2) ) {#
            tmp.conn    <- "rd.dg"#
#
        ## 2x single gap rundown#
        } else if ( (sum(tmp.gaps==1)==1) & (sum(tmp.gaps==2)==2) ) {#
            tmp.conn    <- "rd.2x1g"#
#
        ## 2x double gap rundown#
        } else if ( (sum(tmp.gaps==1)==1) & (sum(tmp.gaps==3)==2) ) {#
            tmp.conn    <- "rd.2x2g"#
        ## default#
        } else {#
            tmp.conn    <- NA#
        }#
        rank.conn[i,]   <- tmp.conn#
        ##------------------------------------------------------------------#
        ## Consolidate gap data#
        ##------------------------------------------------------------------#
        rank.gaps[i,]   <- paste(tmp.gaps, collapse=":")#
#
    }#
    ## consolidate#
    hand.data   <- data.frame(  hand=hand.shape,#
                                suit=suit.shape,#
                                pair=pair.shape,#
                                ranks=pair.ranks,#
                                highCard=high.card,#
                                highSuited=high.suited,#
                                conn=rank.conn,#
                                gaps=rank.gaps)#
#
    colnames(hand.data) <- c("hand","suit","pair","hiPair","loPair","hiCard","hiSuited","conn","gaps")
hand.data[1400:1440,]
## "global" rank/number vectors#
    glob.num     <- seq(13, 1, -1)#
    glob.rank    <- c("A", "K", "Q", "J", "T", "9", "8", "7", "6", "5", "4", "3", "2")#
    ## process the filename#
    tmp.file    <- unlist(strsplit(in.file, "[.]"))#
    out.file    <- paste0(tmp.file[1], "_genericSyntax_DEBUG", ".", tmp.file[2])#
#
    ## read the input file#
    hf          <- read.csv(in.file, header=FALSE)#
    ## create output matrices#
    hand.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    suit.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    pair.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    pair.ranks  <- matrix(,nrow=nrow(hf), ncol=2)#
    high.card   <- matrix(,nrow=nrow(hf), ncol=1)#
    high.suited <- matrix(,nrow=nrow(hf), ncol=1)#
    rank.conn   <- matrix(,nrow=nrow(hf), ncol=1)#
    rank.gaps   <- matrix(,nrow=nrow(hf), ncol=1)#
#
    ## loop over each row in the file and process the ranked hand#
    for (i in 1:nrow(hf)) {#
        #for (i in 1:1147) {#
        ## process a hand#
        tmp.ch      <- unlist(strsplit(as.character(hf[i,]), ""))   ## split hand into individual characters#
        tmp.nch     <- length(tmp.ch)                               ## count number of characters#
        tmp.lp      <- which(tmp.ch %in% c("("))                    ## location of left parentheses#
        tmp.rp      <- which(tmp.ch %in% c(")"))                    ## location of right parentheses#
        tmp.ranks   <- tmp.ch[which(!(tmp.ch %in% c("(",")")))]     ## extract ranks#
        ## get hand shape infp#
        tmp.nums    <- rankToNum(glob.num, glob.rank, tmp.ranks)    ## convert ranks to (sorted) numbers#
        tmp.gaps    <- abs(diff(tmp.nums))                          ## calculate gap sizes#
        tmp.unq     <- length(unique(tmp.nums))                     ## number of unique#
        tmp.tbl     <- table(tmp.ranks)#
        ##------------------------------------------------------------------#
        ## the if/then processes the hand based on the length, and#
        ## for single-suited suited hands it will use the location#
        ## of the right and left parentheses to assign the suits#
        ##------------------------------------------------------------------#
        ##------------------------------------------------------------------#
        ## Deconstruct suits and identify suit shapes#
        ##------------------------------------------------------------------#
        ## double suited#
        if (tmp.nch == 8) {#
            tmp.suits   <- c("x","x","y","y")#
            tmp.color   <- c("ds")#
        ## single suited#
        } else if (tmp.nch == 6) {#
            ## (XY)ZW [1,4]#
            if ((tmp.lp == 1) & (tmp.rp == 4)) {#
                tmp.suits   <- c("x","x","y","z")#
                tmp.color   <- c("ss.2o")#
            ## X(YZ)W [2,5]#
            } else if ((tmp.lp == 2) & (tmp.rp == 5)) {#
                tmp.suits   <- c("x","y","y","z")#
                tmp.color   <- c("ss.2o")#
            ## XY(ZW) [3,6]#
            } else if ((tmp.lp == 3) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","y","z","z")#
                tmp.color   <- c("ss.2o")#
            ## (XYZ)W [1,5]#
            } else if ((tmp.lp == 1) & (tmp.rp == 5)) {#
                tmp.suits   <- c("x","x","x","y")#
                tmp.color   <- c("ss.1o")#
            ## X(YZW) [2,6]#
            } else if ((tmp.lp == 2) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","y","y","y")#
                tmp.color   <- c("ss.1o")#
            ## (XYZW) [1,6]#
            } else if ((tmp.lp == 1) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","x","x","x")#
                tmp.color   <- c("mo")#
            }#
        ## rainbow#
        } else if (tmp.nch == 4) {#
            tmp.suits   <- c("x","y","z","w")#
            tmp.color   <- c("rb")#
        ## error#
        } else {#
            stop("unexpected string lenght\n")#
        }#
        hand.shape[i,1]     <- appendSuits(tmp.ranks, tmp.suits)#
        suit.shape[i,1]     <- tmp.color#
        ##------------------------------------------------------------------#
        ## Identify pair types#
        ##------------------------------------------------------------------#
        if (max(tmp.tbl) == 4) {#
            tmp.count   <- c("4k")#
            tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
            tmp.lopair  <- NA#
        } else if (max(tmp.tbl) == 3) {#
            tmp.count   <- c("3k")#
            tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
            tmp.lopair  <- NA#
        } else if (max(tmp.tbl == 2)) {#
            if (tmp.unq == 2) {#
                tmp.count   <- c("2p")#
                tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
                tmp.lopair  <- glob.rank[max(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
            } else {#
                tmp.count   <- c("1p")#
                tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
                tmp.lopair  <- NA#
            }#
        } else {#
            tmp.count   <- c("0p")#
            tmp.hipair  <- NA#
            tmp.lopair  <- NA#
        }#
        pair.shape[i,1]     <- tmp.count#
        pair.ranks[i,]      <- c(tmp.hipair, tmp.lopair)#
        ##------------------------------------------------------------------#
        ## Identify high card#
        ##------------------------------------------------------------------#
        high.card[i,]  <- glob.rank[which(glob.num == max(tmp.nums))]#
        ##------------------------------------------------------------------#
        ## Identify high card#
        ##------------------------------------------------------------------#
        ## get suits tied to the high card#
        hi.suits        <- tmp.suits[which(tmp.ranks %in% high.card[i,])]#
        non.hi.suits    <- tmp.suits[which(!(tmp.ranks %in% high.card[i,]))]#
        if (length(which(hi.suits %in% non.hi.suits)) > 0) {#
            high.suited[i,] <- "Y"#
        } else {#
            high.suited[i,] <- "N"#
        }#
        ##------------------------------------------------------------------#
        ## Identify connectedness#
        ##------------------------------------------------------------------#
        ## pure rundown variants#
        if (all(tmp.gaps == 1)) {#
            tmp.conn    <- "rd.0g"#
        } else if ( all(tmp.gaps == 2)) {#
            tmp.conn    <- "rd.1g"#
        } else if (all(tmp.gaps == 3)) {#
            tmp.conn    <- "rd.2g"#
        ## connected 2-pair#
        } else if ( (tmp.gaps[1] == 0) & (tmp.gaps[3] == 0) & (tmp.gaps[2] %in% c(1,2,3)) ) {#
            tmp.conn    <- "2p.conn"#
        ## rundown plus pair#
        } else if ( (sum(tmp.gaps==0)==1) & (sum(tmp.gaps==1)==2) ) {#
            tmp.conn    <- "rd.1p"#
        ## single gap rundown#
        } else if ( (sum(tmp.gaps==2)==1) & (sum(tmp.gaps==1)==2) ) {#
            tmp.conn    <- "rd.1g"#
#
        ## double gap rundown#
        } else if ( (sum(tmp.gaps==3)==1) & (sum(tmp.gaps==1)==2) ) {#
            tmp.conn    <- "rd.2g"#
#
        ## triple gap rundown#
        } else if ( (sum(tmp.gaps==4)==1) & (sum(tmp.gaps==1)==2) ) {#
            tmp.conn    <- "rd.3g"#
#
        ## dangler gap rundown#
        } else if ( (sum(tmp.gaps>4)==1) & (sum(tmp.gaps==1)==2) ) {#
            tmp.conn    <- "rd.dg"#
#
        ## 2x single gap rundown#
        } else if ( (sum(tmp.gaps==1)==1) & (sum(tmp.gaps==2)==2) ) {#
            tmp.conn    <- "rd.2x1g"#
#
        ## 2x double gap rundown#
        } else if ( (sum(tmp.gaps==1)==1) & (sum(tmp.gaps==3)==2) ) {#
            tmp.conn    <- "rd.2x2g"#
        ## connected single-pair#
        } else if ( (sum(tmp.gaps==0)==1) & (sum(tmp.gaps==1)==1) & (sum(tmp.gaps==2)==1) ) {#
            tmp.conn    <- "1p.conn"#
        ## default#
        } else {#
            tmp.conn    <- NA#
        }#
        rank.conn[i,]   <- tmp.conn#
        ##------------------------------------------------------------------#
        ## Consolidate gap data#
        ##------------------------------------------------------------------#
        rank.gaps[i,]   <- paste(tmp.gaps, collapse=":")#
#
    }#
    ## consolidate#
    hand.data   <- data.frame(  hand=hand.shape,#
                                suit=suit.shape,#
                                pair=pair.shape,#
                                ranks=pair.ranks,#
                                highCard=high.card,#
                                highSuited=high.suited,#
                                conn=rank.conn,#
                                gaps=rank.gaps)#
#
    colnames(hand.data) <- c("hand","suit","pair","hiPair","loPair","hiCard","hiSuited","conn","gaps")
hand.data[1400:1440,]
##------------------------------------------------------------------#
## Clear the workspace#
##------------------------------------------------------------------#
rm(list=ls())#
#
##------------------------------------------------------------------#
## Set the working directory#
##------------------------------------------------------------------#
setwd("/Users/alexstephens/Development/poker/omaha_hi/data/pptoo/OmahaHi")#
#
##------------------------------------------------------------------#
## The PPT hands Omaha hands have the follow structures#
##------------------------------------------------------------------#
## XYZW#
## (XY)ZW#
## X(YZ)W#
## XY(ZW)#
## (XYZ)W#
## X(YZW)#
## (XYZW)#
## (XY)(ZW)#
##------------------------------------------------------------------#
#
##------------------------------------------------------------------#
## The goal is to convert these into the PPT generic syntax format#
##------------------------------------------------------------------#
## E.g., translate (AJ)(AJ) --> AxJxAyJy (double-suited double-pair)#
##------------------------------------------------------------------#
##------------------------------------------------------------------#
## <function> appendSuits#
##------------------------------------------------------------------#
## Takes a hand character vector, e.g., c("A","J","A","J") and#
## appends a suit character vector, e.g., c("x", "x", "y", "y")#
##------------------------------------------------------------------#
appendSuits <- function(h, s) {#
    return(paste(paste(h,s,sep=""), collapse=""))#
}#
#
##------------------------------------------------------------------#
## <function> rankToNum#
##------------------------------------------------------------------#
## Given a hand (e.g., c("A","J","A","J")), translate the ranks into#
## numerical equivalents (e.g., A=13, K=12, ... 3=2, 2=1)#
##------------------------------------------------------------------#
rankToNum <- function(n, r, hr) {#
    n[match(hr, r)]#
    return(sort(n[match(hr, r)], decreasing=TRUE))#
}#
##------------------------------------------------------------------#
## <function> processHandFile#
##------------------------------------------------------------------#
## Takes a PPT Omaha hand file as an input and writes the translated#
## format to a file.  The output filename contains the "_genericSyntax"#
## postfix.#
##------------------------------------------------------------------#
processHandFile <- function(in.file) {#
#
    ## "global" rank/number vectors#
    glob.num     <- seq(13, 1, -1)#
    glob.rank    <- c("A", "K", "Q", "J", "T", "9", "8", "7", "6", "5", "4", "3", "2")#
    ## process the filename#
    tmp.file    <- unlist(strsplit(in.file, "[.]"))#
    out.file    <- paste0(tmp.file[1], "_genericSyntax_DEBUG", ".", tmp.file[2])#
#
    ## read the input file#
    hf          <- read.csv(in.file, header=FALSE)#
    ## create output matrices#
    hand.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    suit.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    pair.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    pair.ranks  <- matrix(,nrow=nrow(hf), ncol=2)#
    high.card   <- matrix(,nrow=nrow(hf), ncol=1)#
    high.suited <- matrix(,nrow=nrow(hf), ncol=1)#
    rank.conn   <- matrix(,nrow=nrow(hf), ncol=1)#
    rank.gaps   <- matrix(,nrow=nrow(hf), ncol=1)#
#
    ## loop over each row in the file and process the ranked hand#
    for (i in 1:nrow(hf)) {#
        #for (i in 1:1147) {#
        ## process a hand#
        tmp.ch      <- unlist(strsplit(as.character(hf[i,]), ""))   ## split hand into individual characters#
        tmp.nch     <- length(tmp.ch)                               ## count number of characters#
        tmp.lp      <- which(tmp.ch %in% c("("))                    ## location of left parentheses#
        tmp.rp      <- which(tmp.ch %in% c(")"))                    ## location of right parentheses#
        tmp.ranks   <- tmp.ch[which(!(tmp.ch %in% c("(",")")))]     ## extract ranks#
        ## get hand shape infp#
        tmp.nums    <- rankToNum(glob.num, glob.rank, tmp.ranks)    ## convert ranks to (sorted) numbers#
        tmp.gaps    <- abs(diff(tmp.nums))                          ## calculate gap sizes#
        tmp.unq     <- length(unique(tmp.nums))                     ## number of unique#
        tmp.tbl     <- table(tmp.ranks)#
        ##------------------------------------------------------------------#
        ## the if/then processes the hand based on the length, and#
        ## for single-suited suited hands it will use the location#
        ## of the right and left parentheses to assign the suits#
        ##------------------------------------------------------------------#
        ##------------------------------------------------------------------#
        ## Deconstruct suits and identify suit shapes#
        ##------------------------------------------------------------------#
        ## double suited#
        if (tmp.nch == 8) {#
            tmp.suits   <- c("x","x","y","y")#
            tmp.color   <- c("ds")#
        ## single suited#
        } else if (tmp.nch == 6) {#
            ## (XY)ZW [1,4]#
            if ((tmp.lp == 1) & (tmp.rp == 4)) {#
                tmp.suits   <- c("x","x","y","z")#
                tmp.color   <- c("ss.2o")#
            ## X(YZ)W [2,5]#
            } else if ((tmp.lp == 2) & (tmp.rp == 5)) {#
                tmp.suits   <- c("x","y","y","z")#
                tmp.color   <- c("ss.2o")#
            ## XY(ZW) [3,6]#
            } else if ((tmp.lp == 3) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","y","z","z")#
                tmp.color   <- c("ss.2o")#
            ## (XYZ)W [1,5]#
            } else if ((tmp.lp == 1) & (tmp.rp == 5)) {#
                tmp.suits   <- c("x","x","x","y")#
                tmp.color   <- c("ss.1o")#
            ## X(YZW) [2,6]#
            } else if ((tmp.lp == 2) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","y","y","y")#
                tmp.color   <- c("ss.1o")#
            ## (XYZW) [1,6]#
            } else if ((tmp.lp == 1) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","x","x","x")#
                tmp.color   <- c("mo")#
            }#
        ## rainbow#
        } else if (tmp.nch == 4) {#
            tmp.suits   <- c("x","y","z","w")#
            tmp.color   <- c("rb")#
        ## error#
        } else {#
            stop("unexpected string lenght\n")#
        }#
        hand.shape[i,1]     <- appendSuits(tmp.ranks, tmp.suits)#
        suit.shape[i,1]     <- tmp.color#
        ##------------------------------------------------------------------#
        ## Identify pair types#
        ##------------------------------------------------------------------#
        if (max(tmp.tbl) == 4) {#
            tmp.count   <- c("4k")#
            tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
            tmp.lopair  <- NA#
        } else if (max(tmp.tbl) == 3) {#
            tmp.count   <- c("3k")#
            tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
            tmp.lopair  <- NA#
        } else if (max(tmp.tbl == 2)) {#
            if (tmp.unq == 2) {#
                tmp.count   <- c("2p")#
                tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
                tmp.lopair  <- glob.rank[max(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
            } else {#
                tmp.count   <- c("1p")#
                tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
                tmp.lopair  <- NA#
            }#
        } else {#
            tmp.count   <- c("0p")#
            tmp.hipair  <- NA#
            tmp.lopair  <- NA#
        }#
        pair.shape[i,1]     <- tmp.count#
        pair.ranks[i,]      <- c(tmp.hipair, tmp.lopair)#
        ##------------------------------------------------------------------#
        ## Identify high card#
        ##------------------------------------------------------------------#
        high.card[i,]  <- glob.rank[which(glob.num == max(tmp.nums))]#
        ##------------------------------------------------------------------#
        ## Identify high card#
        ##------------------------------------------------------------------#
        ## get suits tied to the high card#
        hi.suits        <- tmp.suits[which(tmp.ranks %in% high.card[i,])]#
        non.hi.suits    <- tmp.suits[which(!(tmp.ranks %in% high.card[i,]))]#
        if (length(which(hi.suits %in% non.hi.suits)) > 0) {#
            high.suited[i,] <- "Y"#
        } else {#
            high.suited[i,] <- "N"#
        }#
        ##------------------------------------------------------------------#
        ## Identify connectedness#
        ##------------------------------------------------------------------#
        ## pure rundown variants#
        if (all(tmp.gaps == 1)) {#
            tmp.conn    <- "rd.0g"#
        } else if ( all(tmp.gaps == 2)) {#
            tmp.conn    <- "rd.1g"#
        } else if (all(tmp.gaps == 3)) {#
            tmp.conn    <- "rd.2g"#
        ## connected 2-pair#
        } else if ( (tmp.gaps[1] == 0) & (tmp.gaps[3] == 0) & (tmp.gaps[2] %in% c(1,2,3)) ) {#
            tmp.conn    <- "2p.conn"#
        ## rundown plus pair#
        } else if ( (sum(tmp.gaps==0)==1) & (sum(tmp.gaps==1)==2) ) {#
            tmp.conn    <- "rd.1p"#
        ## single gap rundown#
        } else if ( (sum(tmp.gaps==2)==1) & (sum(tmp.gaps==1)==2) ) {#
            tmp.conn    <- "rd.1g"#
#
        ## double gap rundown#
        } else if ( (sum(tmp.gaps==3)==1) & (sum(tmp.gaps==1)==2) ) {#
            tmp.conn    <- "rd.2g"#
#
        ## triple gap rundown#
        } else if ( (sum(tmp.gaps==4)==1) & (sum(tmp.gaps==1)==2) ) {#
            tmp.conn    <- "rd.3g"#
#
        ## dangler gap rundown#
        } else if ( (sum(tmp.gaps>4)==1) & (sum(tmp.gaps==1)==2) ) {#
            tmp.conn    <- "rd.dg"#
#
        ## 2x single gap rundown#
        } else if ( (sum(tmp.gaps==1)==1) & (sum(tmp.gaps==2)==2) ) {#
            tmp.conn    <- "rd.2x1g"#
#
        ## 2x double gap rundown#
        } else if ( (sum(tmp.gaps==1)==1) & (sum(tmp.gaps==3)==2) ) {#
            tmp.conn    <- "rd.2x2g"#
        ## connected single-pair#
        } else if ( (sum(tmp.gaps==0)==1) & (sum(tmp.gaps==1)==1) & (sum(tmp.gaps==2)==1) ) {#
            tmp.conn    <- "1p.conn"#
        ## default#
        } else {#
            tmp.conn    <- NA#
        }#
        rank.conn[i,]   <- tmp.conn#
        ##------------------------------------------------------------------#
        ## Consolidate gap data#
        ##------------------------------------------------------------------#
        rank.gaps[i,]   <- paste(tmp.gaps, collapse=":")#
#
    }#
    ## consolidate#
    hand.data   <- data.frame(  hand=hand.shape,#
                                suit=suit.shape,#
                                pair=pair.shape,#
                                ranks=pair.ranks,#
                                highCard=high.card,#
                                highSuited=high.suited,#
                                conn=rank.conn,#
                                gaps=rank.gaps)#
#
    colnames(hand.data) <- c("hand","suit","pair","hiPair","loPair","hiCard","hiSuited","conn","gaps")#
    ## save the output as a file#
    #write.table(ho, file=out.file, row.names=FALSE, col.names=FALSE)#
    return(list(hd=hand.data))#
}
plo_6max.list   <- processHandFile("ppt_plo_handrankings_06handed.txt")
head(plo_6max.list[["hd"]])
head(plo_6max.list[["hd"]], 40)
head(ho)
##------------------------------------------------------------------#
## Clear the workspace#
##------------------------------------------------------------------#
rm(list=ls())#
#
##------------------------------------------------------------------#
## Set the working directory#
##------------------------------------------------------------------#
setwd("/Users/alexstephens/Development/poker/omaha_hi/data/pptoo/OmahaHi")#
#
##------------------------------------------------------------------#
## The PPT hands Omaha hands have the follow structures#
##------------------------------------------------------------------#
## XYZW#
## (XY)ZW#
## X(YZ)W#
## XY(ZW)#
## (XYZ)W#
## X(YZW)#
## (XYZW)#
## (XY)(ZW)#
##------------------------------------------------------------------#
#
##------------------------------------------------------------------#
## The goal is to convert these into the PPT generic syntax format#
##------------------------------------------------------------------#
## E.g., translate (AJ)(AJ) --> AxJxAyJy (double-suited double-pair)#
##------------------------------------------------------------------#
##------------------------------------------------------------------#
## <function> appendSuits#
##------------------------------------------------------------------#
## Takes a hand character vector, e.g., c("A","J","A","J") and#
## appends a suit character vector, e.g., c("x", "x", "y", "y")#
##------------------------------------------------------------------#
appendSuits <- function(h, s) {#
    return(paste(paste(h,s,sep=""), collapse=""))#
}#
#
##------------------------------------------------------------------#
## <function> rankToNum#
##------------------------------------------------------------------#
## Given a hand (e.g., c("A","J","A","J")), translate the ranks into#
## numerical equivalents (e.g., A=13, K=12, ... 3=2, 2=1)#
##------------------------------------------------------------------#
rankToNum <- function(n, r, hr) {#
    n[match(hr, r)]#
    return(sort(n[match(hr, r)], decreasing=TRUE))#
}#
##------------------------------------------------------------------#
## <function> processHandFile#
##------------------------------------------------------------------#
## Takes a PPT Omaha hand file as an input and writes the translated#
## format to a file.  The output filename contains the "_genericSyntax"#
## postfix.#
##------------------------------------------------------------------#
processHandFile <- function(in.file) {#
#
    ## "global" rank/number vectors#
    glob.num     <- seq(13, 1, -1)#
    glob.rank    <- c("A", "K", "Q", "J", "T", "9", "8", "7", "6", "5", "4", "3", "2")#
    ## process the filename#
    tmp.file    <- unlist(strsplit(in.file, "[.]"))#
    out.file    <- paste0(tmp.file[1], "_genericSyntax_DEBUG", ".", tmp.file[2])#
#
    ## read the input file#
    hf          <- read.csv(in.file, header=FALSE)#
    ## create output matrices#
    hand.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    suit.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    pair.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    pair.ranks  <- matrix(,nrow=nrow(hf), ncol=2)#
    high.card   <- matrix(,nrow=nrow(hf), ncol=1)#
    high.suited <- matrix(,nrow=nrow(hf), ncol=1)#
    rank.conn   <- matrix(,nrow=nrow(hf), ncol=1)#
    rank.gaps   <- matrix(,nrow=nrow(hf), ncol=1)#
#
    ## loop over each row in the file and process the ranked hand#
    for (i in 1:nrow(hf)) {#
        #for (i in 1:1147) {#
        ## process a hand#
        tmp.ch      <- unlist(strsplit(as.character(hf[i,]), ""))   ## split hand into individual characters#
        tmp.nch     <- length(tmp.ch)                               ## count number of characters#
        tmp.lp      <- which(tmp.ch %in% c("("))                    ## location of left parentheses#
        tmp.rp      <- which(tmp.ch %in% c(")"))                    ## location of right parentheses#
        tmp.ranks   <- tmp.ch[which(!(tmp.ch %in% c("(",")")))]     ## extract ranks#
        ## get hand shape infp#
        tmp.nums    <- rankToNum(glob.num, glob.rank, tmp.ranks)    ## convert ranks to (sorted) numbers#
        tmp.gaps    <- abs(diff(tmp.nums))                          ## calculate gap sizes#
        tmp.unq     <- length(unique(tmp.nums))                     ## number of unique#
        tmp.tbl     <- table(tmp.ranks)#
        ##------------------------------------------------------------------#
        ## the if/then processes the hand based on the length, and#
        ## for single-suited suited hands it will use the location#
        ## of the right and left parentheses to assign the suits#
        ##------------------------------------------------------------------#
        ##------------------------------------------------------------------#
        ## Deconstruct suits and identify suit shapes#
        ##------------------------------------------------------------------#
        ## double suited#
        if (tmp.nch == 8) {#
            tmp.suits   <- c("x","x","y","y")#
            tmp.color   <- c("ds")#
        ## single suited#
        } else if (tmp.nch == 6) {#
            ## (XY)ZW [1,4]#
            if ((tmp.lp == 1) & (tmp.rp == 4)) {#
                tmp.suits   <- c("x","x","y","z")#
                tmp.color   <- c("ss.2o")#
            ## X(YZ)W [2,5]#
            } else if ((tmp.lp == 2) & (tmp.rp == 5)) {#
                tmp.suits   <- c("x","y","y","z")#
                tmp.color   <- c("ss.2o")#
            ## XY(ZW) [3,6]#
            } else if ((tmp.lp == 3) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","y","z","z")#
                tmp.color   <- c("ss.2o")#
            ## (XYZ)W [1,5]#
            } else if ((tmp.lp == 1) & (tmp.rp == 5)) {#
                tmp.suits   <- c("x","x","x","y")#
                tmp.color   <- c("ss.1o")#
            ## X(YZW) [2,6]#
            } else if ((tmp.lp == 2) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","y","y","y")#
                tmp.color   <- c("ss.1o")#
            ## (XYZW) [1,6]#
            } else if ((tmp.lp == 1) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","x","x","x")#
                tmp.color   <- c("mo")#
            }#
        ## rainbow#
        } else if (tmp.nch == 4) {#
            tmp.suits   <- c("x","y","z","w")#
            tmp.color   <- c("rb")#
        ## error#
        } else {#
            stop("unexpected string lenght\n")#
        }#
        hand.shape[i,1]     <- appendSuits(tmp.ranks, tmp.suits)#
        suit.shape[i,1]     <- tmp.color#
        ##------------------------------------------------------------------#
        ## Identify pair types#
        ##------------------------------------------------------------------#
        if (max(tmp.tbl) == 4) {#
            tmp.count   <- c("4k")#
            tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
            tmp.lopair  <- NA#
        } else if (max(tmp.tbl) == 3) {#
            tmp.count   <- c("3k")#
            tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
            tmp.lopair  <- NA#
        } else if (max(tmp.tbl == 2)) {#
            if (tmp.unq == 2) {#
                tmp.count   <- c("2p")#
                tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
                tmp.lopair  <- glob.rank[max(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
            } else {#
                tmp.count   <- c("1p")#
                tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
                tmp.lopair  <- NA#
            }#
        } else {#
            tmp.count   <- c("0p")#
            tmp.hipair  <- NA#
            tmp.lopair  <- NA#
        }#
        pair.shape[i,1]     <- tmp.count#
        pair.ranks[i,]      <- c(tmp.hipair, tmp.lopair)#
        ##------------------------------------------------------------------#
        ## Identify high card#
        ##------------------------------------------------------------------#
        high.card[i,]  <- glob.rank[which(glob.num == max(tmp.nums))]#
        ##------------------------------------------------------------------#
        ## Identify high card#
        ##------------------------------------------------------------------#
        ## get suits tied to the high card#
        hi.suits        <- tmp.suits[which(tmp.ranks %in% high.card[i,])]#
        non.hi.suits    <- tmp.suits[which(!(tmp.ranks %in% high.card[i,]))]#
        if (length(which(hi.suits %in% non.hi.suits)) > 0) {#
            high.suited[i,] <- "Y"#
        } else {#
            high.suited[i,] <- "N"#
        }#
        ##------------------------------------------------------------------#
        ## Identify connectedness#
        ##------------------------------------------------------------------#
        ## pure rundown variants#
        if (all(tmp.gaps == 1)) {#
            tmp.conn    <- "rd.0g"#
        } else if ( all(tmp.gaps == 2)) {#
            tmp.conn    <- "rd.1g"#
        } else if (all(tmp.gaps == 3)) {#
            tmp.conn    <- "rd.2g"#
        ## connected 2-pair#
        } else if ( (tmp.gaps[1] == 0) & (tmp.gaps[3] == 0) & (tmp.gaps[2] %in% c(1,2,3)) ) {#
            tmp.conn    <- "2p.conn"#
        ## rundown plus pair#
        } else if ( (sum(tmp.gaps==0)==1) & (sum(tmp.gaps==1)==2) ) {#
            tmp.conn    <- "rd.1p"#
        ## single gap rundown#
        } else if ( (sum(tmp.gaps==2)==1) & (sum(tmp.gaps==1)==2) ) {#
            tmp.conn    <- "rd.1g"#
#
        ## double gap rundown#
        } else if ( (sum(tmp.gaps==3)==1) & (sum(tmp.gaps==1)==2) ) {#
            tmp.conn    <- "rd.2g"#
#
        ## triple gap rundown#
        } else if ( (sum(tmp.gaps==4)==1) & (sum(tmp.gaps==1)==2) ) {#
            tmp.conn    <- "rd.3g"#
#
        ## dangler gap rundown#
        } else if ( (sum(tmp.gaps>4)==1) & (sum(tmp.gaps==1)==2) ) {#
            tmp.conn    <- "rd.dg"#
#
        ## 2x single gap rundown#
        } else if ( (sum(tmp.gaps==1)==1) & (sum(tmp.gaps==2)==2) ) {#
            tmp.conn    <- "rd.2x1g"#
#
        ## 2x double gap rundown#
        } else if ( (sum(tmp.gaps==1)==1) & (sum(tmp.gaps==3)==2) ) {#
            tmp.conn    <- "rd.2x2g"#
        ## connected single-pair#
        } else if ( (sum(tmp.gaps==0)==1) & (sum(tmp.gaps==1)==1) & (sum(tmp.gaps==2)==1) ) {#
            tmp.conn    <- "1p.conn"#
        ## default#
        } else {#
            tmp.conn    <- NA#
        }#
        rank.conn[i,]   <- tmp.conn#
        ##------------------------------------------------------------------#
        ## Consolidate gap data#
        ##------------------------------------------------------------------#
        rank.gaps[i,]   <- paste(tmp.gaps, collapse=":")#
#
    }#
    ## consolidate#
    hand.data   <- data.frame(  hand=hand.shape,#
                                suit=suit.shape,#
                                pair=pair.shape,#
                                ranks=pair.ranks,#
                                highCard=high.card,#
                                highSuited=high.suited,#
                                conn=rank.conn,#
                                gaps=rank.gaps)#
#
    colnames(hand.data) <- c("hand","suit","pair","hiPair","loPair","hiCard","hiSuited","conn","gaps")#
    ## save the output as a file#
    #write.table(ho, file=out.file, row.names=FALSE, col.names=FALSE)#
    return(list(ho=ho, hd=hand.data))#
}#
##------------------------------------------------------------------#
## <main> process hands#
##------------------------------------------------------------------#
#
##processHandFile("ppt_plo_handrankings_03handed.txt")#
#
plo_6max.list   <- processHandFile("ppt_plo_handrankings_06handed.txt")
##------------------------------------------------------------------#
## The purpose of this script is to parse the Pro Poker Tools (PPT)#
## hand ranking file #
##------------------------------------------------------------------#
#
##------------------------------------------------------------------#
## Clear the workspace#
##------------------------------------------------------------------#
rm(list=ls())#
#
##------------------------------------------------------------------#
## Set the working directory#
##------------------------------------------------------------------#
setwd("/Users/alexstephens/Development/poker/omaha_hi/data/pptoo/OmahaHi")#
#
##------------------------------------------------------------------#
## The PPT hands Omaha hands have the follow structures#
##------------------------------------------------------------------#
## XYZW#
## (XY)ZW#
## X(YZ)W#
## XY(ZW)#
## (XYZ)W#
## X(YZW)#
## (XYZW)#
## (XY)(ZW)#
##------------------------------------------------------------------#
#
##------------------------------------------------------------------#
## The goal is to convert these into the PPT generic syntax format#
##------------------------------------------------------------------#
## E.g., translate (AJ)(AJ) --> AxJxAyJy (double-suited double-pair)#
##------------------------------------------------------------------#
##------------------------------------------------------------------#
## <function> appendSuits#
##------------------------------------------------------------------#
## Takes a hand character vector, e.g., c("A","J","A","J") and#
## appends a suit character vector, e.g., c("x", "x", "y", "y")#
##------------------------------------------------------------------#
appendSuits <- function(h, s) {#
    return(paste(paste(h,s,sep=""), collapse=""))#
}#
#
##------------------------------------------------------------------#
## <function> rankToNum#
##------------------------------------------------------------------#
## Given a hand (e.g., c("A","J","A","J")), translate the ranks into#
## numerical equivalents (e.g., A=13, K=12, ... 3=2, 2=1)#
##------------------------------------------------------------------#
rankToNum <- function(n, r, hr) {#
    n[match(hr, r)]#
    return(sort(n[match(hr, r)], decreasing=TRUE))#
}#
##------------------------------------------------------------------#
## <function> processHandFile#
##------------------------------------------------------------------#
## Takes a PPT Omaha hand file as an input and writes the translated#
## format to a file.  The output filename contains the "_genericSyntax"#
## postfix.#
##------------------------------------------------------------------#
processHandFile <- function(in.file) {#
#
    ## "global" rank/number vectors#
    glob.num     <- seq(13, 1, -1)#
    glob.rank    <- c("A", "K", "Q", "J", "T", "9", "8", "7", "6", "5", "4", "3", "2")#
    ## process the filename#
    tmp.file    <- unlist(strsplit(in.file, "[.]"))#
    out.file    <- paste0(tmp.file[1], "_genericSyntax_DEBUG", ".", tmp.file[2])#
#
    ## read the input file#
    hf          <- read.csv(in.file, header=FALSE)#
    ## create output matrices#
    hand.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    suit.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    pair.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    pair.ranks  <- matrix(,nrow=nrow(hf), ncol=2)#
    high.card   <- matrix(,nrow=nrow(hf), ncol=1)#
    high.suited <- matrix(,nrow=nrow(hf), ncol=1)#
    rank.conn   <- matrix(,nrow=nrow(hf), ncol=1)#
    rank.gaps   <- matrix(,nrow=nrow(hf), ncol=1)#
#
    ## loop over each row in the file and process the ranked hand#
    for (i in 1:nrow(hf)) {#
        #for (i in 1:1147) {#
        ## process a hand#
        tmp.ch      <- unlist(strsplit(as.character(hf[i,]), ""))   ## split hand into individual characters#
        tmp.nch     <- length(tmp.ch)                               ## count number of characters#
        tmp.lp      <- which(tmp.ch %in% c("("))                    ## location of left parentheses#
        tmp.rp      <- which(tmp.ch %in% c(")"))                    ## location of right parentheses#
        tmp.ranks   <- tmp.ch[which(!(tmp.ch %in% c("(",")")))]     ## extract ranks#
        ## get hand shape infp#
        tmp.nums    <- rankToNum(glob.num, glob.rank, tmp.ranks)    ## convert ranks to (sorted) numbers#
        tmp.gaps    <- abs(diff(tmp.nums))                          ## calculate gap sizes#
        tmp.unq     <- length(unique(tmp.nums))                     ## number of unique#
        tmp.tbl     <- table(tmp.ranks)#
        ##------------------------------------------------------------------#
        ## the if/then processes the hand based on the length, and#
        ## for single-suited suited hands it will use the location#
        ## of the right and left parentheses to assign the suits#
        ##------------------------------------------------------------------#
        ##------------------------------------------------------------------#
        ## Deconstruct suits and identify suit shapes#
        ##------------------------------------------------------------------#
        ## double suited#
        if (tmp.nch == 8) {#
            tmp.suits   <- c("x","x","y","y")#
            tmp.color   <- c("ds")#
        ## single suited#
        } else if (tmp.nch == 6) {#
            ## (XY)ZW [1,4]#
            if ((tmp.lp == 1) & (tmp.rp == 4)) {#
                tmp.suits   <- c("x","x","y","z")#
                tmp.color   <- c("ss.2o")#
            ## X(YZ)W [2,5]#
            } else if ((tmp.lp == 2) & (tmp.rp == 5)) {#
                tmp.suits   <- c("x","y","y","z")#
                tmp.color   <- c("ss.2o")#
            ## XY(ZW) [3,6]#
            } else if ((tmp.lp == 3) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","y","z","z")#
                tmp.color   <- c("ss.2o")#
            ## (XYZ)W [1,5]#
            } else if ((tmp.lp == 1) & (tmp.rp == 5)) {#
                tmp.suits   <- c("x","x","x","y")#
                tmp.color   <- c("ss.1o")#
            ## X(YZW) [2,6]#
            } else if ((tmp.lp == 2) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","y","y","y")#
                tmp.color   <- c("ss.1o")#
            ## (XYZW) [1,6]#
            } else if ((tmp.lp == 1) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","x","x","x")#
                tmp.color   <- c("mo")#
            }#
        ## rainbow#
        } else if (tmp.nch == 4) {#
            tmp.suits   <- c("x","y","z","w")#
            tmp.color   <- c("rb")#
        ## error#
        } else {#
            stop("unexpected string lenght\n")#
        }#
        hand.shape[i,1]     <- appendSuits(tmp.ranks, tmp.suits)#
        suit.shape[i,1]     <- tmp.color#
        ##------------------------------------------------------------------#
        ## Identify pair types#
        ##------------------------------------------------------------------#
        if (max(tmp.tbl) == 4) {#
            tmp.count   <- c("4k")#
            tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
            tmp.lopair  <- NA#
        } else if (max(tmp.tbl) == 3) {#
            tmp.count   <- c("3k")#
            tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
            tmp.lopair  <- NA#
        } else if (max(tmp.tbl == 2)) {#
            if (tmp.unq == 2) {#
                tmp.count   <- c("2p")#
                tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
                tmp.lopair  <- glob.rank[max(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
            } else {#
                tmp.count   <- c("1p")#
                tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
                tmp.lopair  <- NA#
            }#
        } else {#
            tmp.count   <- c("0p")#
            tmp.hipair  <- NA#
            tmp.lopair  <- NA#
        }#
        pair.shape[i,1]     <- tmp.count#
        pair.ranks[i,]      <- c(tmp.hipair, tmp.lopair)#
        ##------------------------------------------------------------------#
        ## Identify high card#
        ##------------------------------------------------------------------#
        high.card[i,]  <- glob.rank[which(glob.num == max(tmp.nums))]#
        ##------------------------------------------------------------------#
        ## Identify high card#
        ##------------------------------------------------------------------#
        ## get suits tied to the high card#
        hi.suits        <- tmp.suits[which(tmp.ranks %in% high.card[i,])]#
        non.hi.suits    <- tmp.suits[which(!(tmp.ranks %in% high.card[i,]))]#
        if (length(which(hi.suits %in% non.hi.suits)) > 0) {#
            high.suited[i,] <- "Y"#
        } else {#
            high.suited[i,] <- "N"#
        }#
        ##------------------------------------------------------------------#
        ## Identify connectedness#
        ##------------------------------------------------------------------#
        ## pure rundown variants#
        if (all(tmp.gaps == 1)) {#
            tmp.conn    <- "rd.0g"#
        } else if ( all(tmp.gaps == 2)) {#
            tmp.conn    <- "rd.1g"#
        } else if (all(tmp.gaps == 3)) {#
            tmp.conn    <- "rd.2g"#
        ## connected 2-pair#
        } else if ( (tmp.gaps[1] == 0) & (tmp.gaps[3] == 0) & (tmp.gaps[2] %in% c(1,2,3)) ) {#
            tmp.conn    <- "2p.conn"#
        ## rundown plus pair#
        } else if ( (sum(tmp.gaps==0)==1) & (sum(tmp.gaps==1)==2) ) {#
            tmp.conn    <- "rd.1p"#
        ## single gap rundown#
        } else if ( (sum(tmp.gaps==2)==1) & (sum(tmp.gaps==1)==2) ) {#
            tmp.conn    <- "rd.1g"#
#
        ## double gap rundown#
        } else if ( (sum(tmp.gaps==3)==1) & (sum(tmp.gaps==1)==2) ) {#
            tmp.conn    <- "rd.2g"#
#
        ## triple gap rundown#
        } else if ( (sum(tmp.gaps==4)==1) & (sum(tmp.gaps==1)==2) ) {#
            tmp.conn    <- "rd.3g"#
#
        ## dangler gap rundown#
        } else if ( (sum(tmp.gaps>4)==1) & (sum(tmp.gaps==1)==2) ) {#
            tmp.conn    <- "rd.dg"#
#
        ## 2x single gap rundown#
        } else if ( (sum(tmp.gaps==1)==1) & (sum(tmp.gaps==2)==2) ) {#
            tmp.conn    <- "rd.2x1g"#
#
        ## 2x double gap rundown#
        } else if ( (sum(tmp.gaps==1)==1) & (sum(tmp.gaps==3)==2) ) {#
            tmp.conn    <- "rd.2x2g"#
        ## connected single-pair#
        } else if ( (sum(tmp.gaps==0)==1) & (sum(tmp.gaps==1)==1) & (sum(tmp.gaps==2)==1) ) {#
            tmp.conn    <- "1p.conn"#
        ## default#
        } else {#
            tmp.conn    <- NA#
        }#
        rank.conn[i,]   <- tmp.conn#
        ##------------------------------------------------------------------#
        ## Consolidate gap data#
        ##------------------------------------------------------------------#
        rank.gaps[i,]   <- paste(tmp.gaps, collapse=":")#
#
    }#
    ## consolidate#
    hand.data   <- data.frame(  hand=hand.shape,#
                                suit=suit.shape,#
                                pair=pair.shape,#
                                ranks=pair.ranks,#
                                highCard=high.card,#
                                highSuited=high.suited,#
                                conn=rank.conn,#
                                gaps=rank.gaps)#
#
    colnames(hand.data) <- c("hand","suit","pair","hiPair","loPair","hiCard","hiSuited","conn","gaps")#
    ## save the output as a file#
    #write.table(hand.shape, file=out.file, row.names=FALSE, col.names=FALSE)#
    return(list(ho=hand.shape, hd=hand.data))#
}#
##------------------------------------------------------------------#
## <main> process hands#
##------------------------------------------------------------------#
#
##processHandFile("ppt_plo_handrankings_03handed.txt")#
#
plo_6max.list   <- processHandFile("ppt_plo_handrankings_06handed.txt")
names(plo_6max.list)
haed(plo_6max.list[["ho"]])
head(plo_6max.list[["ho"]])
head(plo_6max.list[["hd"]])
head(plo_6max.list[["hd"]][1100:1200,])
save(plo_6max.list, file="ppt_plo_handrankings_06handed.Rdata")
##------------------------------------------------------------------#
## The purpose of this script is to parse the Pro Poker Tools (PPT)#
## hand ranking file #
##------------------------------------------------------------------#
#
##------------------------------------------------------------------#
## Clear the workspace#
##------------------------------------------------------------------#
rm(list=ls())#
#
##------------------------------------------------------------------#
## Set the working directory#
##------------------------------------------------------------------#
setwd("/Users/alexstephens/Development/poker/omaha_hi/data/pptoo/OmahaHi")#
#
##------------------------------------------------------------------#
## The PPT hands Omaha hands have the follow structures#
##------------------------------------------------------------------#
## XYZW#
## (XY)ZW#
## X(YZ)W#
## XY(ZW)#
## (XYZ)W#
## X(YZW)#
## (XYZW)#
## (XY)(ZW)#
##------------------------------------------------------------------#
#
##------------------------------------------------------------------#
## The goal is to convert these into the PPT generic syntax format#
##------------------------------------------------------------------#
## E.g., translate (AJ)(AJ) --> AxJxAyJy (double-suited double-pair)#
##------------------------------------------------------------------#
##------------------------------------------------------------------#
## <function> appendSuits#
##------------------------------------------------------------------#
## Takes a hand character vector, e.g., c("A","J","A","J") and#
## appends a suit character vector, e.g., c("x", "x", "y", "y")#
##------------------------------------------------------------------#
appendSuits <- function(h, s) {#
    return(paste(paste(h,s,sep=""), collapse=""))#
}#
#
##------------------------------------------------------------------#
## <function> rankToNum#
##------------------------------------------------------------------#
## Given a hand (e.g., c("A","J","A","J")), translate the ranks into#
## numerical equivalents (e.g., A=13, K=12, ... 3=2, 2=1)#
##------------------------------------------------------------------#
rankToNum <- function(n, r, hr) {#
    n[match(hr, r)]#
    return(sort(n[match(hr, r)], decreasing=TRUE))#
}#
##------------------------------------------------------------------#
## <function> processHandFile#
##------------------------------------------------------------------#
## Takes a PPT Omaha hand file as an input and writes the translated#
## format to a file.  The output filename contains the "_genericSyntax"#
## postfix.#
##------------------------------------------------------------------#
processHandFile <- function(in.file) {#
#
    ## "global" rank/number vectors#
    glob.num     <- seq(13, 1, -1)#
    glob.rank    <- c("A", "K", "Q", "J", "T", "9", "8", "7", "6", "5", "4", "3", "2")#
    ## process the filename#
    tmp.file    <- unlist(strsplit(in.file, "[.]"))#
    out.file    <- paste0(tmp.file[1], "_genericSyntax_DEBUG", ".", tmp.file[2])#
#
    ## read the input file#
    hf          <- read.csv(in.file, header=FALSE)#
    ## create output matrices#
    hand.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    suit.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    pair.shape  <- matrix(,nrow=nrow(hf), ncol=1)#
    pair.ranks  <- matrix(,nrow=nrow(hf), ncol=2)#
    high.card   <- matrix(,nrow=nrow(hf), ncol=1)#
    high.suited <- matrix(,nrow=nrow(hf), ncol=1)#
    rank.conn   <- matrix(,nrow=nrow(hf), ncol=1)#
    rank.gaps   <- matrix(,nrow=nrow(hf), ncol=1)#
#
    ## loop over each row in the file and process the ranked hand#
    for (i in 1:nrow(hf)) {#
        #for (i in 1:1147) {#
        ## process a hand#
        tmp.ch      <- unlist(strsplit(as.character(hf[i,]), ""))   ## split hand into individual characters#
        tmp.nch     <- length(tmp.ch)                               ## count number of characters#
        tmp.lp      <- which(tmp.ch %in% c("("))                    ## location of left parentheses#
        tmp.rp      <- which(tmp.ch %in% c(")"))                    ## location of right parentheses#
        tmp.ranks   <- tmp.ch[which(!(tmp.ch %in% c("(",")")))]     ## extract ranks#
        ## get hand shape infp#
        tmp.nums    <- rankToNum(glob.num, glob.rank, tmp.ranks)    ## convert ranks to (sorted) numbers#
        tmp.gaps    <- abs(diff(tmp.nums))                          ## calculate gap sizes#
        tmp.unq     <- length(unique(tmp.nums))                     ## number of unique#
        tmp.tbl     <- table(tmp.ranks)#
        ##------------------------------------------------------------------#
        ## the if/then processes the hand based on the length, and#
        ## for single-suited suited hands it will use the location#
        ## of the right and left parentheses to assign the suits#
        ##------------------------------------------------------------------#
        ##------------------------------------------------------------------#
        ## Deconstruct suits and identify suit shapes#
        ##------------------------------------------------------------------#
        ## double suited#
        if (tmp.nch == 8) {#
            tmp.suits   <- c("x","x","y","y")#
            tmp.color   <- c("ds")#
        ## single suited#
        } else if (tmp.nch == 6) {#
            ## (XY)ZW [1,4]#
            if ((tmp.lp == 1) & (tmp.rp == 4)) {#
                tmp.suits   <- c("x","x","y","z")#
                tmp.color   <- c("ss.2o")#
            ## X(YZ)W [2,5]#
            } else if ((tmp.lp == 2) & (tmp.rp == 5)) {#
                tmp.suits   <- c("x","y","y","z")#
                tmp.color   <- c("ss.2o")#
            ## XY(ZW) [3,6]#
            } else if ((tmp.lp == 3) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","y","z","z")#
                tmp.color   <- c("ss.2o")#
            ## (XYZ)W [1,5]#
            } else if ((tmp.lp == 1) & (tmp.rp == 5)) {#
                tmp.suits   <- c("x","x","x","y")#
                tmp.color   <- c("ss.1o")#
            ## X(YZW) [2,6]#
            } else if ((tmp.lp == 2) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","y","y","y")#
                tmp.color   <- c("ss.1o")#
            ## (XYZW) [1,6]#
            } else if ((tmp.lp == 1) & (tmp.rp == 6)) {#
                tmp.suits   <- c("x","x","x","x")#
                tmp.color   <- c("mo")#
            }#
        ## rainbow#
        } else if (tmp.nch == 4) {#
            tmp.suits   <- c("x","y","z","w")#
            tmp.color   <- c("rb")#
        ## error#
        } else {#
            stop("unexpected string lenght\n")#
        }#
        hand.shape[i,1]     <- appendSuits(tmp.ranks, tmp.suits)#
        suit.shape[i,1]     <- tmp.color#
        ##------------------------------------------------------------------#
        ## Identify pair types#
        ##------------------------------------------------------------------#
        if (max(tmp.tbl) == 4) {#
            tmp.count   <- c("4k")#
            tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
            tmp.lopair  <- NA#
        } else if (max(tmp.tbl) == 3) {#
            tmp.count   <- c("3k")#
            tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
            tmp.lopair  <- NA#
        } else if (max(tmp.tbl == 2)) {#
            if (tmp.unq == 2) {#
                tmp.count   <- c("2p")#
                tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
                tmp.lopair  <- glob.rank[max(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
            } else {#
                tmp.count   <- c("1p")#
                tmp.hipair  <- glob.rank[min(which(glob.rank %in% names(tmp.tbl[tmp.tbl >= 2])))]#
                tmp.lopair  <- NA#
            }#
        } else {#
            tmp.count   <- c("0p")#
            tmp.hipair  <- NA#
            tmp.lopair  <- NA#
        }#
        pair.shape[i,1]     <- tmp.count#
        pair.ranks[i,]      <- c(tmp.hipair, tmp.lopair)#
        ##------------------------------------------------------------------#
        ## Identify high card#
        ##------------------------------------------------------------------#
        high.card[i,]  <- glob.rank[which(glob.num == max(tmp.nums))]#
        ##------------------------------------------------------------------#
        ## Identify high card#
        ##------------------------------------------------------------------#
        ## get suits tied to the high card#
        hi.suits        <- tmp.suits[which(tmp.ranks %in% high.card[i,])]#
        non.hi.suits    <- tmp.suits[which(!(tmp.ranks %in% high.card[i,]))]#
        if (length(which(hi.suits %in% non.hi.suits)) > 0) {#
            high.suited[i,] <- "Y"#
        } else {#
            high.suited[i,] <- "N"#
        }#
        ##------------------------------------------------------------------#
        ## Identify connectedness#
        ##------------------------------------------------------------------#
        ## pure rundown variants#
        if (all(tmp.gaps == 1)) {#
            tmp.conn    <- "rd.0g"#
        } else if ( all(tmp.gaps == 2)) {#
            tmp.conn    <- "rd.1g"#
        } else if (all(tmp.gaps == 3)) {#
            tmp.conn    <- "rd.2g"#
        ## connected 2-pair#
        } else if ( (tmp.gaps[1] == 0) & (tmp.gaps[3] == 0) & (tmp.gaps[2] %in% c(1,2,3)) ) {#
            tmp.conn    <- "2p.conn"#
        ## rundown plus pair#
        } else if ( (sum(tmp.gaps==0)==1) & (sum(tmp.gaps==1)==2) ) {#
            tmp.conn    <- "rd.1p"#
        ## single gap rundown#
        } else if ( (sum(tmp.gaps==2)==1) & (sum(tmp.gaps==1)==2) ) {#
            tmp.conn    <- "rd.1g"#
#
        ## double gap rundown#
        } else if ( (sum(tmp.gaps==3)==1) & (sum(tmp.gaps==1)==2) ) {#
            tmp.conn    <- "rd.2g"#
#
        ## triple gap rundown#
        } else if ( (sum(tmp.gaps==4)==1) & (sum(tmp.gaps==1)==2) ) {#
            tmp.conn    <- "rd.3g"#
#
        ## dangler gap rundown#
        } else if ( (sum(tmp.gaps>4)==1) & (sum(tmp.gaps==1)==2) ) {#
            tmp.conn    <- "rd.dg"#
#
        ## 2x single gap rundown#
        } else if ( (sum(tmp.gaps==1)==1) & (sum(tmp.gaps==2)==2) ) {#
            tmp.conn    <- "rd.2x1g"#
#
        ## 2x double gap rundown#
        } else if ( (sum(tmp.gaps==1)==1) & (sum(tmp.gaps==3)==2) ) {#
            tmp.conn    <- "rd.2x2g"#
        ## connected single-pair#
        } else if ( (sum(tmp.gaps==0)==1) & (sum(tmp.gaps==1)==1) & (sum(tmp.gaps==2)==1) ) {#
            tmp.conn    <- "1p.conn"#
        ## default#
        } else {#
            tmp.conn    <- NA#
        }#
        rank.conn[i,]   <- tmp.conn#
        ##------------------------------------------------------------------#
        ## Consolidate gap data#
        ##------------------------------------------------------------------#
        rank.gaps[i,]   <- paste(tmp.gaps, collapse=":")#
#
    }#
    ## consolidate#
    hand.data   <- data.frame(  hand=hand.shape,#
                                suit=suit.shape,#
                                pair=pair.shape,#
                                ranks=pair.ranks,#
                                highCard=high.card,#
                                highSuited=high.suited,#
                                conn=rank.conn,#
                                gaps=rank.gaps)#
#
    colnames(hand.data) <- c("hand","suit","pair","hiPair","loPair","hiCard","hiSuited","conn","gaps")#
    ## save the output as a file#
    #write.table(hand.shape, file=out.file, row.names=FALSE, col.names=FALSE)#
    return(list(ho=hand.shape, hd=hand.data))#
}#
##------------------------------------------------------------------#
## <main> process hands#
##------------------------------------------------------------------#
#
plo_3max.list   <- processHandFile("ppt_plo_handrankings_03handed.txt")#
save(plo_3max.list, file="ppt_plo_handrankings_03handed.Rdata")#
#
plo_6max.list   <- processHandFile("ppt_plo_handrankings_06handed.txt")#
save(plo_6max.list, file="ppt_plo_handrankings_06handed.Rdata")#
#
plo_10max.list  <- processHandFile("ppt_plo_handrankings_10handed.txt")#
save(plo_10max.list, file="ppt_plo_handrankings_10handed.Rdata")#
#
plo_random.list <- processHandFile("ppt_plo_handrankings_preflop_vs_random.txt")#
save(plo_random.list, file="ppt_plo_handrankings_preflop_vs_random.Rdata")#
##------------------------------------------------------------------#
## Before#
##------------------------------------------------------------------#
## qp:data alexstephens$ head ppt_plo_handrankings_preflop_vs_random.txt#
## (AT)(AT)#
## (AJ)(AJ)#
## (AQ)(AQ)#
##------------------------------------------------------------------#
## After#
##------------------------------------------------------------------#
## qp:data alexstephens$ head ppt_plo_handrankings_preflop_vs_random_genericSyntax.txt#
## "AxTxAyTy"#
## "AxJxAyJy"#
## "AxQxAyQy"
##------------------------------------------------------------------#
## Clear the workspace#
##------------------------------------------------------------------#
rm(list=ls())#
#
##------------------------------------------------------------------#
## Load data#
##------------------------------------------------------------------#
#
## 6max simulation data#
setwd("/Users/alexstephens/Development/poker/omaha_hi/data/simulations")#
load("hotColdEquity_6max_OmahiHi_AllHands.Rdata")
## 6max hand attributes#
setwd("/Users/alexstephens/Development/poker/omaha_hi/data/pptoo/OmahaHi")#
load("ppt_plo_handrankings_06handed")
##------------------------------------------------------------------#
## Clear the workspace#
##------------------------------------------------------------------#
rm(list=ls())#
#
##------------------------------------------------------------------#
## Load data#
##------------------------------------------------------------------#
#
## 6max simulation data#
setwd("/Users/alexstephens/Development/poker/omaha_hi/data/simulations")#
load("hotColdEquity_6max_OmahiHi_AllHands.Rdata")#
#
## 6max hand attributes#
setwd("/Users/alexstephens/Development/poker/omaha_hi/data/pptoo/OmahaHi")#
load("ppt_plo_handrankings_06handed.Rdata")
ls()
head(res.mat)
idx <- which(colnames(res.mat)=="30%")
idx
###
col.idx <- which(colnames(res.mat)=="30%")#
row.idx <- which(res.mat[,col.idx] >= 0.50)
length(row.idx)
hand.idx    <- rownames(res.mat)[row.idx]
head(hand.idx)
head(plo_6max.list[["hd"]])
###
col.idx <- which(colnames(res.mat)=="30%")#
row.idx <- which(res.mat[,col.idx] >= 0.50)#
#
hand.idx    <- rownames(res.mat)[row.idx]#
#
hand.attr   <- plo_6max.list[["hd"]][which( plo_6max.list[["hd"]]$hand %in% hand.idx),]
head(hand.attr)
hand.attr   <- cbind(   plo_6max.list[["hd"]][which( plo_6max.list[["hd"]]$hand %in% hand.idx),],#
                        res.mat[row.idx,col.idx] )
head(hand.attr)
hand.attr   <- data.frame(  plo_6max.list[["hd"]][which( plo_6max.list[["hd"]]$hand %in% hand.idx),],#
                            equity=res.mat[row.idx,col.idx] )
haed(hand.attr)
head(hand.attr)
dim(hand.attr)
table(hand.attr$suit)
table(hand.attr$suit, hand.attr$pair)
table(hand.attr$suit, hiCard)
table(hand.attr$suit, hand.attr$hiCard)
table(hand.attr$suit, hand.attr$hiSuited)
table(hand.attr$suit, hand.attr$conn)
table(hand.attr$suit, hand.attr$conn, useNA="always")
hand.attr[which(hand.attr$suit=="ds"),]
hand.attr[which(hand.attr$suit=="ds" & hand.attr$pair=="0p"),]
hand.attr[which(hand.attr$suit=="ds" & hand.attr$pair=="0p"),]
dim(hand.attr)
head(res.mat)
apply(res.mat, 2, function(x){sum(x>=0.50)/length(x)})
apply(res.mat, 2, function(x){sum(x>=0.45)/length(x)})
apply(res.mat, 2, function(x){sum(x>=050)/length(x)})
apply(res.mat, 2, function(x){sum(x>=0.50)/length(x)})
q()
