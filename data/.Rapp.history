tmp.clust
i
i <- 1
tmp.clust   <- clust.uniq[i]
tmp.clust
i <- 2
tmp.clust   <- clust.uniq[i]
tmp.clust
which(clust.ids == tmp.clust)
e.idx
e.idx[which(clust.ids == tmp.clust)]
tmp.memb    <- union(get.edgelist(myIgraph)[tmp.idx,1], get.edgelist(myIgraph)[tmp.idx,2])
tmp.memb
get.edgelist(myIgraph)
tmp.idx     <- e.idx[which(clust.ids == tmp.clust)]#
        tmp.memb    <- union(get.edgelist(myIgraph)[tmp.idx,1], get.edgelist(myIgraph)[tmp.idx,2])
tmp.idx
tmp.memb
i <- 47
tmp.clust   <- clust.uniq[i]#
        tmp.idx     <- e.idx[which(clust.ids == tmp.clust)]#
        tmp.memb    <- union(get.edgelist(myIgraph)[tmp.idx,1], get.edgelist(myIgraph)[tmp.idx,2])
tmp.clust
tmp.idx
tmp.memb
get.edgelist(myIgraph)[tmp.idx,1]
get.edgelist(myIgraph)[tmp.idx,2]
length(tmp.idx)
lm.lc$clusters
tmp.idx
## isolate cluster memebers#
    clust.ids   <- cutree(myHclust, h=hmax)#
    clust.uniq  <- unique(clust.ids)#
    clust.num   <- length(clust.uniq)#
    clust.list  <- list()#
    clust.cnt   <- 1#
    for (i in 1:clust.num) {#
        tmp.clust   <- clust.uniq[i]#
        tmp.idx     <- e.idx[which(clust.ids == tmp.clust)]#
        if (length(tmp.idx) <= 3) {#
            tmp.memb    <- union(get.edgelist(myIgraph)[tmp.idx,1], get.edgelist(myIgraph)[tmp.idx,2])#
            if (tmp.memb > 2) {#
                clust.list[[clust.cnt]] <- tmp.idx#
                clust.cnt   <- clust.cnt + 1#
            }#
        } else {#
            clust.list[[clust.cnt]] <- tmp.idx#
            clust.cnt   <- clust.cnt + 1#
        }#
    }
warning()
warnings()
## isolate cluster memebers#
    clust.ids   <- cutree(myHclust, h=hmax)#
    clust.uniq  <- unique(clust.ids)#
    clust.num   <- length(clust.uniq)#
    clust.list  <- list()#
    clust.cnt   <- 1
i <- 57
i <- 47
tmp.clust   <- clust.uniq[i]#
        tmp.idx     <- e.idx[which(clust.ids == tmp.clust)]
tmp.idx
if (length(tmp.idx) <= 3) {#
            tmp.memb    <- union(get.edgelist(myIgraph)[tmp.idx,1], get.edgelist(myIgraph)[tmp.idx,2])#
            if (tmp.memb > 2) {#
                clust.list[[clust.cnt]] <- tmp.idx#
                clust.cnt   <- clust.cnt + 1#
            }#
        } else {#
            clust.list[[clust.cnt]] <- tmp.idx#
            clust.cnt   <- clust.cnt + 1#
        }
clust.list[[clust.cnt]]
clust.list[[1]]
clust.cnt   <- 1#
    for (i in 1:clust.num) {#
        tmp.clust   <- clust.uniq[i]#
        tmp.idx     <- e.idx[which(clust.ids == tmp.clust)]#
        if (length(tmp.idx) <= 3) {#
            tmp.memb    <- union(get.edgelist(myIgraph)[tmp.idx,1], get.edgelist(myIgraph)[tmp.idx,2])#
            if (tmp.memb > 2) {#
                clust.list[[clust.cnt]] <- tmp.idx#
                clust.cnt   <- clust.cnt + 1#
            }#
        } else {#
            clust.list[[clust.cnt]] <- tmp.idx#
            clust.cnt   <- clust.cnt + 1#
        }#
    }
i <- 1
tmp.clust   <- clust.uniq[i]#
        tmp.idx     <- e.idx[which(clust.ids == tmp.clust)]
tmp.clust
tmp.idx
clust.cnt   <- 1#
    for (i in 1:clust.num) {#
        tmp.clust   <- clust.uniq[i]#
        tmp.idx     <- e.idx[which(clust.ids == tmp.clust)]#
        if (length(tmp.idx) > 1) {#
            if (length(tmp.idx) %in% c(2,3)) {#
                tmp.memb    <- union(get.edgelist(myIgraph)[tmp.idx,1], get.edgelist(myIgraph)[tmp.idx,2])#
                clust.list[[clust.cnt]] <- tmp.idx#
                clust.cnt   <- clust.cnt + 1#
            } else {#
                clust.list[[clust.cnt]] <- tmp.idx#
                clust.cnt   <- clust.cnt + 1#
            }#
        }#
    }
clust.list
clust.cnt   <- 1#
    for (i in 1:clust.num) {#
        tmp.clust   <- clust.uniq[i]#
        tmp.idx     <- e.idx[which(clust.ids == tmp.clust)]#
        tmp.memb    <- union(get.edgelist(myIgraph)[tmp.idx,1], get.edgelist(myIgraph)[tmp.idx,2])#
        if (length(tmp.memb) >= 3) {#
            clust.list[[clust.cnt]] <- tmp.idx#
            clust.cnt   <- clust.cnt + 1#
        }#
    }
clust.list
tmp.memb
length(tmp.memb)
## isolate cluster memebers#
    clust.ids   <- cutree(myHclust, h=hmax)#
    clust.uniq  <- unique(clust.ids)#
    clust.num   <- length(clust.uniq)#
    clust.list  <- list()#
    clust.cnt   <- 1#
    for (i in 1:clust.num) {#
        tmp.clust   <- clust.uniq[i]#
        tmp.idx     <- e.idx[which(clust.ids == tmp.clust)]#
        tmp.memb    <- union(get.edgelist(myIgraph)[tmp.idx,1], get.edgelist(myIgraph)[tmp.idx,2])#
        if (length(tmp.memb) >= 3) {#
            clust.list[[clust.cnt]] <- tmp.idx#
            clust.cnt   <- clust.cnt + 1#
        }#
    }
clust.list
## isolate cluster memebers#
    clust.ids   <- cutree(myHclust, h=hmax)#
    clust.uniq  <- unique(clust.ids)#
    clust.num   <- length(clust.uniq)#
    clust.list  <- list()#
    clust.cnt   <- 1#
    for (i in 1:clust.num) {#
        tmp.clust   <- clust.uniq[i]#
        tmp.idx     <- e.idx[which(clust.ids == tmp.clust)]#
        tmp.memb    <- union(get.edgelist(myIgraph)[tmp.idx,1], get.edgelist(myIgraph)[tmp.idx,2])#
        if ( length(tmp.idx) >= 3 ) {#
            clust.list[[clust.cnt]] <- tmp.idx#
            clust.cnt   <- clust.cnt + 1#
        }#
    }
clust.list
lm.lc$clusters
lapply(lm.lc$clusters, length)
as.vector(lapply(lm.lc$clusters, length))
unlist(lapply(lm.lc$clusters, length))
##------------------------------------------------------------------#
## The purpose of this script is to re-create an example set of#
## clusters.  The example (the Les Miserables characters) set of#
## edges is taken from Ahn, and there is an R package that will#
## reproduce that results (linkcomm()).  I want to reproduce it#
## as well because I will be modifying the basic result (i.e.,#
## a similarity matrix to reproduce the Ye [?] et al. paper.#
##------------------------------------------------------------------#
#
##------------------------------------------------------------------#
## Load libraries#
##------------------------------------------------------------------#
library(igraph)                 ## contains graph functions#
library(linkcomm)               ## contains link community functions#
library(dendextend)             ## contains dendrogram functions#
library(caTools)#
librart(gdata)#
#
##------------------------------------------------------------------#
## Clear the workspace#
##------------------------------------------------------------------#
rm(list=ls())#
#
##------------------------------------------------------------------#
## Load utility functions#
##------------------------------------------------------------------#
source("/Users/alexstephens/Development/kaggle/social_circle/k_soc/00_Utilities.r")#
##------------------------------------------------------------------#
## Benchmark: Les Miserables characters connected graph#
##------------------------------------------------------------------#
#
## load the raw dataset (from linkcomm())#
lm <- lesmiserables#
#
##------------------------------------------------------------------#
## Step 1:  This is somewhat redundant, but translate the Les Mis#
## factor/edge list into the egonet structure that I've loaded#
## from the kaggle competition.#
##------------------------------------------------------------------#
#
## convert the data of factors into characters#
tmp.lm <- convert.magic(lm, c("V1","V2"), c("character","character"))#
#
## map character names to integers#
nodes_l.uniq    <- unique(tmp.lm$V1)#
nodes_r.uniq    <- unique(tmp.lm$V2)#
characters.uniq <- union(nodes_l.uniq, nodes_r.uniq)#
characters.ids  <- 1:length(characters.uniq)#
#
## define the egonet#
lm.egonet  <- list()#
#
## load the egonet#
for (i in 1:length(nodes_l.uniq)) {#
    ## get a vertex & assign an id#
    tmp.node    <- nodes_l.uniq[i]#
    tmp.id      <- characters.ids[ which(characters.uniq == tmp.node)]#
    char.id     <- paste("ID_",tmp.id,sep="")#
    ## get the list of characters (and their ids) associated with this vertex#
    lm.egonet[[char.id]] <- paste("ID_", characters.ids[ which(characters.uniq %in% tmp.lm$V2[which(tmp.lm$V1 == tmp.node)]) ], sep="")#
}#
#
##------------------------------------------------------------------#
## Step 2:  At this point, the Les Mis data are in a format that#
## is similar to the loaded kaggle data format. Load the raw data#
## into an igraph object#
##------------------------------------------------------------------#
lm.igraph   <- convEgonetListToIgraphObject(lm.egonet)#
##------------------------------------------------------------------#
## Step 3:  Compute the dissimilarity measure amongst the clusters.#
## The similarity measure is the Jaccard coefficient. The Jaccard#
## *distance* is 1 minus the Jaccard coefficient.#
##------------------------------------------------------------------#
#
lm.sim      <- calcSimilarityMatrix(lm.igraph)  ## similarity matrix#
lm.dis      <- 1 - lm.sim                       ## jaccard distance#
#
##------------------------------------------------------------------#
## Step 3:  Compute the cluster#
##------------------------------------------------------------------#
#
## create a distance object from the dissimilarity matrix#
lm.dist     <- as.dist(lm.dis)#
#
## compute a cluster#
lm.clust    <- hclust(lm.dist, method="single")#
lm.dend     <- as.dendrogram(lm.clust)#
##------------------------------------------------------------------#
## Step 4:  Verify cluster output using linkcomm() [ok]#
##------------------------------------------------------------------#
## use linkcomm() to compute the cluster#
lm.lc       <- getLinkCommunities(get.data.frame(lm.igraph,"edges"), hcmethod="single")#
comp.clust  <- cbind(lm.lc$hclust$height, lm.clust$height, lm.lc$hclust$height-lm.clust$height)#
##------------------------------------------------------------------#
## Step 5:  Calculate the partition density#
##------------------------------------------------------------------#
#
lm.dens <- calcPartitionDensity(lm.clust, lm.igraph)
lm.dens
q()
swd <- "~/Development/poker/omaha_hi/data/ppt_plo_handrankings_06handed.txt"
getwd(swd)
setwd("~/Development/poker/omaha_hi/data/ppt_plo_handrankings_06handed.txt")
setwd("/Users/alexstephens/Development/poker/omaha_hi/data/ppt_plo_handrankings_06handed.txt")
getwd()
pwd
dir()
getwd()
setwd("/Users/alexstephens/Development/poker/omaha_hi/data")
dir()
hf <- read.csv("ppt_plo_handrankings_06handed.txt", header=FALSE)
hf
dim(hf)
nrow(hf)
hf[1,]
hf[2,]
levels(hf)
levels(hf)[1]
hf[1]
drop.levels(hf[i,])
droplevels(hf[i,])
droplevel(hf[i,])
i<- 10
tmp.hand    <- droplevels(hf[i,])
tmp.hand
grep("(", tmp.hand)
grep([\(], tmp.hand)
grep(['('], tmp.hand)
grep(["("], tmp.hand)
?grep
grep("[(]", tmp.hand)
grep("[)]", tmp.hand)
class(tmp.hand)
tmp.hand    <- as.character(hf[i,])
tmp.hand
which(tmp.hand == "(")
which(tmp.hand == ")")
tmp.hand
split(tmp.hand, "(")
split(tmp.hand, ")")
?split
strsplit(tmp.hand, "C")
strsplit(tmp.hand, "(")
strsplit(tmp.hand, "\(")
?strsplit
strsplit(tmp.hand, "[(]")
strsplit(tmp.hand, "[)]")
which(tmp.hand == "[(]")
which(tmp.hand == "(")
?strsplit
nchar(tmp.hand)
tmp.hand    <- as.character(hf[i,])#
    tmp.nch     <- nchar(tmp.hand)
lapply(ht, length)
hf
lapply(hf, length)
class(hf)
sapply(hf, function(x){ nchar(as.character(x))})
table(sapply(hf, function(x){ nchar(as.character(x))}))
strsplit(tmp.hand, "")
tmp.char    <- strsplit(tmp.hand, "")
tmp.cahr
tmp.char
which(tmp.char == "(")
which(tmp.char %in% "(")
tmp.char
class(tmp.char)
unlist(tmp.char)
which( tmp.ch      <- unlist(strsplit(tmp.hand, "")))
tmp.ch      <- unlist(strsplit(tmp.hand, ""))
tmp.ch
length(tmp.ch)
which(tmp.ch == "(")
which(tmp.ch == ")")
which(tmp.ch %in% c("(",")"))
which(!(tmp.ch %in% c("(",")")))
tmp.ch[hich(!(tmp.ch %in% c("(",")")))]
tmp.ch[which(!(tmp.ch %in% c("(",")")))]
paste(tmp.ch[which(!(tmp.ch %in% c("(",")")))])
paste(tmp.ch[which(!(tmp.ch %in% c("(",")")))], sep="")
paste(tmp.ch[which(!(tmp.ch %in% c("(",")")))], collapse="")
paste(tmp.ch[which(!(tmp.ch %in% c("(",")")))], collapse="x")
tmp.ch[which(!(tmp.ch %in% c("(",")")))]
class(tmp.ch[which(!(tmp.ch %in% c("(",")")))])
for (i in 1:10) {#
    tmp.hand    <- as.character(hf[i,])#
    tmp.ch      <- unlist(strsplit(tmp.hand, ""))#
    tmp.nch     <- nchar(tmp.hand)#
    ## double suited#
    if (tmp.nch == 8) {#
    ## single suited#
    } else if (tmp.nch == 6) {#
    ## rainbow#
    } else if (tmp.nch == 4) {#
    ## error#
    } else {#
        stop("unexpected string lenght\n")#
    }#
}
tmp.hand
tmp.ch
tmp.nch
tmp.ch[which(!(tmp.ch %in% c("(",")")))]
for (i in 1:5) {#
    tmp.hand    <- as.character(hf[i,])#
    tmp.ch      <- unlist(strsplit(tmp.hand, ""))#
    tmp.nch     <- nchar(tmp.hand)#
    tmp.ranks   <- tmp.ch[which(!(tmp.ch %in% c("(",")")))]#
    ## double suited#
    if (tmp.nch == 8) {#
    ## single suited#
    } else if (tmp.nch == 6) {#
    ## rainbow#
    } else if (tmp.nch == 4) {#
    ## error#
    } else {#
        stop("unexpected string lenght\n")#
    }#
}
tmp.hand
tmp.ranks
lenght(tmp.ranks)
length(tmp.ranks)
h <- tmp.ranks
s <- c("x","x","y","y")
h
s
out.h <- c()#
    for (i in 1:length(h)) {#
        out.h[i] <- paste0(h[i],s[i])#
    }
out.h
paste(out.h, collapse="")
h
s
paste(h,s,sep="")
appendSuits <- function(h, s) {#
    return(paste(paste(h,s,sep=""), collapse=""))#
}
appendSuits(h,s)
appendSuits <- function(h, s) {#
    return(paste(paste(h,s,sep=""), collapse=""))#
}#
for (i in 1:5) {#
    tmp.hand    <- as.character(hf[i,])#
    tmp.ch      <- unlist(strsplit(tmp.hand, ""))#
    tmp.nch     <- nchar(tmp.hand)#
    tmp.ranks   <- tmp.ch[which(!(tmp.ch %in% c("(",")")))]#
    ## double suited#
    if (tmp.nch == 8) {#
        tmp.suits   <- c("x","x","y","y")#
        tmp.out     <- appendSuits(tmp.hand, tmp.suits)#
    ## single suited#
    } else if (tmp.nch == 6) {#
    ## rainbow#
    } else if (tmp.nch == 4) {#
    ## error#
    } else {#
        stop("unexpected string lenght\n")#
    }#
}
tmp.out
for (i in 1:5) {#
    tmp.hand    <- as.character(hf[i,])#
    tmp.ch      <- unlist(strsplit(tmp.hand, ""))#
    tmp.nch     <- nchar(tmp.hand)#
    tmp.ranks   <- tmp.ch[which(!(tmp.ch %in% c("(",")")))]#
    ## double suited#
    if (tmp.nch == 8) {#
        tmp.suits   <- c("x","x","y","y")#
        tmp.out     <- appendSuits(tmp.ch, tmp.suits)#
    ## single suited#
    } else if (tmp.nch == 6) {#
    ## rainbow#
    } else if (tmp.nch == 4) {#
    ## error#
    } else {#
        stop("unexpected string lenght\n")#
    }#
}
tmp.out
tmp.ch
for (i in 1:5) {#
    tmp.hand    <- as.character(hf[i,])#
    tmp.ch      <- unlist(strsplit(tmp.hand, ""))#
    tmp.nch     <- nchar(tmp.hand)#
    tmp.ranks   <- tmp.ch[which(!(tmp.ch %in% c("(",")")))]#
    ## double suited#
    if (tmp.nch == 8) {#
        tmp.suits   <- c("x","x","y","y")#
        tmp.out     <- appendSuits(tmp.ranks, tmp.suits)#
    ## single suited#
    } else if (tmp.nch == 6) {#
    ## rainbow#
    } else if (tmp.nch == 4) {#
    ## error#
    } else {#
        stop("unexpected string lenght\n")#
    }#
}
tmp.out
which(!(tmp.ch %in% c("(",")")))
tmp.lp   <- which(!(tmp.ch %in% c("(",")")))  ## location of left parentheses
tmp.lp
for (i in 1:200) {#
    tmp.hand    <- as.character(hf[i,])#
    tmp.ch      <- unlist(strsplit(tmp.hand, ""))#
    tmp.nch     <- nchar(tmp.hand)#
    tmp.lp   <- which(!(tmp.ch %in% c("(",")")))  ## location of left parentheses#
    tmp.ranks   <- tmp.ch[which(!(tmp.ch %in% c("(",")")))]#
    ## double suited#
    if (tmp.nch == 8) {#
        tmp.suits   <- c("x","x","y","y")#
        tmp.out     <- appendSuits(tmp.ranks, tmp.suits)#
    ## single suited#
    } else if (tmp.nch == 6) {#
        ## (XY)ZW#
        ## X(YZ)W#
        ## XY(ZW)#
        ## (XYZ)W#
        ## X(YZW)#
        ## (XYZW)#
    ## rainbow#
    } else if (tmp.nch == 4) {#
 tmp.suits   <- c("x","y","z","w")#
 tmp.out     <- appendSuits(tmp.ranks, tmp.suits)#
#
    ## error#
    } else {#
        stop("unexpected string lenght\n")#
    }#
}
tmp.hand
tmp.lp
tmp.lp      <- which(!(tmp.ch %in% c("(")))  ## location of left parentheses
tmp.ch
tmp.lp
tmp.lp      <- which(tmp.ch %in% c("("))  ## location of left parentheses
tmp.lp
tmp.lp      <- which(tmp.ch %in% c("("))  ## location of left parentheses#
    tmp.rp      <- which(tmp.ch %in% c(")"))  ## location of left parentheses
tmp.lo
tmp.lp
tmp.rp
tmp.hand
for (i in 1:5) {#
    tmp.hand    <- as.character(hf[i,])#
    tmp.ch      <- unlist(strsplit(tmp.hand, ""))#
    tmp.nch     <- nchar(tmp.hand)#
    tmp.lp      <- which(tmp.ch %in% c("("))  ## location of left parentheses#
    tmp.rp      <- which(tmp.ch %in% c(")"))  ## location of left parentheses#
    tmp.ranks   <- tmp.ch[which(!(tmp.ch %in% c("(",")")))]#
    ## double suited#
    if (tmp.nch == 8) {#
        tmp.suits   <- c("x","x","y","y")#
        tmp.out     <- appendSuits(tmp.ranks, tmp.suits)#
    ## single suited#
    } else if (tmp.nch == 6) {#
        ## (XY)ZW [1,4]#
        ## X(YZ)W [2,5]#
        ## XY(ZW) [3,6]#
        ## (XYZ)W [1,5]#
        ## X(YZW) [2,6]#
        ## (XYZW) [1,6]#
    ## rainbow#
    } else if (tmp.nch == 4) {#
 tmp.suits   <- c("x","y","z","w")#
 tmp.out     <- appendSuits(tmp.ranks, tmp.suits)#
#
    ## error#
    } else {#
        stop("unexpected string lenght\n")#
    }#
}
tmp.lp
tmp.rp
for (i in 200:200) {#
    tmp.hand    <- as.character(hf[i,])#
    tmp.ch      <- unlist(strsplit(tmp.hand, ""))#
    tmp.nch     <- nchar(tmp.hand)#
    tmp.lp      <- which(tmp.ch %in% c("("))  ## location of left parentheses#
    tmp.rp      <- which(tmp.ch %in% c(")"))  ## location of left parentheses#
    tmp.ranks   <- tmp.ch[which(!(tmp.ch %in% c("(",")")))]#
    ## double suited#
    if (tmp.nch == 8) {#
        tmp.suits   <- c("x","x","y","y")#
        tmp.out     <- appendSuits(tmp.ranks, tmp.suits)#
    ## single suited#
    } else if (tmp.nch == 6) {#
        ## (XY)ZW [1,4]#
        ## X(YZ)W [2,5]#
        ## XY(ZW) [3,6]#
        ## (XYZ)W [1,5]#
        ## X(YZW) [2,6]#
        ## (XYZW) [1,6]#
    ## rainbow#
    } else if (tmp.nch == 4) {#
 tmp.suits   <- c("x","y","z","w")#
 tmp.out     <- appendSuits(tmp.ranks, tmp.suits)#
#
    ## error#
    } else {#
        stop("unexpected string lenght\n")#
    }#
}
system("which java")
a <0 system("which java")
a <- system("which java")
a
?system
try(system("which java"))
tl <- try(system("which java"))
tl
tl <- try(system("which java", intern=TRUE))
tl
for (i in 200:200) {#
    tmp.hand    <- as.character(hf[i,])#
    tmp.ch      <- unlist(strsplit(tmp.hand, ""))#
    tmp.nch     <- nchar(tmp.hand)#
    tmp.lp      <- which(tmp.ch %in% c("("))  ## location of left parentheses#
    tmp.rp      <- which(tmp.ch %in% c(")"))  ## location of left parentheses#
    tmp.ranks   <- tmp.ch[which(!(tmp.ch %in% c("(",")")))]#
    ## double suited#
    if (tmp.nch == 8) {#
        tmp.suits   <- c("x","x","y","y")#
    ## single suited#
    } else if (tmp.nch == 6) {#
        ## (XY)ZW [1,4]#
        if ((tmp.lp == 1) & (tmp.rp == 4)) {#
            tmp.suits <- c("x","x","y","z")#
        ## X(YZ)W [2,5]#
        } else if ((tmp.lp == 2) & (tmp.rp == 5)) {#
            tmp.suits <- c("x","y","y","z")#
        ## XY(ZW) [3,6]#
        } else if ((tmp.lp == 3) & (tmp.rp == 6)) {#
            tmp.suits <- c("x","y","z","z")#
        ## (XYZ)W [1,5]#
        } else if ((tmp.lp == 1) & (tmp.rp == 5)) {#
            tmp.suits <- c("x","x","x","y")#
        ## X(YZW) [2,6]#
        } else if ((tmp.lp == 2) & (tmp.rp == 6)) {#
           tmp.suits <- c("x","y","y","y")#
        ## (XYZW) [1,6]#
        } else if ((tmp.lp == 1) & (tmp.rp == 6)) {#
            tmp.suits <- c("x","x","x","x")#
        }#
    ## rainbow#
    } else if (tmp.nch == 4) {#
            tmp.suits   <- c("x","y","z","w")#
    ## error#
    } else {#
        stop("unexpected string lenght\n")#
    }#
#
    tmp.out     <- appendSuits(tmp.ranks, tmp.suits)#
}
tmp.out
hf
ho  <- hf#
for (i in 1:100) {#
    tmp.hand    <- as.character(hf[i,])#
    tmp.ch      <- unlist(strsplit(tmp.hand, ""))#
    tmp.nch     <- nchar(tmp.hand)#
    tmp.lp      <- which(tmp.ch %in% c("("))  ## location of left parentheses#
    tmp.rp      <- which(tmp.ch %in% c(")"))  ## location of left parentheses#
    tmp.ranks   <- tmp.ch[which(!(tmp.ch %in% c("(",")")))]#
    ## double suited#
    if (tmp.nch == 8) {#
        tmp.suits   <- c("x","x","y","y")#
    ## single suited#
    } else if (tmp.nch == 6) {#
        ## (XY)ZW [1,4]#
        if ((tmp.lp == 1) & (tmp.rp == 4)) {#
            tmp.suits <- c("x","x","y","z")#
        ## X(YZ)W [2,5]#
        } else if ((tmp.lp == 2) & (tmp.rp == 5)) {#
            tmp.suits <- c("x","y","y","z")#
        ## XY(ZW) [3,6]#
        } else if ((tmp.lp == 3) & (tmp.rp == 6)) {#
            tmp.suits <- c("x","y","z","z")#
        ## (XYZ)W [1,5]#
        } else if ((tmp.lp == 1) & (tmp.rp == 5)) {#
            tmp.suits <- c("x","x","x","y")#
        ## X(YZW) [2,6]#
        } else if ((tmp.lp == 2) & (tmp.rp == 6)) {#
           tmp.suits <- c("x","y","y","y")#
        ## (XYZW) [1,6]#
        } else if ((tmp.lp == 1) & (tmp.rp == 6)) {#
            tmp.suits <- c("x","x","x","x")#
        }#
    ## rainbow#
    } else if (tmp.nch == 4) {#
            tmp.suits   <- c("x","y","z","w")#
    ## error#
    } else {#
        stop("unexpected string lenght\n")#
    }#
#
    ho[i,] <- appendSuits(tmp.ranks, tmp.suits)#
}
warnings()
ho[i,] <- as.factor(appendSuits(tmp.ranks, tmp.suits))
head(ho)
for (i in 1:100) {#
    tmp.hand    <- as.character(hf[i,])#
    tmp.ch      <- unlist(strsplit(tmp.hand, ""))#
    tmp.nch     <- nchar(tmp.hand)#
    tmp.lp      <- which(tmp.ch %in% c("("))  ## location of left parentheses#
    tmp.rp      <- which(tmp.ch %in% c(")"))  ## location of left parentheses#
    tmp.ranks   <- tmp.ch[which(!(tmp.ch %in% c("(",")")))]#
    ## double suited#
    if (tmp.nch == 8) {#
        tmp.suits   <- c("x","x","y","y")#
    ## single suited#
    } else if (tmp.nch == 6) {#
        ## (XY)ZW [1,4]#
        if ((tmp.lp == 1) & (tmp.rp == 4)) {#
            tmp.suits <- c("x","x","y","z")#
        ## X(YZ)W [2,5]#
        } else if ((tmp.lp == 2) & (tmp.rp == 5)) {#
            tmp.suits <- c("x","y","y","z")#
        ## XY(ZW) [3,6]#
        } else if ((tmp.lp == 3) & (tmp.rp == 6)) {#
            tmp.suits <- c("x","y","z","z")#
        ## (XYZ)W [1,5]#
        } else if ((tmp.lp == 1) & (tmp.rp == 5)) {#
            tmp.suits <- c("x","x","x","y")#
        ## X(YZW) [2,6]#
        } else if ((tmp.lp == 2) & (tmp.rp == 6)) {#
           tmp.suits <- c("x","y","y","y")#
        ## (XYZW) [1,6]#
        } else if ((tmp.lp == 1) & (tmp.rp == 6)) {#
            tmp.suits <- c("x","x","x","x")#
        }#
    ## rainbow#
    } else if (tmp.nch == 4) {#
            tmp.suits   <- c("x","y","z","w")#
    ## error#
    } else {#
        stop("unexpected string lenght\n")#
    }#
#
    ho <- rbind(ho, as.factor(appendSuits(tmp.ranks, tmp.suits)))#
}
ho
head(ho)
ho  <- matrix(,nrow=nrow(hf), ncol=1)
ho  <- matrix(,nrow=nrow(hf), ncol=1)#
for (i in 1:100) {#
    tmp.hand    <- as.character(hf[i,])#
    tmp.ch      <- unlist(strsplit(tmp.hand, ""))#
    tmp.nch     <- nchar(tmp.hand)#
    tmp.lp      <- which(tmp.ch %in% c("("))  ## location of left parentheses#
    tmp.rp      <- which(tmp.ch %in% c(")"))  ## location of left parentheses#
    tmp.ranks   <- tmp.ch[which(!(tmp.ch %in% c("(",")")))]#
    ## double suited#
    if (tmp.nch == 8) {#
        tmp.suits   <- c("x","x","y","y")#
    ## single suited#
    } else if (tmp.nch == 6) {#
        ## (XY)ZW [1,4]#
        if ((tmp.lp == 1) & (tmp.rp == 4)) {#
            tmp.suits <- c("x","x","y","z")#
        ## X(YZ)W [2,5]#
        } else if ((tmp.lp == 2) & (tmp.rp == 5)) {#
            tmp.suits <- c("x","y","y","z")#
        ## XY(ZW) [3,6]#
        } else if ((tmp.lp == 3) & (tmp.rp == 6)) {#
            tmp.suits <- c("x","y","z","z")#
        ## (XYZ)W [1,5]#
        } else if ((tmp.lp == 1) & (tmp.rp == 5)) {#
            tmp.suits <- c("x","x","x","y")#
        ## X(YZW) [2,6]#
        } else if ((tmp.lp == 2) & (tmp.rp == 6)) {#
           tmp.suits <- c("x","y","y","y")#
        ## (XYZW) [1,6]#
        } else if ((tmp.lp == 1) & (tmp.rp == 6)) {#
            tmp.suits <- c("x","x","x","x")#
        }#
    ## rainbow#
    } else if (tmp.nch == 4) {#
            tmp.suits   <- c("x","y","z","w")#
    ## error#
    } else {#
        stop("unexpected string lenght\n")#
    }#
#
    ho[i,1]  <- appendSuits(tmp.ranks, tmp.suits)#
}
ho
head(ho)
tmp.ch
length(tmp.ch)
ho  <- matrix(,nrow=nrow(hf), ncol=1)#
for (i in 1:100) {#
    tmp.ch      <- unlist(strsplit(as.character(hf[i,]), ""))#
    tmp.nch     <- length(tmp.ch)#
    tmp.lp      <- which(tmp.ch %in% c("("))  ## location of left parentheses#
    tmp.rp      <- which(tmp.ch %in% c(")"))  ## location of left parentheses#
    tmp.ranks   <- tmp.ch[which(!(tmp.ch %in% c("(",")")))]#
    ## double suited#
    if (tmp.nch == 8) {#
        tmp.suits   <- c("x","x","y","y")#
    ## single suited#
    } else if (tmp.nch == 6) {#
        ## (XY)ZW [1,4]#
        if ((tmp.lp == 1) & (tmp.rp == 4)) {#
            tmp.suits <- c("x","x","y","z")#
        ## X(YZ)W [2,5]#
        } else if ((tmp.lp == 2) & (tmp.rp == 5)) {#
            tmp.suits <- c("x","y","y","z")#
        ## XY(ZW) [3,6]#
        } else if ((tmp.lp == 3) & (tmp.rp == 6)) {#
            tmp.suits <- c("x","y","z","z")#
        ## (XYZ)W [1,5]#
        } else if ((tmp.lp == 1) & (tmp.rp == 5)) {#
            tmp.suits <- c("x","x","x","y")#
        ## X(YZW) [2,6]#
        } else if ((tmp.lp == 2) & (tmp.rp == 6)) {#
           tmp.suits <- c("x","y","y","y")#
        ## (XYZW) [1,6]#
        } else if ((tmp.lp == 1) & (tmp.rp == 6)) {#
            tmp.suits <- c("x","x","x","x")#
        }#
    ## rainbow#
    } else if (tmp.nch == 4) {#
            tmp.suits   <- c("x","y","z","w")#
    ## error#
    } else {#
        stop("unexpected string lenght\n")#
    }#
#
    ho[i,1]  <- appendSuits(tmp.ranks, tmp.suits)#
}
head(ho)
ho  <- matrix(,nrow=nrow(hf), ncol=1)#
for (i in 1:nrow(hf)) {#
    tmp.ch      <- unlist(strsplit(as.character(hf[i,]), ""))#
    tmp.nch     <- length(tmp.ch)#
    tmp.lp      <- which(tmp.ch %in% c("("))  ## location of left parentheses#
    tmp.rp      <- which(tmp.ch %in% c(")"))  ## location of left parentheses#
    tmp.ranks   <- tmp.ch[which(!(tmp.ch %in% c("(",")")))]#
    ## double suited#
    if (tmp.nch == 8) {#
        tmp.suits   <- c("x","x","y","y")#
    ## single suited#
    } else if (tmp.nch == 6) {#
        ## (XY)ZW [1,4]#
        if ((tmp.lp == 1) & (tmp.rp == 4)) {#
            tmp.suits <- c("x","x","y","z")#
        ## X(YZ)W [2,5]#
        } else if ((tmp.lp == 2) & (tmp.rp == 5)) {#
            tmp.suits <- c("x","y","y","z")#
        ## XY(ZW) [3,6]#
        } else if ((tmp.lp == 3) & (tmp.rp == 6)) {#
            tmp.suits <- c("x","y","z","z")#
        ## (XYZ)W [1,5]#
        } else if ((tmp.lp == 1) & (tmp.rp == 5)) {#
            tmp.suits <- c("x","x","x","y")#
        ## X(YZW) [2,6]#
        } else if ((tmp.lp == 2) & (tmp.rp == 6)) {#
           tmp.suits <- c("x","y","y","y")#
        ## (XYZW) [1,6]#
        } else if ((tmp.lp == 1) & (tmp.rp == 6)) {#
            tmp.suits <- c("x","x","x","x")#
        }#
    ## rainbow#
    } else if (tmp.nch == 4) {#
            tmp.suits   <- c("x","y","z","w")#
    ## error#
    } else {#
        stop("unexpected string lenght\n")#
    }#
#
    ho[i,1]  <- appendSuits(tmp.ranks, tmp.suits)#
#
}
tail(ho)
?write.csv
ho  <- matrix(,nrow=nrow(hf), ncol=1)#
for (i in 1:nrow(hf)) {#
    tmp.ch      <- unlist(strsplit(as.character(hf[i,]), ""))#
    tmp.nch     <- length(tmp.ch)#
    tmp.lp      <- which(tmp.ch %in% c("("))  ## location of left parentheses#
    tmp.rp      <- which(tmp.ch %in% c(")"))  ## location of left parentheses#
    tmp.ranks   <- tmp.ch[which(!(tmp.ch %in% c("(",")")))]#
    ## double suited#
    if (tmp.nch == 8) {#
        tmp.suits   <- c("x","x","y","y")#
    ## single suited#
    } else if (tmp.nch == 6) {#
        ## (XY)ZW [1,4]#
        if ((tmp.lp == 1) & (tmp.rp == 4)) {#
            tmp.suits <- c("x","x","y","z")#
        ## X(YZ)W [2,5]#
        } else if ((tmp.lp == 2) & (tmp.rp == 5)) {#
            tmp.suits <- c("x","y","y","z")#
        ## XY(ZW) [3,6]#
        } else if ((tmp.lp == 3) & (tmp.rp == 6)) {#
            tmp.suits <- c("x","y","z","z")#
        ## (XYZ)W [1,5]#
        } else if ((tmp.lp == 1) & (tmp.rp == 5)) {#
            tmp.suits <- c("x","x","x","y")#
        ## X(YZW) [2,6]#
        } else if ((tmp.lp == 2) & (tmp.rp == 6)) {#
           tmp.suits <- c("x","y","y","y")#
        ## (XYZW) [1,6]#
        } else if ((tmp.lp == 1) & (tmp.rp == 6)) {#
            tmp.suits <- c("x","x","x","x")#
        }#
    ## rainbow#
    } else if (tmp.nch == 4) {#
            tmp.suits   <- c("x","y","z","w")#
    ## error#
    } else {#
        stop("unexpected string lenght\n")#
    }#
#
    ho[i,1]  <- appendSuits(tmp.ranks, tmp.suits)#
#
}#
#
write.csv(ho, file="ppt_plo_handrankings_06handed_genericSyntax.txt")
ho  <- matrix(,nrow=nrow(hf), ncol=1)#
for (i in 1:nrow(hf)) {#
    tmp.ch      <- unlist(strsplit(as.character(hf[i,]), ""))#
    tmp.nch     <- length(tmp.ch)#
    tmp.lp      <- which(tmp.ch %in% c("("))  ## location of left parentheses#
    tmp.rp      <- which(tmp.ch %in% c(")"))  ## location of left parentheses#
    tmp.ranks   <- tmp.ch[which(!(tmp.ch %in% c("(",")")))]#
    ## double suited#
    if (tmp.nch == 8) {#
        tmp.suits   <- c("x","x","y","y")#
    ## single suited#
    } else if (tmp.nch == 6) {#
        ## (XY)ZW [1,4]#
        if ((tmp.lp == 1) & (tmp.rp == 4)) {#
            tmp.suits <- c("x","x","y","z")#
        ## X(YZ)W [2,5]#
        } else if ((tmp.lp == 2) & (tmp.rp == 5)) {#
            tmp.suits <- c("x","y","y","z")#
        ## XY(ZW) [3,6]#
        } else if ((tmp.lp == 3) & (tmp.rp == 6)) {#
            tmp.suits <- c("x","y","z","z")#
        ## (XYZ)W [1,5]#
        } else if ((tmp.lp == 1) & (tmp.rp == 5)) {#
            tmp.suits <- c("x","x","x","y")#
        ## X(YZW) [2,6]#
        } else if ((tmp.lp == 2) & (tmp.rp == 6)) {#
           tmp.suits <- c("x","y","y","y")#
        ## (XYZW) [1,6]#
        } else if ((tmp.lp == 1) & (tmp.rp == 6)) {#
            tmp.suits <- c("x","x","x","x")#
        }#
    ## rainbow#
    } else if (tmp.nch == 4) {#
            tmp.suits   <- c("x","y","z","w")#
    ## error#
    } else {#
        stop("unexpected string lenght\n")#
    }#
#
    ho[i,1]  <- appendSuits(tmp.ranks, tmp.suits)#
#
}#
#
write.csv(ho, file="ppt_plo_handrankings_06handed_genericSyntax.txt", row.names=FALSE)
ho  <- matrix(,nrow=nrow(hf), ncol=1)#
for (i in 1:nrow(hf)) {#
    tmp.ch      <- unlist(strsplit(as.character(hf[i,]), ""))#
    tmp.nch     <- length(tmp.ch)#
    tmp.lp      <- which(tmp.ch %in% c("("))  ## location of left parentheses#
    tmp.rp      <- which(tmp.ch %in% c(")"))  ## location of left parentheses#
    tmp.ranks   <- tmp.ch[which(!(tmp.ch %in% c("(",")")))]#
    ## double suited#
    if (tmp.nch == 8) {#
        tmp.suits   <- c("x","x","y","y")#
    ## single suited#
    } else if (tmp.nch == 6) {#
        ## (XY)ZW [1,4]#
        if ((tmp.lp == 1) & (tmp.rp == 4)) {#
            tmp.suits <- c("x","x","y","z")#
        ## X(YZ)W [2,5]#
        } else if ((tmp.lp == 2) & (tmp.rp == 5)) {#
            tmp.suits <- c("x","y","y","z")#
        ## XY(ZW) [3,6]#
        } else if ((tmp.lp == 3) & (tmp.rp == 6)) {#
            tmp.suits <- c("x","y","z","z")#
        ## (XYZ)W [1,5]#
        } else if ((tmp.lp == 1) & (tmp.rp == 5)) {#
            tmp.suits <- c("x","x","x","y")#
        ## X(YZW) [2,6]#
        } else if ((tmp.lp == 2) & (tmp.rp == 6)) {#
           tmp.suits <- c("x","y","y","y")#
        ## (XYZW) [1,6]#
        } else if ((tmp.lp == 1) & (tmp.rp == 6)) {#
            tmp.suits <- c("x","x","x","x")#
        }#
    ## rainbow#
    } else if (tmp.nch == 4) {#
            tmp.suits   <- c("x","y","z","w")#
    ## error#
    } else {#
        stop("unexpected string lenght\n")#
    }#
#
    ho[i,1]  <- appendSuits(tmp.ranks, tmp.suits)#
#
}#
#
write.csv(ho, file="ppt_plo_handrankings_06handed_genericSyntax.txt", row.names=FALSE, col.names=FALSE)
write.table(ho, file="ppt_plo_handrankings_06handed_genericSyntax.txt", row.names=FALSE, col.names=FALSE)
fname <- "ppt_plo_handrankings_06handed.txt"
strsplit(fname, ".")
strsplit(fname, "[.]")
in.file     <- fname#
    tmp.file    <- unlist(strsplit(fname, "[.]"))
tmp.file
tmp.file    <- unlist(strsplit(fname, "[.]"))#
    out.file    <- paste0(tmp.file[1], "_genericSyntax", tmp.file[2])#
    hf          <- read.csv(in.file, header=FALSE)#
    ho          <- matrix(,nrow=nrow(hf), ncol=1)
tmp.file
out.file
tmp.file    <- unlist(strsplit(fname, "[.]"))#
    out.file    <- paste0(tmp.file[1], "_genericSyntax", ".", tmp.file[2])#
    hf          <- read.csv(in.file, header=FALSE)#
    ho          <- matrix(,nrow=nrow(hf), ncol=1)
hf
ho
for (i in 1:nrow(hf)) {#
        ## process a hand#
        tmp.ch      <- unlist(strsplit(as.character(hf[i,]), ""))#
        tmp.nch     <- length(tmp.ch)#
        tmp.lp      <- which(tmp.ch %in% c("("))        ## location of left parentheses#
        tmp.rp      <- which(tmp.ch %in% c(")"))        ## location of right parentheses#
        tmp.ranks   <- tmp.ch[which(!(tmp.ch %in% c("(",")")))]#
        ## double suited#
        if (tmp.nch == 8) {#
            tmp.suits   <- c("x","x","y","y")#
        ## single suited#
        } else if (tmp.nch == 6) {#
            ## (XY)ZW [1,4]#
            if ((tmp.lp == 1) & (tmp.rp == 4)) {#
                tmp.suits <- c("x","x","y","z")#
            ## X(YZ)W [2,5]#
            } else if ((tmp.lp == 2) & (tmp.rp == 5)) {#
                tmp.suits <- c("x","y","y","z")#
            ## XY(ZW) [3,6]#
            } else if ((tmp.lp == 3) & (tmp.rp == 6)) {#
                tmp.suits <- c("x","y","z","z")#
            ## (XYZ)W [1,5]#
            } else if ((tmp.lp == 1) & (tmp.rp == 5)) {#
                tmp.suits <- c("x","x","x","y")#
            ## X(YZW) [2,6]#
            } else if ((tmp.lp == 2) & (tmp.rp == 6)) {#
                tmp.suits <- c("x","y","y","y")#
            ## (XYZW) [1,6]#
            } else if ((tmp.lp == 1) & (tmp.rp == 6)) {#
                tmp.suits <- c("x","x","x","x")#
            }#
        ## rainbow#
        } else if (tmp.nch == 4) {#
            tmp.suits   <- c("x","y","z","w")#
        ## error#
        } else {#
            stop("unexpected string lenght\n")#
        }#
    ## insert the hand in generic syntax to a matrix#
    ho[i,1]  <- appendSuits(tmp.ranks, tmp.suits)#
    }
out.file
## save the output as a file#
    write.table(ho, file=out.file, row.names=FALSE, col.names=FALSE)
##     4     6     8#
##  1820 11531  3081#
#
## tl <- try(system("which java", intern=TRUE))#
#
## which(!(tmp.ch %in% c("(",")")))#
## tmp.ch[which(!(tmp.ch %in% c("(",")")))]#
##/Applications/PPTOddsOracle.app/Contents/java/app/ui_jar#
#
setwd("/Users/alexstephens/Development/poker/omaha_hi/data")#
#
## <function>#
appendSuits <- function(h, s) {#
    return(paste(paste(h,s,sep=""), collapse=""))#
}#
#
## <function>#
processHandFile <- function(in.file) {#
#
    tmp.file    <- unlist(strsplit(fname, "[.]"))#
    out.file    <- paste0(tmp.file[1], "_genericSyntax", ".", tmp.file[2])#
    hf          <- read.csv(in.file, header=FALSE)#
    ho          <- matrix(,nrow=nrow(hf), ncol=1)#
#
    for (i in 1:nrow(hf)) {#
        ## process a hand#
        tmp.ch      <- unlist(strsplit(as.character(hf[i,]), ""))#
        tmp.nch     <- length(tmp.ch)#
        tmp.lp      <- which(tmp.ch %in% c("("))        ## location of left parentheses#
        tmp.rp      <- which(tmp.ch %in% c(")"))        ## location of right parentheses#
        tmp.ranks   <- tmp.ch[which(!(tmp.ch %in% c("(",")")))]#
        ## double suited#
        if (tmp.nch == 8) {#
            tmp.suits   <- c("x","x","y","y")#
        ## single suited#
        } else if (tmp.nch == 6) {#
            ## (XY)ZW [1,4]#
            if ((tmp.lp == 1) & (tmp.rp == 4)) {#
                tmp.suits <- c("x","x","y","z")#
            ## X(YZ)W [2,5]#
            } else if ((tmp.lp == 2) & (tmp.rp == 5)) {#
                tmp.suits <- c("x","y","y","z")#
            ## XY(ZW) [3,6]#
            } else if ((tmp.lp == 3) & (tmp.rp == 6)) {#
                tmp.suits <- c("x","y","z","z")#
            ## (XYZ)W [1,5]#
            } else if ((tmp.lp == 1) & (tmp.rp == 5)) {#
                tmp.suits <- c("x","x","x","y")#
            ## X(YZW) [2,6]#
            } else if ((tmp.lp == 2) & (tmp.rp == 6)) {#
                tmp.suits <- c("x","y","y","y")#
            ## (XYZW) [1,6]#
            } else if ((tmp.lp == 1) & (tmp.rp == 6)) {#
                tmp.suits <- c("x","x","x","x")#
            }#
        ## rainbow#
        } else if (tmp.nch == 4) {#
            tmp.suits   <- c("x","y","z","w")#
        ## error#
        } else {#
            stop("unexpected string lenght\n")#
        }#
    ## insert the hand in generic syntax to a matrix#
    ho[i,1]  <- appendSuits(tmp.ranks, tmp.suits)#
    }#
#
    ## save the output as a file#
    write.table(ho, file=out.file, row.names=FALSE, col.names=FALSE)#
}
processHandFile("ppt_plo_handrankings_03handed.txt")
getwd()
dir()
## hand ranking forms#
## XYZW#
## (XY)ZW#
## X(YZ)W#
## XY(ZW)#
## (XYZ)W#
## X(YZW)#
## (XYZW)#
## (XY)(ZW)#
##     4     6     8#
##  1820 11531  3081#
#
## tl <- try(system("which java", intern=TRUE))#
#
## which(!(tmp.ch %in% c("(",")")))#
## tmp.ch[which(!(tmp.ch %in% c("(",")")))]#
##/Applications/PPTOddsOracle.app/Contents/java/app/ui_jar#
#
setwd("/Users/alexstephens/Development/poker/omaha_hi/data")#
#
## <function>#
appendSuits <- function(h, s) {#
    return(paste(paste(h,s,sep=""), collapse=""))#
}#
#
## <function>#
processHandFile <- function(in.file) {#
#
    tmp.file    <- unlist(strsplit(in,file, "[.]"))#
    out.file    <- paste0(tmp.file[1], "_genericSyntax", ".", tmp.file[2])#
    hf          <- read.csv(in.file, header=FALSE)#
    ho          <- matrix(,nrow=nrow(hf), ncol=1)#
#
    for (i in 1:nrow(hf)) {#
        ## process a hand#
        tmp.ch      <- unlist(strsplit(as.character(hf[i,]), ""))#
        tmp.nch     <- length(tmp.ch)#
        tmp.lp      <- which(tmp.ch %in% c("("))        ## location of left parentheses#
        tmp.rp      <- which(tmp.ch %in% c(")"))        ## location of right parentheses#
        tmp.ranks   <- tmp.ch[which(!(tmp.ch %in% c("(",")")))]#
        ## double suited#
        if (tmp.nch == 8) {#
            tmp.suits   <- c("x","x","y","y")#
        ## single suited#
        } else if (tmp.nch == 6) {#
            ## (XY)ZW [1,4]#
            if ((tmp.lp == 1) & (tmp.rp == 4)) {#
                tmp.suits <- c("x","x","y","z")#
            ## X(YZ)W [2,5]#
            } else if ((tmp.lp == 2) & (tmp.rp == 5)) {#
                tmp.suits <- c("x","y","y","z")#
            ## XY(ZW) [3,6]#
            } else if ((tmp.lp == 3) & (tmp.rp == 6)) {#
                tmp.suits <- c("x","y","z","z")#
            ## (XYZ)W [1,5]#
            } else if ((tmp.lp == 1) & (tmp.rp == 5)) {#
                tmp.suits <- c("x","x","x","y")#
            ## X(YZW) [2,6]#
            } else if ((tmp.lp == 2) & (tmp.rp == 6)) {#
                tmp.suits <- c("x","y","y","y")#
            ## (XYZW) [1,6]#
            } else if ((tmp.lp == 1) & (tmp.rp == 6)) {#
                tmp.suits <- c("x","x","x","x")#
            }#
        ## rainbow#
        } else if (tmp.nch == 4) {#
            tmp.suits   <- c("x","y","z","w")#
        ## error#
        } else {#
            stop("unexpected string lenght\n")#
        }#
    ## insert the hand in generic syntax to a matrix#
    ho[i,1]  <- appendSuits(tmp.ranks, tmp.suits)#
    }#
#
    ## save the output as a file#
    write.table(ho, file=out.file, row.names=FALSE, col.names=FALSE)#
}#
processHandFile("ppt_plo_handrankings_03handed.txt")
rm(list=ls())#
#
setwd("/Users/alexstephens/Development/poker/omaha_hi/data")#
#
## <function>#
appendSuits <- function(h, s) {#
    return(paste(paste(h,s,sep=""), collapse=""))#
}#
#
## <function>#
processHandFile <- function(in.file) {#
#
    tmp.file    <- unlist(strsplit(in.file, "[.]"))#
    out.file    <- paste0(tmp.file[1], "_genericSyntax", ".", tmp.file[2])#
    hf          <- read.csv(in.file, header=FALSE)#
    ho          <- matrix(,nrow=nrow(hf), ncol=1)#
#
    for (i in 1:nrow(hf)) {#
        ## process a hand#
        tmp.ch      <- unlist(strsplit(as.character(hf[i,]), ""))#
        tmp.nch     <- length(tmp.ch)#
        tmp.lp      <- which(tmp.ch %in% c("("))        ## location of left parentheses#
        tmp.rp      <- which(tmp.ch %in% c(")"))        ## location of right parentheses#
        tmp.ranks   <- tmp.ch[which(!(tmp.ch %in% c("(",")")))]#
        ## double suited#
        if (tmp.nch == 8) {#
            tmp.suits   <- c("x","x","y","y")#
        ## single suited#
        } else if (tmp.nch == 6) {#
            ## (XY)ZW [1,4]#
            if ((tmp.lp == 1) & (tmp.rp == 4)) {#
                tmp.suits <- c("x","x","y","z")#
            ## X(YZ)W [2,5]#
            } else if ((tmp.lp == 2) & (tmp.rp == 5)) {#
                tmp.suits <- c("x","y","y","z")#
            ## XY(ZW) [3,6]#
            } else if ((tmp.lp == 3) & (tmp.rp == 6)) {#
                tmp.suits <- c("x","y","z","z")#
            ## (XYZ)W [1,5]#
            } else if ((tmp.lp == 1) & (tmp.rp == 5)) {#
                tmp.suits <- c("x","x","x","y")#
            ## X(YZW) [2,6]#
            } else if ((tmp.lp == 2) & (tmp.rp == 6)) {#
                tmp.suits <- c("x","y","y","y")#
            ## (XYZW) [1,6]#
            } else if ((tmp.lp == 1) & (tmp.rp == 6)) {#
                tmp.suits <- c("x","x","x","x")#
            }#
        ## rainbow#
        } else if (tmp.nch == 4) {#
            tmp.suits   <- c("x","y","z","w")#
        ## error#
        } else {#
            stop("unexpected string lenght\n")#
        }#
    ## insert the hand in generic syntax to a matrix#
    ho[i,1]  <- appendSuits(tmp.ranks, tmp.suits)#
    }#
#
    ## save the output as a file#
    write.table(ho, file=out.file, row.names=FALSE, col.names=FALSE)#
}
processHandFile("ppt_plo_handrankings_06handed.txt")
processHandFile("ppt_plo_handrankings_03handed.txt")#
processHandFile("ppt_plo_handrankings_06handed.txt")#
processHandFile("ppt_plo_handrankings_10handed.txt")
q()
